{
	"info": {
		"_postman_id": "4468faa0-814f-45a0-97c6-f9483d465233",
		"name": "Real Estate API Demo",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "3350677"
	},
	"item": [
		{
			"name": "home",
			"item": [
				{
					"name": "/v1/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[GET]::/v1/ - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[GET]::/v1/ - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[GET]::/v1/ - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"message\":{\"type\":\"string\"}},\"required\":[\"message\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[GET]::/v1/ - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								""
							]
						}
					},
					"response": [
						{
							"name": "Responds with a message",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://localhost:3000/v1/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"v1",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"dolore labori\"\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										""
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "search",
			"item": [
				{
					"name": "/v1/search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/v1/search - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/v1/search - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/v1/search - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"propertyId\":{\"type\":\"string\"},\"rent\":{\"type\":\"number\"},\"immediate\":{\"type\":\"number\"},\"availableDate\":{\"type\":\"string\"},\"shortterm\":{\"type\":\"number\"},\"longterm\":{\"type\":\"number\"},\"furnished\":{\"type\":\"number\"},\"heat\":{\"type\":\"number\"},\"water\":{\"type\":\"number\"},\"electricity\":{\"type\":\"number\"},\"internet\":{\"type\":\"number\"},\"television\":{\"type\":\"number\"},\"bedroom\":{\"type\":\"string\"},\"bathroom\":{\"type\":\"string\"},\"listingId\":{\"type\":\"number\"},\"address\":{\"type\":\"string\"},\"community\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"},\"smoking\":{\"type\":\"number\"},\"cats\":{\"type\":\"number\"},\"dogs\":{\"type\":\"number\"},\"parking\":{\"type\":\"string\"},\"feature\":{\"type\":\"string\"},\"imageId\":{\"type\":\"string\"},\"latitude\":{\"type\":\"string\"},\"longitude\":{\"type\":\"string\"}},\"required\":[\"id\"]}}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/v1/search - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"and\": [\n    [\n      \"between\",\n      \"rent\",\n      1000,\n      2000\n    ],\n    [\n      \"like\",\n      \"address\",\n      \"Crescent\"\n    ],\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"smoking\",\n          1\n        ],\n        [\n          \"eq\",\n          \"cats\",\n          1\n        ],\n        [\n          \"eq\",\n          \"dogs\",\n          1\n        ]\n      ]\n    ],\n    [\n      \"aroundLatLng\",\n      50.9573828,\n      -114.084153,\n      1000\n    ]\n  ],\n  \"fields\": [\n    \"listingId\",\n    \"propertyId\",\n    \"rent\",\n    \"immediate\",\n    \"imageId\",\n    \"smoking\",\n    \"cats\",\n    \"dogs\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/search",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"search"
							],
							"query": [
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "cursor",
									"value": "abqdj6xe8puto1j83soz3bml",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with an array of property unit objects. If no filters are used, all property units are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"between\",\n      \"rent\",\n      1000,\n      2000\n    ],\n    [\n      \"like\",\n      \"address\",\n      \"Crescent\"\n    ],\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"smoking\",\n          1\n        ],\n        [\n          \"eq\",\n          \"cats\",\n          1\n        ],\n        [\n          \"eq\",\n          \"dogs\",\n          1\n        ]\n      ]\n    ],\n    [\n      \"aroundLatLng\",\n      50.9573828,\n      -114.084153,\n      1000\n    ]\n  ],\n  \"fields\": [\n    \"listingId\",\n    \"propertyId\",\n    \"rent\",\n    \"immediate\",\n    \"imageId\",\n    \"smoking\",\n    \"cats\",\n    \"dogs\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/search?limit=10&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"search"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"non labore culpa\",\n      \"propertyId\": \"in et officia ad\",\n      \"rent\": -31607676.916713685,\n      \"immediate\": 26620430.609418392,\n      \"availableDate\": \"labore aute\",\n      \"shortterm\": -23974387.58104089,\n      \"longterm\": 39505250.69286314,\n      \"furnished\": 26236652.463071093,\n      \"heat\": 82410777.42038548,\n      \"water\": -94772743.62999846,\n      \"electricity\": -70085385.8642188,\n      \"internet\": -12559111.211293891,\n      \"television\": 88514324.4730767,\n      \"bedroom\": \"sit dolore velit ullamco\",\n      \"bathroom\": \"reprehenderit sunt adipisicing tempor\",\n      \"listingId\": -91263383.58865494,\n      \"address\": \"ut velit exercitation incididunt consectetur\",\n      \"community\": \"qui veniam id in\",\n      \"type\": \"magna dolor est\",\n      \"smoking\": -40887584.46073988,\n      \"cats\": -34912432.54798708,\n      \"dogs\": 42367648.14715919,\n      \"parking\": \"consectetur Duis irure laborum\",\n      \"feature\": \"nisi Duis non\",\n      \"imageId\": \"dolore ea ut incididunt\",\n      \"latitude\": \"incididunt est non\",\n      \"longitude\": \"do tempor dolor id\"\n    },\n    {\n      \"id\": \"aute occaecat et\",\n      \"propertyId\": \"enim esse officia quis\",\n      \"rent\": -48395618.47140174,\n      \"immediate\": 78167737.19897845,\n      \"availableDate\": \"et adipisicing sit commodo esse\",\n      \"shortterm\": -31627063.158592477,\n      \"longterm\": 38845687.140913755,\n      \"furnished\": -97202710.18238229,\n      \"heat\": -78750774.06510541,\n      \"water\": -21287857.01650706,\n      \"electricity\": -17657848.899288803,\n      \"internet\": -78233302.44215408,\n      \"television\": -67972650.05319932,\n      \"bedroom\": \"do ad sit\",\n      \"bathroom\": \"ex Ut\",\n      \"listingId\": -34309936.48507248,\n      \"address\": \"est magna quis\",\n      \"community\": \"Ut\",\n      \"type\": \"ipsum in\",\n      \"smoking\": 92957204.1730856,\n      \"cats\": -11956687.427902862,\n      \"dogs\": 36443180.98704833,\n      \"parking\": \"consequat aliquip ut officia culpa\",\n      \"feature\": \"Ut culpa in\",\n      \"imageId\": \"cillum eu ea laboris\",\n      \"latitude\": \"anim nisi\",\n      \"longitude\": \"sit ipsum exercitation amet aute\"\n    }\n  ]\n}"
						},
						{
							"name": "Responds with a bad request error object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"between\",\n      \"rent\",\n      1000,\n      2000\n    ],\n    [\n      \"like\",\n      \"address\",\n      \"Crescent\"\n    ],\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"smoking\",\n          1\n        ],\n        [\n          \"eq\",\n          \"cats\",\n          1\n        ],\n        [\n          \"eq\",\n          \"dogs\",\n          1\n        ]\n      ]\n    ],\n    [\n      \"aroundLatLng\",\n      50.9573828,\n      -114.084153,\n      1000\n    ]\n  ],\n  \"fields\": [\n    \"listingId\",\n    \"propertyId\",\n    \"rent\",\n    \"immediate\",\n    \"imageId\",\n    \"smoking\",\n    \"cats\",\n    \"dogs\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/search?limit=10&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"search"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"between\",\n      \"rent\",\n      1000,\n      2000\n    ],\n    [\n      \"like\",\n      \"address\",\n      \"Crescent\"\n    ],\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"smoking\",\n          1\n        ],\n        [\n          \"eq\",\n          \"cats\",\n          1\n        ],\n        [\n          \"eq\",\n          \"dogs\",\n          1\n        ]\n      ]\n    ],\n    [\n      \"aroundLatLng\",\n      50.9573828,\n      -114.084153,\n      1000\n    ]\n  ],\n  \"fields\": [\n    \"listingId\",\n    \"propertyId\",\n    \"rent\",\n    \"immediate\",\n    \"imageId\",\n    \"smoking\",\n    \"cats\",\n    \"dogs\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/search?limit=10&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"search"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "bathroom",
			"item": [
				{
					"name": "/v1/bathroom/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/v1/bathroom/list - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/v1/bathroom/list - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/v1/bathroom/list - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"order\":{\"type\":\"number\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"order\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/v1/bathroom/list - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/bathroom/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"bathroom",
								"list"
							],
							"query": [
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "updatedAt-desc",
									"disabled": true
								},
								{
									"key": "cursor",
									"value": "abqdj6xe8puto1j83soz3bml",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with an array of bathroom objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/bathroom/list?limit=10&orderBy=updatedAt-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"bathroom",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "updatedAt-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"labore ea sit incididunt\",\n      \"name\": \"in consectetur anim\",\n      \"order\": -3894539.451474935,\n      \"createdAt\": \"Ut\",\n      \"updatedAt\": \"nisi do\"\n    },\n    {\n      \"id\": \"consectetur irure\",\n      \"name\": \"amet consectetur sit Duis\",\n      \"order\": -53883371.626426294,\n      \"createdAt\": \"dolor tempor Ut sint\",\n      \"updatedAt\": \"cillum Excepteur sed\"\n    }\n  ]\n}"
						},
						{
							"name": "Responds with a bad request error object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/bathroom/list?limit=10&orderBy=updatedAt-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"bathroom",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "updatedAt-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/bathroom/list?limit=10&orderBy=updatedAt-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"bathroom",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "updatedAt-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/bathroom/create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/v1/bathroom/create - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/v1/bathroom/create - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/v1/bathroom/create - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/v1/bathroom/create - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/bathroom/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"bathroom",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/v1/bathroom/create",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"v1",
										"bathroom",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"consectetur\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/bathroom/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"bathroom",
										"create"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/bathroom/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"bathroom",
										"create"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/bathroom/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"bathroom",
										"create"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/bathroom/update/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[PUT]::/v1/bathroom/update/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[PUT]::/v1/bathroom/update/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[PUT]::/v1/bathroom/update/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[PUT]::/v1/bathroom/update/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"order\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/bathroom/update/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"bathroom",
								"update",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "qae4cp7xnotk3wh26dkpp7y7",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with the id of the updated bathroom.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/bathroom/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"bathroom",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "qae4cp7xnotk3wh26dkpp7y7",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"consectetur\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/bathroom/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"bathroom",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "qae4cp7xnotk3wh26dkpp7y7",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/bathroom/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"bathroom",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "qae4cp7xnotk3wh26dkpp7y7",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/bathroom/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"bathroom",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "qae4cp7xnotk3wh26dkpp7y7",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/bathroom/delete/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[DELETE]::/v1/bathroom/delete/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[DELETE]::/v1/bathroom/delete/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[DELETE]::/v1/bathroom/delete/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[DELETE]::/v1/bathroom/delete/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/bathroom/delete/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"bathroom",
								"delete",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "qae4cp7xnotk3wh26dkpp7y7",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/bathroom/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"bathroom",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "qae4cp7xnotk3wh26dkpp7y7",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/bathroom/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"bathroom",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "qae4cp7xnotk3wh26dkpp7y7",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/bathroom/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"bathroom",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "qae4cp7xnotk3wh26dkpp7y7",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/bathroom/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"bathroom",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "qae4cp7xnotk3wh26dkpp7y7",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a conflict error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/bathroom/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"bathroom",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "qae4cp7xnotk3wh26dkpp7y7",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "bedroom",
			"item": [
				{
					"name": "/v1/bedroom/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/v1/bedroom/list - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/v1/bedroom/list - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/v1/bedroom/list - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"order\":{\"type\":\"number\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"order\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/v1/bedroom/list - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/bedroom/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"bedroom",
								"list"
							],
							"query": [
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "updatedAt-desc",
									"disabled": true
								},
								{
									"key": "cursor",
									"value": "abqdj6xe8puto1j83soz3bml",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with an array of bedroom objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/bedroom/list?limit=10&orderBy=updatedAt-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"bedroom",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "updatedAt-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"labore ea sit incididunt\",\n      \"name\": \"in consectetur anim\",\n      \"order\": -3894539.451474935,\n      \"createdAt\": \"Ut\",\n      \"updatedAt\": \"nisi do\"\n    },\n    {\n      \"id\": \"consectetur irure\",\n      \"name\": \"amet consectetur sit Duis\",\n      \"order\": -53883371.626426294,\n      \"createdAt\": \"dolor tempor Ut sint\",\n      \"updatedAt\": \"cillum Excepteur sed\"\n    }\n  ]\n}"
						},
						{
							"name": "Responds with a bad request error object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/bedroom/list?limit=10&orderBy=updatedAt-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"bedroom",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "updatedAt-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/bedroom/list?limit=10&orderBy=updatedAt-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"bedroom",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "updatedAt-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/bedroom/create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/v1/bedroom/create - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/v1/bedroom/create - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/v1/bedroom/create - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/v1/bedroom/create - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/bedroom/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"bedroom",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/v1/bedroom/create",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"v1",
										"bedroom",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"consectetur\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/bedroom/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"bedroom",
										"create"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/bedroom/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"bedroom",
										"create"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/bedroom/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"bedroom",
										"create"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/bedroom/update/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[PUT]::/v1/bedroom/update/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[PUT]::/v1/bedroom/update/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[PUT]::/v1/bedroom/update/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[PUT]::/v1/bedroom/update/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"order\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/bedroom/update/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"bedroom",
								"update",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "zjggk1ve17r7jmpq8dtmbjyw",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with the id of the updated bedroom.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/v1/bedroom/update/:id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"v1",
										"bedroom",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "zjggk1ve17r7jmpq8dtmbjyw",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"consectetur\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/bedroom/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"bedroom",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "zjggk1ve17r7jmpq8dtmbjyw",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/bedroom/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"bedroom",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "zjggk1ve17r7jmpq8dtmbjyw",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/bedroom/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"bedroom",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "zjggk1ve17r7jmpq8dtmbjyw",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/bedroom/delete/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[DELETE]::/v1/bedroom/delete/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[DELETE]::/v1/bedroom/delete/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[DELETE]::/v1/bedroom/delete/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[DELETE]::/v1/bedroom/delete/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/bedroom/delete/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"bedroom",
								"delete",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "zjggk1ve17r7jmpq8dtmbjyw",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/bedroom/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"bedroom",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "zjggk1ve17r7jmpq8dtmbjyw",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/bedroom/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"bedroom",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "zjggk1ve17r7jmpq8dtmbjyw",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/bedroom/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"bedroom",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "zjggk1ve17r7jmpq8dtmbjyw",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/bedroom/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"bedroom",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "zjggk1ve17r7jmpq8dtmbjyw",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a conflict error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/bedroom/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"bedroom",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "zjggk1ve17r7jmpq8dtmbjyw",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "buildingFeature",
			"item": [
				{
					"name": "/v1/building-feature/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/v1/building-feature/list - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/v1/building-feature/list - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/v1/building-feature/list - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"order\":{\"type\":\"number\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"order\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/v1/building-feature/list - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/building-feature/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"building-feature",
								"list"
							],
							"query": [
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "updatedAt-desc",
									"disabled": true
								},
								{
									"key": "cursor",
									"value": "abqdj6xe8puto1j83soz3bml",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with an array of buildingFeature objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/building-feature/list?limit=10&orderBy=updatedAt-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"building-feature",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "updatedAt-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"labore ea sit incididunt\",\n      \"name\": \"in consectetur anim\",\n      \"order\": -3894539.451474935,\n      \"createdAt\": \"Ut\",\n      \"updatedAt\": \"nisi do\"\n    },\n    {\n      \"id\": \"consectetur irure\",\n      \"name\": \"amet consectetur sit Duis\",\n      \"order\": -53883371.626426294,\n      \"createdAt\": \"dolor tempor Ut sint\",\n      \"updatedAt\": \"cillum Excepteur sed\"\n    }\n  ]\n}"
						},
						{
							"name": "Responds with a bad request error object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/building-feature/list?limit=10&orderBy=updatedAt-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"building-feature",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "updatedAt-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/building-feature/list?limit=10&orderBy=updatedAt-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"building-feature",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "updatedAt-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/building-feature/create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/v1/building-feature/create - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/v1/building-feature/create - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/v1/building-feature/create - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/v1/building-feature/create - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/building-feature/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"building-feature",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/building-feature/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"building-feature",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"consectetur\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/building-feature/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"building-feature",
										"create"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/building-feature/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"building-feature",
										"create"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/building-feature/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"building-feature",
										"create"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/building-feature/update/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[PUT]::/v1/building-feature/update/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[PUT]::/v1/building-feature/update/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[PUT]::/v1/building-feature/update/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[PUT]::/v1/building-feature/update/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"order\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/building-feature/update/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"building-feature",
								"update",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "zsm6fam0k05blkaeoit8x09a",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with the id of the updated buildingFeature.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/building-feature/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"building-feature",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "zsm6fam0k05blkaeoit8x09a",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"consectetur\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/building-feature/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"building-feature",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "zsm6fam0k05blkaeoit8x09a",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/building-feature/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"building-feature",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "zsm6fam0k05blkaeoit8x09a",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/building-feature/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"building-feature",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "zsm6fam0k05blkaeoit8x09a",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/building-feature/delete/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[DELETE]::/v1/building-feature/delete/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[DELETE]::/v1/building-feature/delete/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[DELETE]::/v1/building-feature/delete/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[DELETE]::/v1/building-feature/delete/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/building-feature/delete/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"building-feature",
								"delete",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "zsm6fam0k05blkaeoit8x09a",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/building-feature/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"building-feature",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "zsm6fam0k05blkaeoit8x09a",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/building-feature/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"building-feature",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "zsm6fam0k05blkaeoit8x09a",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/building-feature/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"building-feature",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "zsm6fam0k05blkaeoit8x09a",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/building-feature/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"building-feature",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "zsm6fam0k05blkaeoit8x09a",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a conflict error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/building-feature/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"building-feature",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "zsm6fam0k05blkaeoit8x09a",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "buildingFeatureToProperty",
			"item": [
				{
					"name": "/v1/building-feature-to-property/features-by-item/:itemId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[GET]::/v1/building-feature-to-property/features-by-item/:itemId - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[GET]::/v1/building-feature-to-property/features-by-item/:itemId - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[GET]::/v1/building-feature-to-property/features-by-item/:itemId - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"buildingFeatureId\":{\"type\":\"string\"},\"buildingFeature\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]}},\"required\":[\"buildingFeatureId\",\"buildingFeature\"]}}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[GET]::/v1/building-feature-to-property/features-by-item/:itemId - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/building-feature-to-property/features-by-item/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"building-feature-to-property",
								"features-by-item",
								":itemId"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "hdsyi7gw3n77jrngcck1x33y",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/building-feature-to-property/features-by-item/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"building-feature-to-property",
										"features-by-item",
										":itemId"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"buildingFeatureId\": \"quis ut cupidatat\",\n      \"buildingFeature\": {\n        \"name\": \"cupidatat consequat\"\n      }\n    },\n    {\n      \"buildingFeatureId\": \"ipsum est reprehenderit\",\n      \"buildingFeature\": {\n        \"name\": \"ea id\"\n      }\n    }\n  ]\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/building-feature-to-property/features-by-item/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"building-feature-to-property",
										"features-by-item",
										":itemId"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/building-feature-to-property/features-by-item/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"building-feature-to-property",
										"features-by-item",
										":itemId"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/building-feature-to-property/create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/v1/building-feature-to-property/create - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/v1/building-feature-to-property/create - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/v1/building-feature-to-property/create - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/v1/building-feature-to-property/create - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"featureId\": \"zsm6fam0k05blkaeoit8x09a\",\n  \"itemId\": \"hdsyi7gw3n77jrngcck1x33y\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/building-feature-to-property/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"building-feature-to-property",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"featureId\": \"zsm6fam0k05blkaeoit8x09a\",\n  \"itemId\": \"hdsyi7gw3n77jrngcck1x33y\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/building-feature-to-property/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"building-feature-to-property",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"featureId\": \"zsm6fam0k05blkaeoit8x09a\",\n  \"itemId\": \"hdsyi7gw3n77jrngcck1x33y\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/building-feature-to-property/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"building-feature-to-property",
										"create"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"featureId\": \"zsm6fam0k05blkaeoit8x09a\",\n  \"itemId\": \"hdsyi7gw3n77jrngcck1x33y\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/building-feature-to-property/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"building-feature-to-property",
										"create"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"featureId\": \"zsm6fam0k05blkaeoit8x09a\",\n  \"itemId\": \"hdsyi7gw3n77jrngcck1x33y\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/building-feature-to-property/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"building-feature-to-property",
										"create"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/building-feature-to-property/delete/:featureId/:itemId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[DELETE]::/v1/building-feature-to-property/delete/:featureId/:itemId - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[DELETE]::/v1/building-feature-to-property/delete/:featureId/:itemId - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[DELETE]::/v1/building-feature-to-property/delete/:featureId/:itemId - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[DELETE]::/v1/building-feature-to-property/delete/:featureId/:itemId - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/building-feature-to-property/delete/:featureId/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"building-feature-to-property",
								"delete",
								":featureId",
								":itemId"
							],
							"variable": [
								{
									"key": "featureId",
									"value": "zsm6fam0k05blkaeoit8x09a",
									"description": "(Required) "
								},
								{
									"key": "itemId",
									"value": "hdsyi7gw3n77jrngcck1x33y",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/building-feature-to-property/delete/:featureId/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"building-feature-to-property",
										"delete",
										":featureId",
										":itemId"
									],
									"variable": [
										{
											"key": "featureId",
											"value": "zsm6fam0k05blkaeoit8x09a",
											"description": "(Required) "
										},
										{
											"key": "itemId",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/building-feature-to-property/delete/:featureId/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"building-feature-to-property",
										"delete",
										":featureId",
										":itemId"
									],
									"variable": [
										{
											"key": "featureId",
											"value": "zsm6fam0k05blkaeoit8x09a",
											"description": "(Required) "
										},
										{
											"key": "itemId",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/building-feature-to-property/delete/:featureId/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"building-feature-to-property",
										"delete",
										":featureId",
										":itemId"
									],
									"variable": [
										{
											"key": "featureId",
											"value": "zsm6fam0k05blkaeoit8x09a",
											"description": "(Required) "
										},
										{
											"key": "itemId",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/building-feature-to-property/delete/:featureId/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"building-feature-to-property",
										"delete",
										":featureId",
										":itemId"
									],
									"variable": [
										{
											"key": "featureId",
											"value": "zsm6fam0k05blkaeoit8x09a",
											"description": "(Required) "
										},
										{
											"key": "itemId",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "city",
			"item": [
				{
					"name": "/v1/city/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/v1/city/list - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/v1/city/list - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/v1/city/list - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"latitude\":{\"type\":\"string\"},\"longitude\":{\"type\":\"string\"},\"regionId\":{\"type\":\"string\",\"maxLength\":128},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"latitude\",\"longitude\",\"regionId\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/v1/city/list - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Toronto\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Ottawa\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Mississauga\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"regionId\",\n      \"kj3nrb5rv094v8ns5ptz1jhc\"\n    ]\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/city/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"city",
								"list"
							],
							"query": [
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "latitude-desc",
									"disabled": true
								},
								{
									"key": "cursor",
									"value": "abqdj6xe8puto1j83soz3bml",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with an array of city objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Toronto\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Ottawa\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Mississauga\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"regionId\",\n      \"kj3nrb5rv094v8ns5ptz1jhc\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/city/list?limit=10&orderBy=latitude-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"city",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "latitude-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"ad reprehenderit in sunt dolor\",\n      \"name\": \"sint nisi enim sunt\",\n      \"latitude\": \"do Lorem\",\n      \"longitude\": \"tempor dolor non\",\n      \"regionId\": \"occaecat sint magna\",\n      \"createdAt\": \"ad sunt dolor dolore Lorem\",\n      \"updatedAt\": \"tempor do elit\"\n    },\n    {\n      \"id\": \"ex irure\",\n      \"name\": \"Duis\",\n      \"latitude\": \"Lorem proident eu in\",\n      \"longitude\": \"ipsum nostrud Duis\",\n      \"regionId\": \"cillum\",\n      \"createdAt\": \"aute Excepteur\",\n      \"updatedAt\": \"mollit qui\"\n    }\n  ]\n}"
						},
						{
							"name": "Responds with a bad request error object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Toronto\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Ottawa\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Mississauga\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"regionId\",\n      \"kj3nrb5rv094v8ns5ptz1jhc\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/city/list?limit=10&orderBy=latitude-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"city",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "latitude-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Toronto\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Ottawa\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Mississauga\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"regionId\",\n      \"kj3nrb5rv094v8ns5ptz1jhc\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/city/list?limit=10&orderBy=latitude-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"city",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "latitude-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/city/create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/v1/city/create - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/v1/city/create - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/v1/city/create - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/v1/city/create - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Toronto\",\n  \"regionId\": \"kj3nrb5rv094v8ns5ptz1jhc\",\n  \"latitude\": \"43.741667\",\n  \"longitude\": \"-79.373333\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/city/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"city",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Toronto\",\n  \"regionId\": \"kj3nrb5rv094v8ns5ptz1jhc\",\n  \"latitude\": \"43.741667\",\n  \"longitude\": \"-79.373333\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/city/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"city",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"consectetur\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Toronto\",\n  \"regionId\": \"kj3nrb5rv094v8ns5ptz1jhc\",\n  \"latitude\": \"43.741667\",\n  \"longitude\": \"-79.373333\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/city/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"city",
										"create"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Toronto\",\n  \"regionId\": \"kj3nrb5rv094v8ns5ptz1jhc\",\n  \"latitude\": \"43.741667\",\n  \"longitude\": \"-79.373333\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/city/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"city",
										"create"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Toronto\",\n  \"regionId\": \"kj3nrb5rv094v8ns5ptz1jhc\",\n  \"latitude\": \"43.741667\",\n  \"longitude\": \"-79.373333\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/city/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"city",
										"create"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/city/update/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[PUT]::/v1/city/update/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[PUT]::/v1/city/update/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[PUT]::/v1/city/update/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[PUT]::/v1/city/update/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"latitude\": \"49.2827\",\n  \"longitude\": \"-123.1207\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/city/update/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"city",
								"update",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "dl7r7ezrt909p6bmct6avl9l",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with the id of the updated city.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"latitude\": \"49.2827\",\n  \"longitude\": \"-123.1207\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/city/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"city",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "dl7r7ezrt909p6bmct6avl9l",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"consectetur\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"latitude\": \"49.2827\",\n  \"longitude\": \"-123.1207\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/city/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"city",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "dl7r7ezrt909p6bmct6avl9l",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"latitude\": \"49.2827\",\n  \"longitude\": \"-123.1207\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/city/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"city",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "dl7r7ezrt909p6bmct6avl9l",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"latitude\": \"49.2827\",\n  \"longitude\": \"-123.1207\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/city/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"city",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "dl7r7ezrt909p6bmct6avl9l",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/city/delete/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[DELETE]::/v1/city/delete/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[DELETE]::/v1/city/delete/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[DELETE]::/v1/city/delete/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[DELETE]::/v1/city/delete/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/city/delete/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"city",
								"delete",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "dl7r7ezrt909p6bmct6avl9l",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/city/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"city",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "dl7r7ezrt909p6bmct6avl9l",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/city/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"city",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "dl7r7ezrt909p6bmct6avl9l",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/city/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"city",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "dl7r7ezrt909p6bmct6avl9l",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/city/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"city",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "dl7r7ezrt909p6bmct6avl9l",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a conflict error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/city/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"city",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "dl7r7ezrt909p6bmct6avl9l",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "community",
			"item": [
				{
					"name": "/v1/community/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[GET]::/v1/community/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[GET]::/v1/community/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[GET]::/v1/community/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"score\":{\"type\":[\"integer\",\"null\"]},\"imageUrl\":{\"type\":[\"string\",\"null\"]},\"quadrant\":{\"type\":[\"string\",\"null\"]},\"sector\":{\"type\":[\"string\",\"null\"]},\"ward\":{\"type\":[\"string\",\"null\"]},\"population\":{\"type\":[\"integer\",\"null\"]},\"dwellings\":{\"type\":[\"integer\",\"null\"]},\"usedForRenting\":{\"type\":[\"string\",\"null\"]},\"area\":{\"type\":[\"string\",\"null\"]},\"density\":{\"type\":[\"string\",\"null\"]},\"averageIncome\":{\"type\":[\"integer\",\"null\"]},\"lowIncome\":{\"type\":[\"string\",\"null\"]},\"immigrants\":{\"type\":[\"string\",\"null\"]},\"elevation\":{\"type\":[\"integer\",\"null\"]},\"established\":{\"type\":[\"integer\",\"null\"]},\"description\":{\"type\":[\"string\",\"null\"]},\"latitude\":{\"type\":\"string\"},\"longitude\":{\"type\":\"string\"},\"city\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]},\"communityFeatureToCommunity\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"communityFeature\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]}},\"required\":[\"communityFeature\"]}}},\"required\":[\"id\",\"name\",\"score\",\"imageUrl\",\"quadrant\",\"sector\",\"ward\",\"population\",\"dwellings\",\"usedForRenting\",\"area\",\"density\",\"averageIncome\",\"lowIncome\",\"immigrants\",\"elevation\",\"established\",\"description\",\"latitude\",\"longitude\",\"city\",\"communityFeatureToCommunity\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[GET]::/v1/community/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/community/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"community",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "icj3bimn4dg5v1yeu7i2frzq",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/community/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "icj3bimn4dg5v1yeu7i2frzq",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"velit ipsum\",\n    \"name\": \"velit enim non in\",\n    \"score\": -58537238,\n    \"imageUrl\": \"dolore aliquip aute pariatur Duis\",\n    \"quadrant\": \"anim proident pariatur\",\n    \"sector\": \"sunt\",\n    \"ward\": \"commodo minim\",\n    \"population\": -11765653,\n    \"dwellings\": -75468322,\n    \"usedForRenting\": \"cillum ipsum nost\",\n    \"area\": \"elit do quis enim\",\n    \"density\": \"consequat laborum eu\",\n    \"averageIncome\": -430474,\n    \"lowIncome\": \"incididunt quis ex \",\n    \"immigrants\": \"consequat ipsum cillum amet\",\n    \"elevation\": 78243087,\n    \"established\": 90747755,\n    \"description\": \"aute\",\n    \"latitude\": \"consequat pariatur quis Lorem fugiat\",\n    \"longitude\": \"dolore laboris commodo aliquip\",\n    \"city\": {\n      \"name\": \"nisi ex Excepteur Lorem velit\"\n    },\n    \"communityFeatureToCommunity\": [\n      {\n        \"communityFeature\": {\n          \"name\": \"in Duis minim qui dolore\"\n        }\n      },\n      {\n        \"communityFeature\": {\n          \"name\": \"elit cillum quis est\"\n        }\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/community/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "icj3bimn4dg5v1yeu7i2frzq",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/community/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "icj3bimn4dg5v1yeu7i2frzq",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/community/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/v1/community/list - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/v1/community/list - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/v1/community/list - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"score\":{\"type\":[\"number\",\"null\"]},\"imageUrl\":{\"type\":[\"string\",\"null\"],\"maxLength\":256},\"quadrant\":{\"type\":[\"string\",\"null\"],\"maxLength\":32},\"sector\":{\"type\":[\"string\",\"null\"],\"maxLength\":128},\"ward\":{\"type\":[\"string\",\"null\"],\"maxLength\":64},\"population\":{\"type\":[\"number\",\"null\"]},\"dwellings\":{\"type\":[\"number\",\"null\"]},\"usedForRenting\":{\"type\":[\"string\",\"null\"]},\"area\":{\"type\":[\"string\",\"null\"]},\"density\":{\"type\":[\"string\",\"null\"]},\"averageIncome\":{\"type\":[\"number\",\"null\"]},\"lowIncome\":{\"type\":[\"string\",\"null\"]},\"immigrants\":{\"type\":[\"string\",\"null\"]},\"elevation\":{\"type\":[\"number\",\"null\"]},\"established\":{\"type\":[\"number\",\"null\"]},\"description\":{\"type\":[\"string\",\"null\"]},\"latitude\":{\"type\":\"string\"},\"longitude\":{\"type\":\"string\"},\"cityId\":{\"type\":\"string\",\"maxLength\":128},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"score\",\"imageUrl\",\"quadrant\",\"sector\",\"ward\",\"population\",\"dwellings\",\"usedForRenting\",\"area\",\"density\",\"averageIncome\",\"lowIncome\",\"immigrants\",\"elevation\",\"established\",\"description\",\"latitude\",\"longitude\",\"cityId\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/v1/community/list - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Community name 1\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Community name 1\"\n        ]\n      ]\n    ],\n    [\n      \"gt\",\n      \"area\",\n      3\n    ],\n    [\n      \"lt\",\n      \"population\",\n      2000\n    ],\n    [\n      \"eq\",\n      \"quadrant\",\n      \"NW\"\n    ]\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/community/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"community",
								"list"
							],
							"query": [
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "score-desc",
									"disabled": true
								},
								{
									"key": "cursor",
									"value": "abqdj6xe8puto1j83soz3bml",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with an array of community objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Community name 1\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Community name 1\"\n        ]\n      ]\n    ],\n    [\n      \"gt\",\n      \"area\",\n      3\n    ],\n    [\n      \"lt\",\n      \"population\",\n      2000\n    ],\n    [\n      \"eq\",\n      \"quadrant\",\n      \"NW\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/community/list?limit=10&orderBy=score-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "score-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"Ut\",\n      \"name\": \"culpa proident velit\",\n      \"score\": -78761634.63566944,\n      \"imageUrl\": \"do aliquip reprehenderit labore enim\",\n      \"quadrant\": \"consequat minim occaecat\",\n      \"sector\": \"elit minim\",\n      \"ward\": \"in\",\n      \"population\": 65429100.033150345,\n      \"dwellings\": -81509696.6376211,\n      \"usedForRenting\": \"mag\",\n      \"area\": \"incididunt est\",\n      \"density\": \"exercitation tempor a\",\n      \"averageIncome\": -74795442.31288391,\n      \"lowIncome\": \"ad nisi\",\n      \"immigrants\": \"fugiat pariatur aute \",\n      \"elevation\": -55575222.0656617,\n      \"established\": 7286073.224468127,\n      \"description\": \"officia\",\n      \"latitude\": \"sit elit laboris laborum cillum\",\n      \"longitude\": \"voluptate i\",\n      \"cityId\": \"ea ut eiusmod\",\n      \"createdAt\": \"Ut minim ad ullamco dolor\",\n      \"updatedAt\": \"ullamco adipisicing laborum cupidatat\"\n    },\n    {\n      \"id\": \"adipisicing dolor\",\n      \"name\": \"tem\",\n      \"score\": -60722548.535511665,\n      \"imageUrl\": \"nisi sed consequat enim\",\n      \"quadrant\": \"nostrud nisi dolore\",\n      \"sector\": \"ut minim mollit eu officia\",\n      \"ward\": \"consequat c\",\n      \"population\": -77805018.45439395,\n      \"dwellings\": -56434042.847716495,\n      \"usedForRenting\": \"irure ad officia ea\",\n      \"area\": \"minim eiu\",\n      \"density\": \"ex dolor exercitation elit tempor\",\n      \"averageIncome\": -49671150.544913135,\n      \"lowIncome\": \"fugiat irure\",\n      \"immigrants\": \"enim incididunt in\",\n      \"elevation\": -88080822.43227035,\n      \"established\": 92291248.41535586,\n      \"description\": \"exercitation c\",\n      \"latitude\": \"elit esse incididunt sunt\",\n      \"longitude\": \"nostrud\",\n      \"cityId\": \"quis esse\",\n      \"createdAt\": \"eiusmod irure\",\n      \"updatedAt\": \"laborum sint Excepteur\"\n    }\n  ]\n}"
						},
						{
							"name": "Responds with a bad request error object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Community name 1\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Community name 1\"\n        ]\n      ]\n    ],\n    [\n      \"gt\",\n      \"area\",\n      3\n    ],\n    [\n      \"lt\",\n      \"population\",\n      2000\n    ],\n    [\n      \"eq\",\n      \"quadrant\",\n      \"NW\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/community/list?limit=10&orderBy=score-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "score-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Community name 1\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Community name 1\"\n        ]\n      ]\n    ],\n    [\n      \"gt\",\n      \"area\",\n      3\n    ],\n    [\n      \"lt\",\n      \"population\",\n      2000\n    ],\n    [\n      \"eq\",\n      \"quadrant\",\n      \"NW\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/community/list?limit=10&orderBy=score-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "score-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/community/create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/v1/community/create - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/v1/community/create - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/v1/community/create - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/v1/community/create - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Community name\",\n  \"cityId\": \"dl7r7ezrt909p6bmct6avl9l\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/community/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"community",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Community name\",\n  \"cityId\": \"dl7r7ezrt909p6bmct6avl9l\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/community/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"consectetur\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Community name\",\n  \"cityId\": \"dl7r7ezrt909p6bmct6avl9l\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/community/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community",
										"create"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Community name\",\n  \"cityId\": \"dl7r7ezrt909p6bmct6avl9l\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/community/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community",
										"create"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Community name\",\n  \"cityId\": \"dl7r7ezrt909p6bmct6avl9l\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/community/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community",
										"create"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/community/update/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[PUT]::/v1/community/update/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[PUT]::/v1/community/update/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[PUT]::/v1/community/update/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[PUT]::/v1/community/update/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\",\n  \"imageUrl\": \"https://example.com/image.jpg\",\n  \"quadrant\": \"NW\",\n  \"sector\": \"SE\",\n  \"ward\": \"Ward 1\",\n  \"population\": 1000,\n  \"dwellings\": 500,\n  \"usedForRenting\": 30.45,\n  \"area\": 3.2,\n  \"density\": 10.5,\n  \"averageIncome\": 50000\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/community/update/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"community",
								"update",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "icj3bimn4dg5v1yeu7i2frzq",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with the id of the updated community.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\",\n  \"imageUrl\": \"https://example.com/image.jpg\",\n  \"quadrant\": \"NW\",\n  \"sector\": \"SE\",\n  \"ward\": \"Ward 1\",\n  \"population\": 1000,\n  \"dwellings\": 500,\n  \"usedForRenting\": 30.45,\n  \"area\": 3.2,\n  \"density\": 10.5,\n  \"averageIncome\": 50000\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/community/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "icj3bimn4dg5v1yeu7i2frzq",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"consectetur\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\",\n  \"imageUrl\": \"https://example.com/image.jpg\",\n  \"quadrant\": \"NW\",\n  \"sector\": \"SE\",\n  \"ward\": \"Ward 1\",\n  \"population\": 1000,\n  \"dwellings\": 500,\n  \"usedForRenting\": 30.45,\n  \"area\": 3.2,\n  \"density\": 10.5,\n  \"averageIncome\": 50000\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/community/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "icj3bimn4dg5v1yeu7i2frzq",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\",\n  \"imageUrl\": \"https://example.com/image.jpg\",\n  \"quadrant\": \"NW\",\n  \"sector\": \"SE\",\n  \"ward\": \"Ward 1\",\n  \"population\": 1000,\n  \"dwellings\": 500,\n  \"usedForRenting\": 30.45,\n  \"area\": 3.2,\n  \"density\": 10.5,\n  \"averageIncome\": 50000\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/community/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "icj3bimn4dg5v1yeu7i2frzq",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\",\n  \"imageUrl\": \"https://example.com/image.jpg\",\n  \"quadrant\": \"NW\",\n  \"sector\": \"SE\",\n  \"ward\": \"Ward 1\",\n  \"population\": 1000,\n  \"dwellings\": 500,\n  \"usedForRenting\": 30.45,\n  \"area\": 3.2,\n  \"density\": 10.5,\n  \"averageIncome\": 50000\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/community/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "icj3bimn4dg5v1yeu7i2frzq",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/community/delete/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[DELETE]::/v1/community/delete/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[DELETE]::/v1/community/delete/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[DELETE]::/v1/community/delete/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[DELETE]::/v1/community/delete/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/community/delete/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"community",
								"delete",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "icj3bimn4dg5v1yeu7i2frzq",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/community/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "icj3bimn4dg5v1yeu7i2frzq",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/community/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "icj3bimn4dg5v1yeu7i2frzq",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/community/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "icj3bimn4dg5v1yeu7i2frzq",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/community/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "icj3bimn4dg5v1yeu7i2frzq",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a conflict error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/community/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "icj3bimn4dg5v1yeu7i2frzq",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "communityFeature",
			"item": [
				{
					"name": "/v1/community-feature/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/v1/community-feature/list - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/v1/community-feature/list - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/v1/community-feature/list - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"order\":{\"type\":\"number\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"order\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/v1/community-feature/list - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/community-feature/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"community-feature",
								"list"
							],
							"query": [
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "updatedAt-desc",
									"disabled": true
								},
								{
									"key": "cursor",
									"value": "abqdj6xe8puto1j83soz3bml",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with an array of communityFeature objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/community-feature/list?limit=10&orderBy=updatedAt-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community-feature",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "updatedAt-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"labore ea sit incididunt\",\n      \"name\": \"in consectetur anim\",\n      \"order\": -3894539.451474935,\n      \"createdAt\": \"Ut\",\n      \"updatedAt\": \"nisi do\"\n    },\n    {\n      \"id\": \"consectetur irure\",\n      \"name\": \"amet consectetur sit Duis\",\n      \"order\": -53883371.626426294,\n      \"createdAt\": \"dolor tempor Ut sint\",\n      \"updatedAt\": \"cillum Excepteur sed\"\n    }\n  ]\n}"
						},
						{
							"name": "Responds with a bad request error object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/community-feature/list?limit=10&orderBy=updatedAt-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community-feature",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "updatedAt-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/community-feature/list?limit=10&orderBy=updatedAt-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community-feature",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "updatedAt-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/community-feature/create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/v1/community-feature/create - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/v1/community-feature/create - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/v1/community-feature/create - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/v1/community-feature/create - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/community-feature/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"community-feature",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/community-feature/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community-feature",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"consectetur\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/community-feature/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community-feature",
										"create"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/community-feature/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community-feature",
										"create"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/community-feature/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community-feature",
										"create"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/community-feature/update/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[PUT]::/v1/community-feature/update/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[PUT]::/v1/community-feature/update/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[PUT]::/v1/community-feature/update/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[PUT]::/v1/community-feature/update/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"order\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/community-feature/update/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"community-feature",
								"update",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "cwswfax9454xpaxcym2la262",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with the id of the updated communityFeature.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/community-feature/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community-feature",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "cwswfax9454xpaxcym2la262",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"consectetur\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/community-feature/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community-feature",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "cwswfax9454xpaxcym2la262",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/community-feature/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community-feature",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "cwswfax9454xpaxcym2la262",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/community-feature/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community-feature",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "cwswfax9454xpaxcym2la262",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/community-feature/delete/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[DELETE]::/v1/community-feature/delete/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[DELETE]::/v1/community-feature/delete/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[DELETE]::/v1/community-feature/delete/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[DELETE]::/v1/community-feature/delete/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/community-feature/delete/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"community-feature",
								"delete",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "cwswfax9454xpaxcym2la262",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/community-feature/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community-feature",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "cwswfax9454xpaxcym2la262",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/community-feature/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community-feature",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "cwswfax9454xpaxcym2la262",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/community-feature/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community-feature",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "cwswfax9454xpaxcym2la262",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/community-feature/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community-feature",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "cwswfax9454xpaxcym2la262",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a conflict error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/community-feature/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community-feature",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "cwswfax9454xpaxcym2la262",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "communityFeatureToCommunity",
			"item": [
				{
					"name": "/v1/community-feature-to-community/features-by-item/:itemId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[GET]::/v1/community-feature-to-community/features-by-item/:itemId - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[GET]::/v1/community-feature-to-community/features-by-item/:itemId - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[GET]::/v1/community-feature-to-community/features-by-item/:itemId - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"communityFeatureId\":{\"type\":\"string\"},\"communityFeature\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]}},\"required\":[\"communityFeatureId\",\"communityFeature\"]}}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[GET]::/v1/community-feature-to-community/features-by-item/:itemId - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/community-feature-to-community/features-by-item/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"community-feature-to-community",
								"features-by-item",
								":itemId"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "icj3bimn4dg5v1yeu7i2frzq",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/community-feature-to-community/features-by-item/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community-feature-to-community",
										"features-by-item",
										":itemId"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "icj3bimn4dg5v1yeu7i2frzq",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"communityFeatureId\": \"sed anim\",\n      \"communityFeature\": {\n        \"name\": \"ex\"\n      }\n    },\n    {\n      \"communityFeatureId\": \"enim in\",\n      \"communityFeature\": {\n        \"name\": \"sint quis est\"\n      }\n    }\n  ]\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/community-feature-to-community/features-by-item/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community-feature-to-community",
										"features-by-item",
										":itemId"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "icj3bimn4dg5v1yeu7i2frzq",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/community-feature-to-community/features-by-item/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community-feature-to-community",
										"features-by-item",
										":itemId"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "icj3bimn4dg5v1yeu7i2frzq",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/community-feature-to-community/create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/v1/community-feature-to-community/create - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/v1/community-feature-to-community/create - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/v1/community-feature-to-community/create - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/v1/community-feature-to-community/create - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"featureId\": \"cwswfax9454xpaxcym2la262\",\n  \"itemId\": \"icj3bimn4dg5v1yeu7i2frzq\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/community-feature-to-community/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"community-feature-to-community",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"featureId\": \"cwswfax9454xpaxcym2la262\",\n  \"itemId\": \"icj3bimn4dg5v1yeu7i2frzq\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/community-feature-to-community/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community-feature-to-community",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"featureId\": \"cwswfax9454xpaxcym2la262\",\n  \"itemId\": \"icj3bimn4dg5v1yeu7i2frzq\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/community-feature-to-community/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community-feature-to-community",
										"create"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"featureId\": \"cwswfax9454xpaxcym2la262\",\n  \"itemId\": \"icj3bimn4dg5v1yeu7i2frzq\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/community-feature-to-community/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community-feature-to-community",
										"create"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"featureId\": \"cwswfax9454xpaxcym2la262\",\n  \"itemId\": \"icj3bimn4dg5v1yeu7i2frzq\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/community-feature-to-community/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community-feature-to-community",
										"create"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/community-feature-to-community/delete/:featureId/:itemId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[DELETE]::/v1/community-feature-to-community/delete/:featureId/:itemId - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[DELETE]::/v1/community-feature-to-community/delete/:featureId/:itemId - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[DELETE]::/v1/community-feature-to-community/delete/:featureId/:itemId - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[DELETE]::/v1/community-feature-to-community/delete/:featureId/:itemId - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/community-feature-to-community/delete/:featureId/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"community-feature-to-community",
								"delete",
								":featureId",
								":itemId"
							],
							"variable": [
								{
									"key": "featureId",
									"value": "cwswfax9454xpaxcym2la262",
									"description": "(Required) "
								},
								{
									"key": "itemId",
									"value": "icj3bimn4dg5v1yeu7i2frzq",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/community-feature-to-community/delete/:featureId/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community-feature-to-community",
										"delete",
										":featureId",
										":itemId"
									],
									"variable": [
										{
											"key": "featureId",
											"value": "cwswfax9454xpaxcym2la262",
											"description": "(Required) "
										},
										{
											"key": "itemId",
											"value": "icj3bimn4dg5v1yeu7i2frzq",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/community-feature-to-community/delete/:featureId/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community-feature-to-community",
										"delete",
										":featureId",
										":itemId"
									],
									"variable": [
										{
											"key": "featureId",
											"value": "cwswfax9454xpaxcym2la262",
											"description": "(Required) "
										},
										{
											"key": "itemId",
											"value": "icj3bimn4dg5v1yeu7i2frzq",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/community-feature-to-community/delete/:featureId/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community-feature-to-community",
										"delete",
										":featureId",
										":itemId"
									],
									"variable": [
										{
											"key": "featureId",
											"value": "cwswfax9454xpaxcym2la262",
											"description": "(Required) "
										},
										{
											"key": "itemId",
											"value": "icj3bimn4dg5v1yeu7i2frzq",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/community-feature-to-community/delete/:featureId/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"community-feature-to-community",
										"delete",
										":featureId",
										":itemId"
									],
									"variable": [
										{
											"key": "featureId",
											"value": "cwswfax9454xpaxcym2la262",
											"description": "(Required) "
										},
										{
											"key": "itemId",
											"value": "icj3bimn4dg5v1yeu7i2frzq",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "feature",
			"item": [
				{
					"name": "/v1/feature/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/v1/feature/list - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/v1/feature/list - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/v1/feature/list - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"order\":{\"type\":\"number\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"order\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/v1/feature/list - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/feature/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"feature",
								"list"
							],
							"query": [
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "updatedAt-desc",
									"disabled": true
								},
								{
									"key": "cursor",
									"value": "abqdj6xe8puto1j83soz3bml",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with an array of feature objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/feature/list?limit=10&orderBy=updatedAt-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"feature",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "updatedAt-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"labore ea sit incididunt\",\n      \"name\": \"in consectetur anim\",\n      \"order\": -3894539.451474935,\n      \"createdAt\": \"Ut\",\n      \"updatedAt\": \"nisi do\"\n    },\n    {\n      \"id\": \"consectetur irure\",\n      \"name\": \"amet consectetur sit Duis\",\n      \"order\": -53883371.626426294,\n      \"createdAt\": \"dolor tempor Ut sint\",\n      \"updatedAt\": \"cillum Excepteur sed\"\n    }\n  ]\n}"
						},
						{
							"name": "Responds with a bad request error object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/feature/list?limit=10&orderBy=updatedAt-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"feature",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "updatedAt-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/feature/list?limit=10&orderBy=updatedAt-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"feature",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "updatedAt-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/feature/create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/v1/feature/create - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/v1/feature/create - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/v1/feature/create - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/v1/feature/create - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/feature/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"feature",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/feature/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"feature",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"consectetur\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/feature/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"feature",
										"create"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/feature/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"feature",
										"create"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/feature/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"feature",
										"create"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/feature/update/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[PUT]::/v1/feature/update/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[PUT]::/v1/feature/update/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[PUT]::/v1/feature/update/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[PUT]::/v1/feature/update/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"order\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/feature/update/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"feature",
								"update",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "i53gzgu35snbfwuc94hsivb3",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with the id of the updated feature.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/feature/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"feature",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "i53gzgu35snbfwuc94hsivb3",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"consectetur\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/feature/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"feature",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "i53gzgu35snbfwuc94hsivb3",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/feature/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"feature",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "i53gzgu35snbfwuc94hsivb3",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/feature/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"feature",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "i53gzgu35snbfwuc94hsivb3",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/feature/delete/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[DELETE]::/v1/feature/delete/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[DELETE]::/v1/feature/delete/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[DELETE]::/v1/feature/delete/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[DELETE]::/v1/feature/delete/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/feature/delete/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"feature",
								"delete",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "i53gzgu35snbfwuc94hsivb3",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/feature/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"feature",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "i53gzgu35snbfwuc94hsivb3",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/feature/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"feature",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "i53gzgu35snbfwuc94hsivb3",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/feature/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"feature",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "i53gzgu35snbfwuc94hsivb3",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/feature/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"feature",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "i53gzgu35snbfwuc94hsivb3",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a conflict error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/feature/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"feature",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "i53gzgu35snbfwuc94hsivb3",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "featureToProperty",
			"item": [
				{
					"name": "/v1/feature-to-property/features-by-item/:itemId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[GET]::/v1/feature-to-property/features-by-item/:itemId - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[GET]::/v1/feature-to-property/features-by-item/:itemId - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[GET]::/v1/feature-to-property/features-by-item/:itemId - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"featureId\":{\"type\":\"string\"},\"feature\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]}},\"required\":[\"featureId\",\"feature\"]}}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[GET]::/v1/feature-to-property/features-by-item/:itemId - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/feature-to-property/features-by-item/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"feature-to-property",
								"features-by-item",
								":itemId"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "hdsyi7gw3n77jrngcck1x33y",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/feature-to-property/features-by-item/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"feature-to-property",
										"features-by-item",
										":itemId"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"featureId\": \"cupidatat tempor v\",\n      \"feature\": {\n        \"name\": \"incididunt elit tempor\"\n      }\n    },\n    {\n      \"featureId\": \"aliquip in sunt reprehenderit\",\n      \"feature\": {\n        \"name\": \"aliqua adipisicing quis\"\n      }\n    }\n  ]\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/feature-to-property/features-by-item/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"feature-to-property",
										"features-by-item",
										":itemId"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/feature-to-property/features-by-item/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"feature-to-property",
										"features-by-item",
										":itemId"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/feature-to-property/create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/v1/feature-to-property/create - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/v1/feature-to-property/create - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/v1/feature-to-property/create - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/v1/feature-to-property/create - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"featureId\": \"i53gzgu35snbfwuc94hsivb3\",\n  \"itemId\": \"hdsyi7gw3n77jrngcck1x33y\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/feature-to-property/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"feature-to-property",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"featureId\": \"i53gzgu35snbfwuc94hsivb3\",\n  \"itemId\": \"hdsyi7gw3n77jrngcck1x33y\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/feature-to-property/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"feature-to-property",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"featureId\": \"i53gzgu35snbfwuc94hsivb3\",\n  \"itemId\": \"hdsyi7gw3n77jrngcck1x33y\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/feature-to-property/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"feature-to-property",
										"create"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"featureId\": \"i53gzgu35snbfwuc94hsivb3\",\n  \"itemId\": \"hdsyi7gw3n77jrngcck1x33y\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/feature-to-property/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"feature-to-property",
										"create"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"featureId\": \"i53gzgu35snbfwuc94hsivb3\",\n  \"itemId\": \"hdsyi7gw3n77jrngcck1x33y\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/feature-to-property/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"feature-to-property",
										"create"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/feature-to-property/delete/:featureId/:itemId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[DELETE]::/v1/feature-to-property/delete/:featureId/:itemId - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[DELETE]::/v1/feature-to-property/delete/:featureId/:itemId - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[DELETE]::/v1/feature-to-property/delete/:featureId/:itemId - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[DELETE]::/v1/feature-to-property/delete/:featureId/:itemId - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/feature-to-property/delete/:featureId/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"feature-to-property",
								"delete",
								":featureId",
								":itemId"
							],
							"variable": [
								{
									"key": "featureId",
									"value": "i53gzgu35snbfwuc94hsivb3",
									"description": "(Required) "
								},
								{
									"key": "itemId",
									"value": "hdsyi7gw3n77jrngcck1x33y",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/feature-to-property/delete/:featureId/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"feature-to-property",
										"delete",
										":featureId",
										":itemId"
									],
									"variable": [
										{
											"key": "featureId",
											"value": "i53gzgu35snbfwuc94hsivb3",
											"description": "(Required) "
										},
										{
											"key": "itemId",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/feature-to-property/delete/:featureId/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"feature-to-property",
										"delete",
										":featureId",
										":itemId"
									],
									"variable": [
										{
											"key": "featureId",
											"value": "i53gzgu35snbfwuc94hsivb3",
											"description": "(Required) "
										},
										{
											"key": "itemId",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/feature-to-property/delete/:featureId/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"feature-to-property",
										"delete",
										":featureId",
										":itemId"
									],
									"variable": [
										{
											"key": "featureId",
											"value": "i53gzgu35snbfwuc94hsivb3",
											"description": "(Required) "
										},
										{
											"key": "itemId",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/feature-to-property/delete/:featureId/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"feature-to-property",
										"delete",
										":featureId",
										":itemId"
									],
									"variable": [
										{
											"key": "featureId",
											"value": "i53gzgu35snbfwuc94hsivb3",
											"description": "(Required) "
										},
										{
											"key": "itemId",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "floorPlan",
			"item": [
				{
					"name": "/v1/floor-plan/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/v1/floor-plan/list - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/v1/floor-plan/list - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/v1/floor-plan/list - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"propertyId\":{\"type\":\"string\",\"maxLength\":128},\"order\":{\"type\":\"number\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"propertyId\",\"order\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/v1/floor-plan/list - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Floor Plan 1\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Floor Plan 2\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"propertyId\",\n      \"hdsyi7gw3n77jrngcck1x33y\"\n    ]\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/floor-plan/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"floor-plan",
								"list"
							],
							"query": [
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "id-desc",
									"disabled": true
								},
								{
									"key": "cursor",
									"value": "abqdj6xe8puto1j83soz3bml",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with an array of floorPlan objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Floor Plan 1\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Floor Plan 2\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"propertyId\",\n      \"hdsyi7gw3n77jrngcck1x33y\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/floor-plan/list?limit=10&orderBy=id-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"floor-plan",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "id-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"velit tempor sunt nulla\",\n      \"name\": \"do in in\",\n      \"propertyId\": \"ipsum dolor exer\",\n      \"order\": -48044694.62502547,\n      \"createdAt\": \"aute adipisicing sunt reprehenderit ut\",\n      \"updatedAt\": \"ipsum tempor Duis cillum\"\n    },\n    {\n      \"id\": \"eu Duis\",\n      \"name\": \"eiusmod in ad\",\n      \"propertyId\": \"irure sint\",\n      \"order\": 44968810.76397562,\n      \"createdAt\": \"voluptate adipisicing non et\",\n      \"updatedAt\": \"sunt ut velit\"\n    }\n  ]\n}"
						},
						{
							"name": "Responds with a bad request error object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Floor Plan 1\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Floor Plan 2\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"propertyId\",\n      \"hdsyi7gw3n77jrngcck1x33y\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/floor-plan/list?limit=10&orderBy=id-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"floor-plan",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "id-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Floor Plan 1\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Floor Plan 2\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"propertyId\",\n      \"hdsyi7gw3n77jrngcck1x33y\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/floor-plan/list?limit=10&orderBy=id-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"floor-plan",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "id-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/floor-plan/create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/v1/floor-plan/create - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/v1/floor-plan/create - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/v1/floor-plan/create - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/v1/floor-plan/create - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Floor Plan 1\",\n  \"propertyId\": \"hdsyi7gw3n77jrngcck1x33y\",\n  \"order\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/floor-plan/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"floor-plan",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Floor Plan 1\",\n  \"propertyId\": \"hdsyi7gw3n77jrngcck1x33y\",\n  \"order\": 0\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/floor-plan/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"floor-plan",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"consectetur\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Floor Plan 1\",\n  \"propertyId\": \"hdsyi7gw3n77jrngcck1x33y\",\n  \"order\": 0\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/floor-plan/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"floor-plan",
										"create"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Floor Plan 1\",\n  \"propertyId\": \"hdsyi7gw3n77jrngcck1x33y\",\n  \"order\": 0\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/floor-plan/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"floor-plan",
										"create"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Floor Plan 1\",\n  \"propertyId\": \"hdsyi7gw3n77jrngcck1x33y\",\n  \"order\": 0\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/floor-plan/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"floor-plan",
										"create"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/floor-plan/update/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[PUT]::/v1/floor-plan/update/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[PUT]::/v1/floor-plan/update/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[PUT]::/v1/floor-plan/update/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[PUT]::/v1/floor-plan/update/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Floor Plan 2\",\n  \"order\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/floor-plan/update/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"floor-plan",
								"update",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "fe897wto8ribvu9024zvfvxp",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with the id of the updated floorPlan.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Floor Plan 2\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/floor-plan/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"floor-plan",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "fe897wto8ribvu9024zvfvxp",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"consectetur\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Floor Plan 2\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/floor-plan/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"floor-plan",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "fe897wto8ribvu9024zvfvxp",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Floor Plan 2\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/floor-plan/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"floor-plan",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "fe897wto8ribvu9024zvfvxp",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Floor Plan 2\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/floor-plan/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"floor-plan",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "fe897wto8ribvu9024zvfvxp",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/floor-plan/delete/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[DELETE]::/v1/floor-plan/delete/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[DELETE]::/v1/floor-plan/delete/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[DELETE]::/v1/floor-plan/delete/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[DELETE]::/v1/floor-plan/delete/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/floor-plan/delete/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"floor-plan",
								"delete",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "fe897wto8ribvu9024zvfvxp",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/floor-plan/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"floor-plan",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "fe897wto8ribvu9024zvfvxp",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/floor-plan/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"floor-plan",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "fe897wto8ribvu9024zvfvxp",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/floor-plan/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"floor-plan",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "fe897wto8ribvu9024zvfvxp",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/floor-plan/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"floor-plan",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "fe897wto8ribvu9024zvfvxp",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a conflict error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/floor-plan/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"floor-plan",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "fe897wto8ribvu9024zvfvxp",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "media",
			"item": [
				{
					"name": "/v1/media/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/v1/media/list - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/v1/media/list - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/v1/media/list - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"assetId\":{\"type\":\"string\",\"maxLength\":256},\"mediaTypeId\":{\"type\":\"string\",\"maxLength\":128},\"propertyId\":{\"type\":\"string\",\"maxLength\":128},\"order\":{\"type\":\"number\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"assetId\",\"mediaTypeId\",\"propertyId\",\"order\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/v1/media/list - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"assetId\",\n          \"a344xpp1\"\n        ],\n        [\n          \"eq\",\n          \"assetId\",\n          \"a344xpp2\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"mediaTypeId\",\n      \"kaeu5o03h4ihq1zoxzb19l92\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-23T00:00:00.000Z\",\n      \"2024-02-12T00:00:00.000Z\"\n    ]\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/media/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"media",
								"list"
							],
							"query": [
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "propertyId-asc",
									"disabled": true
								},
								{
									"key": "cursor",
									"value": "abqdj6xe8puto1j83soz3bml",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with an array of media objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"assetId\",\n          \"a344xpp1\"\n        ],\n        [\n          \"eq\",\n          \"assetId\",\n          \"a344xpp2\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"mediaTypeId\",\n      \"kaeu5o03h4ihq1zoxzb19l92\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-23T00:00:00.000Z\",\n      \"2024-02-12T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/media/list?limit=10&orderBy=propertyId-asc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"media",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "propertyId-asc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"ipsum incididunt deserunt aliquip ut\",\n      \"assetId\": \"ea adipisicing in aliq\",\n      \"mediaTypeId\": \"nostrud ipsum ex\",\n      \"propertyId\": \"do\",\n      \"order\": -64405467.477677144,\n      \"createdAt\": \"enim\",\n      \"updatedAt\": \"consectetur enim\"\n    },\n    {\n      \"id\": \"eiusmod sed\",\n      \"assetId\": \"exerc\",\n      \"mediaTypeId\": \"enim voluptate do quis veniam\",\n      \"propertyId\": \"nisi consectet\",\n      \"order\": 21972950.892332837,\n      \"createdAt\": \"ut sunt cupidatat consectetur\",\n      \"updatedAt\": \"aute\"\n    }\n  ]\n}"
						},
						{
							"name": "Responds with a bad request error object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"assetId\",\n          \"a344xpp1\"\n        ],\n        [\n          \"eq\",\n          \"assetId\",\n          \"a344xpp2\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"mediaTypeId\",\n      \"kaeu5o03h4ihq1zoxzb19l92\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-23T00:00:00.000Z\",\n      \"2024-02-12T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/media/list?limit=10&orderBy=propertyId-asc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"media",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "propertyId-asc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"assetId\",\n          \"a344xpp1\"\n        ],\n        [\n          \"eq\",\n          \"assetId\",\n          \"a344xpp2\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"mediaTypeId\",\n      \"kaeu5o03h4ihq1zoxzb19l92\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-23T00:00:00.000Z\",\n      \"2024-02-12T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/media/list?limit=10&orderBy=propertyId-asc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"media",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "propertyId-asc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/media/create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/v1/media/create - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/v1/media/create - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/v1/media/create - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/v1/media/create - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"assetId\": \"a344xpp1\",\n  \"mediaTypeId\": \"kaeu5o03h4ihq1zoxzb19l92\",\n  \"propertyId\": \"hdsyi7gw3n77jrngcck1x33y\",\n  \"order\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/media/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"media",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"assetId\": \"a344xpp1\",\n  \"mediaTypeId\": \"kaeu5o03h4ihq1zoxzb19l92\",\n  \"propertyId\": \"hdsyi7gw3n77jrngcck1x33y\",\n  \"order\": 0\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/media/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"media",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"consectetur\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"assetId\": \"a344xpp1\",\n  \"mediaTypeId\": \"kaeu5o03h4ihq1zoxzb19l92\",\n  \"propertyId\": \"hdsyi7gw3n77jrngcck1x33y\",\n  \"order\": 0\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/media/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"media",
										"create"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"assetId\": \"a344xpp1\",\n  \"mediaTypeId\": \"kaeu5o03h4ihq1zoxzb19l92\",\n  \"propertyId\": \"hdsyi7gw3n77jrngcck1x33y\",\n  \"order\": 0\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/media/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"media",
										"create"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"assetId\": \"a344xpp1\",\n  \"mediaTypeId\": \"kaeu5o03h4ihq1zoxzb19l92\",\n  \"propertyId\": \"hdsyi7gw3n77jrngcck1x33y\",\n  \"order\": 0\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/media/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"media",
										"create"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/media/update/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[PUT]::/v1/media/update/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[PUT]::/v1/media/update/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[PUT]::/v1/media/update/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[PUT]::/v1/media/update/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"order\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/media/update/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"media",
								"update",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "h8e874h63772amg892ajzbo6",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with the id of the updated media.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/media/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"media",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "h8e874h63772amg892ajzbo6",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"consectetur\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/media/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"media",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "h8e874h63772amg892ajzbo6",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/media/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"media",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "h8e874h63772amg892ajzbo6",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/media/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"media",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "h8e874h63772amg892ajzbo6",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/media/delete/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[DELETE]::/v1/media/delete/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[DELETE]::/v1/media/delete/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[DELETE]::/v1/media/delete/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[DELETE]::/v1/media/delete/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/media/delete/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"media",
								"delete",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "h8e874h63772amg892ajzbo6",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/media/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"media",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "h8e874h63772amg892ajzbo6",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/media/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"media",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "h8e874h63772amg892ajzbo6",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/media/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"media",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "h8e874h63772amg892ajzbo6",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/media/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"media",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "h8e874h63772amg892ajzbo6",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a conflict error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/media/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"media",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "h8e874h63772amg892ajzbo6",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "mediaType",
			"item": [
				{
					"name": "/v1/media-type/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/v1/media-type/list - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/v1/media-type/list - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/v1/media-type/list - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/v1/media-type/list - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"video\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"image\"\n        ]\n      ]\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-23T00:00:00.000Z\",\n      \"2024-02-12T00:00:00.000Z\"\n    ]\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/media-type/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"media-type",
								"list"
							],
							"query": [
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "updatedAt-desc",
									"disabled": true
								},
								{
									"key": "cursor",
									"value": "abqdj6xe8puto1j83soz3bml",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with an array of mediaType objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"video\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"image\"\n        ]\n      ]\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-23T00:00:00.000Z\",\n      \"2024-02-12T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/media-type/list?limit=10&orderBy=updatedAt-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"media-type",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "updatedAt-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"voluptate laborum\",\n      \"name\": \"elit est Excepteur non et\",\n      \"createdAt\": \"qui nisi consequat aliqua\",\n      \"updatedAt\": \"velit exercitation\"\n    },\n    {\n      \"id\": \"aute ipsum\",\n      \"name\": \"anim qui laborum Excepteur ullamco\",\n      \"createdAt\": \"labo\",\n      \"updatedAt\": \"est in\"\n    }\n  ]\n}"
						},
						{
							"name": "Responds with a bad request error object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"video\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"image\"\n        ]\n      ]\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-23T00:00:00.000Z\",\n      \"2024-02-12T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/media-type/list?limit=10&orderBy=updatedAt-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"media-type",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "updatedAt-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"video\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"image\"\n        ]\n      ]\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-23T00:00:00.000Z\",\n      \"2024-02-12T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/media-type/list?limit=10&orderBy=updatedAt-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"media-type",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "updatedAt-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/media-type/create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/v1/media-type/create - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/v1/media-type/create - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/v1/media-type/create - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/v1/media-type/create - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"postman test media type\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/media-type/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"media-type",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"postman test media type\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/media-type/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"media-type",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"consectetur\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"postman test media type\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/media-type/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"media-type",
										"create"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"postman test media type\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/media-type/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"media-type",
										"create"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"postman test media type\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/media-type/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"media-type",
										"create"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/media-type/update/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[PUT]::/v1/media-type/update/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[PUT]::/v1/media-type/update/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[PUT]::/v1/media-type/update/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[PUT]::/v1/media-type/update/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"postman test media type update\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/media-type/update/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"media-type",
								"update",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "kaeu5o03h4ihq1zoxzb19l92",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with the id of the updated mediaType.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"postman test media type update\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/media-type/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"media-type",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "kaeu5o03h4ihq1zoxzb19l92",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"consectetur\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"postman test media type update\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/media-type/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"media-type",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "kaeu5o03h4ihq1zoxzb19l92",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"postman test media type update\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/media-type/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"media-type",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "kaeu5o03h4ihq1zoxzb19l92",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"postman test media type update\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/media-type/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"media-type",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "kaeu5o03h4ihq1zoxzb19l92",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/media-type/delete/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[DELETE]::/v1/media-type/delete/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[DELETE]::/v1/media-type/delete/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[DELETE]::/v1/media-type/delete/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[DELETE]::/v1/media-type/delete/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/media-type/delete/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"media-type",
								"delete",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "kaeu5o03h4ihq1zoxzb19l92",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/media-type/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"media-type",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "kaeu5o03h4ihq1zoxzb19l92",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/media-type/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"media-type",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "kaeu5o03h4ihq1zoxzb19l92",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/media-type/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"media-type",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "kaeu5o03h4ihq1zoxzb19l92",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/media-type/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"media-type",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "kaeu5o03h4ihq1zoxzb19l92",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a conflict error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/media-type/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"media-type",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "kaeu5o03h4ihq1zoxzb19l92",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "parking",
			"item": [
				{
					"name": "/v1/parking/parkings-by-property/:itemId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[GET]::/v1/parking/parkings-by-property/:itemId - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[GET]::/v1/parking/parkings-by-property/:itemId - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[GET]::/v1/parking/parkings-by-property/:itemId - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"fee\":{\"type\":[\"integer\",\"null\"]},\"feeInterval\":{\"type\":[\"string\",\"null\"]},\"order\":{\"type\":\"integer\"}},\"required\":[\"id\",\"name\",\"fee\",\"feeInterval\",\"order\"]}}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[GET]::/v1/parking/parkings-by-property/:itemId - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/parking/parkings-by-property/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"parking",
								"parkings-by-property",
								":itemId"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "hdsyi7gw3n77jrngcck1x33y",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/parking/parkings-by-property/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"parking",
										"parkings-by-property",
										":itemId"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"enim dolor dolore consequat\",\n      \"name\": \"id\",\n      \"fee\": -43488463,\n      \"feeInterval\": \"Duis velit sint\",\n      \"order\": -80007205\n    },\n    {\n      \"id\": \"aliqua amet est ullamco dolore\",\n      \"name\": \"anim amet esse\",\n      \"fee\": -39340069,\n      \"feeInterval\": \"ut occaecat ipsum esse sed\",\n      \"order\": 63652447\n    }\n  ]\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/parking/parkings-by-property/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"parking",
										"parkings-by-property",
										":itemId"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/parking/parkings-by-property/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"parking",
										"parkings-by-property",
										":itemId"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/parking/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/v1/parking/list - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/v1/parking/list - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/v1/parking/list - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"propertyId\":{\"type\":\"string\",\"maxLength\":128},\"fee\":{\"type\":[\"number\",\"null\"]},\"feeInterval\":{\"type\":[\"string\",\"null\"],\"maxLength\":128},\"order\":{\"type\":\"number\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"propertyId\",\"fee\",\"feeInterval\",\"order\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/v1/parking/list - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Outdoor\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Covered\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"eq\",\n      \"fee\",\n      100\n    ],\n    [\n      \"eq\",\n      \"feeInterval\",\n      \"monthly\"\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/parking/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"parking",
								"list"
							],
							"query": [
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "name-desc",
									"disabled": true
								},
								{
									"key": "cursor",
									"value": "abqdj6xe8puto1j83soz3bml",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with an array of parking objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Outdoor\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Covered\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"eq\",\n      \"fee\",\n      100\n    ],\n    [\n      \"eq\",\n      \"feeInterval\",\n      \"monthly\"\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/parking/list?limit=10&orderBy=name-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"parking",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "name-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"minim nostrud\",\n      \"name\": \"aliquip incididunt\",\n      \"propertyId\": \"esse reprehen\",\n      \"fee\": -17701696.94873056,\n      \"feeInterval\": \"laboris est qui\",\n      \"order\": -10360327.006888777,\n      \"createdAt\": \"dol\",\n      \"updatedAt\": \"laboris labore Duis\"\n    },\n    {\n      \"id\": \"anim ullamco\",\n      \"name\": \"Excepteur ex anim\",\n      \"propertyId\": \"in ad\",\n      \"fee\": 48061696.06413576,\n      \"feeInterval\": \"magna vo\",\n      \"order\": 70968132.41675329,\n      \"createdAt\": \"id ea amet\",\n      \"updatedAt\": \"in id nostrud reprehenderit\"\n    }\n  ]\n}"
						},
						{
							"name": "Responds with a bad request error object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Outdoor\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Covered\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"eq\",\n      \"fee\",\n      100\n    ],\n    [\n      \"eq\",\n      \"feeInterval\",\n      \"monthly\"\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/parking/list?limit=10&orderBy=name-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"parking",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "name-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Outdoor\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Covered\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"eq\",\n      \"fee\",\n      100\n    ],\n    [\n      \"eq\",\n      \"feeInterval\",\n      \"monthly\"\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/parking/list?limit=10&orderBy=name-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"parking",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "name-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/parking/create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/v1/parking/create - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/v1/parking/create - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/v1/parking/create - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/v1/parking/create - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Covered\",\n  \"propertyId\": \"hdsyi7gw3n77jrngcck1x33y\",\n  \"fee\": 100,\n  \"feeInterval\": \"monthly\",\n  \"order\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/parking/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"parking",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Covered\",\n  \"propertyId\": \"hdsyi7gw3n77jrngcck1x33y\",\n  \"fee\": 100,\n  \"feeInterval\": \"monthly\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/parking/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"parking",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"consectetur\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Covered\",\n  \"propertyId\": \"hdsyi7gw3n77jrngcck1x33y\",\n  \"fee\": 100,\n  \"feeInterval\": \"monthly\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/parking/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"parking",
										"create"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Covered\",\n  \"propertyId\": \"hdsyi7gw3n77jrngcck1x33y\",\n  \"fee\": 100,\n  \"feeInterval\": \"monthly\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/parking/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"parking",
										"create"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Covered\",\n  \"propertyId\": \"hdsyi7gw3n77jrngcck1x33y\",\n  \"fee\": 100,\n  \"feeInterval\": \"monthly\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/parking/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"parking",
										"create"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/parking/update/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[PUT]::/v1/parking/update/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[PUT]::/v1/parking/update/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[PUT]::/v1/parking/update/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[PUT]::/v1/parking/update/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Covered\",\n  \"fee\": 100,\n  \"feeInterval\": \"monthly\",\n  \"order\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/parking/update/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"parking",
								"update",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "wowhdybituf34cr8im31nr4s",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with the id of the updated parking.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Covered\",\n  \"fee\": 100,\n  \"feeInterval\": \"monthly\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/parking/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"parking",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "wowhdybituf34cr8im31nr4s",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"consectetur\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Covered\",\n  \"fee\": 100,\n  \"feeInterval\": \"monthly\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/parking/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"parking",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "wowhdybituf34cr8im31nr4s",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Covered\",\n  \"fee\": 100,\n  \"feeInterval\": \"monthly\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/parking/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"parking",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "wowhdybituf34cr8im31nr4s",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Covered\",\n  \"fee\": 100,\n  \"feeInterval\": \"monthly\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/parking/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"parking",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "wowhdybituf34cr8im31nr4s",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/parking/delete/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[DELETE]::/v1/parking/delete/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[DELETE]::/v1/parking/delete/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[DELETE]::/v1/parking/delete/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[DELETE]::/v1/parking/delete/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/parking/delete/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"parking",
								"delete",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "wowhdybituf34cr8im31nr4s",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/parking/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"parking",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "wowhdybituf34cr8im31nr4s",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/parking/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"parking",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "wowhdybituf34cr8im31nr4s",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/parking/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"parking",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "wowhdybituf34cr8im31nr4s",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/parking/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"parking",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "wowhdybituf34cr8im31nr4s",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a conflict error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/parking/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"parking",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "wowhdybituf34cr8im31nr4s",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "property",
			"item": [
				{
					"name": "/v1/property/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[GET]::/v1/property/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[GET]::/v1/property/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[GET]::/v1/property/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"listingId\":{\"type\":\"number\"},\"name\":{\"type\":\"string\"},\"address\":{\"type\":\"string\"},\"latitude\":{\"type\":\"string\"},\"longitude\":{\"type\":\"string\"},\"yearBuilt\":{\"type\":[\"integer\",\"null\"]},\"descriptionTitle\":{\"type\":[\"string\",\"null\"]},\"descriptionSubtitle\":{\"type\":[\"string\",\"null\"]},\"descriptionText\":{\"type\":[\"string\",\"null\"]},\"smoking\":{\"type\":\"boolean\"},\"cats\":{\"type\":\"boolean\"},\"dogs\":{\"type\":\"boolean\"},\"petsNegotiable\":{\"type\":\"boolean\"},\"petsFee\":{\"type\":[\"integer\",\"null\"]},\"petsFeeInterval\":{\"type\":[\"string\",\"null\"]},\"published\":{\"type\":\"boolean\"},\"customerRanking\":{\"type\":\"number\"},\"paidSearchRanking\":{\"type\":\"boolean\"},\"city\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]},\"featureToProperty\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"feature\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]}},\"required\":[\"feature\"]}},\"buildingFeatureToProperty\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"buildingFeature\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]}},\"required\":[\"buildingFeature\"]}},\"community\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"score\":{\"type\":[\"integer\",\"null\"]},\"imageUrl\":{\"type\":[\"string\",\"null\"]},\"quadrant\":{\"type\":[\"string\",\"null\"]},\"sector\":{\"type\":[\"string\",\"null\"]},\"ward\":{\"type\":[\"string\",\"null\"]},\"population\":{\"type\":[\"integer\",\"null\"]},\"dwellings\":{\"type\":[\"integer\",\"null\"]},\"usedForRenting\":{\"type\":[\"number\",\"null\"]},\"area\":{\"type\":[\"number\",\"null\"]},\"density\":{\"type\":[\"number\",\"null\"]},\"averageIncome\":{\"type\":[\"integer\",\"null\"]},\"lowIncome\":{\"type\":[\"number\",\"null\"]},\"immigrants\":{\"type\":[\"number\",\"null\"]},\"elevation\":{\"type\":[\"integer\",\"null\"]},\"established\":{\"type\":[\"integer\",\"null\"]},\"description\":{\"type\":[\"string\",\"null\"]},\"latitude\":{\"type\":\"number\"},\"longitude\":{\"type\":\"number\"},\"communityFeatureToCommunity\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"communityFeature\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]}},\"required\":[\"communityFeature\"]}}},\"required\":[\"name\",\"score\",\"imageUrl\",\"quadrant\",\"sector\",\"ward\",\"population\",\"dwellings\",\"usedForRenting\",\"area\",\"density\",\"averageIncome\",\"lowIncome\",\"immigrants\",\"elevation\",\"established\",\"description\",\"latitude\",\"longitude\",\"communityFeatureToCommunity\"]},\"medias\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"assetId\":{\"type\":\"string\"},\"order\":{\"type\":\"number\"}},\"required\":[\"assetId\",\"order\"]}},\"parkings\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"fee\":{\"type\":\"number\"},\"feeInterval\":{\"type\":\"string\"}},\"required\":[\"name\",\"fee\",\"feeInterval\"]}},\"typeProp\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]},\"floorPlans\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"order\":{\"type\":\"number\"},\"units\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"rent\":{\"type\":\"number\"},\"deposit\":{\"type\":[\"number\",\"null\"]},\"available\":{\"type\":\"boolean\"},\"immediate\":{\"type\":\"boolean\"},\"availableDate\":{\"type\":[\"string\",\"null\"]},\"shortterm\":{\"type\":\"boolean\"},\"longterm\":{\"type\":\"boolean\"},\"unitNumber\":{\"type\":[\"string\",\"null\"]},\"unitName\":{\"type\":[\"string\",\"null\"]},\"surface\":{\"type\":\"integer\"},\"furnished\":{\"type\":\"boolean\"},\"heat\":{\"type\":\"boolean\"},\"water\":{\"type\":\"boolean\"},\"electricity\":{\"type\":\"boolean\"},\"internet\":{\"type\":\"boolean\"},\"television\":{\"type\":\"boolean\"},\"order\":{\"type\":\"integer\"},\"published\":{\"type\":\"boolean\"},\"bedroom\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]},\"bathroom\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]}},\"required\":[\"id\",\"name\",\"rent\",\"deposit\",\"available\",\"immediate\",\"availableDate\",\"shortterm\",\"longterm\",\"unitNumber\",\"unitName\",\"surface\",\"furnished\",\"heat\",\"water\",\"electricity\",\"internet\",\"television\",\"order\",\"published\",\"bedroom\",\"bathroom\"]}}},\"required\":[\"id\",\"name\",\"order\",\"units\"]}}},\"required\":[\"id\",\"listingId\",\"name\",\"address\",\"latitude\",\"longitude\",\"yearBuilt\",\"descriptionTitle\",\"descriptionSubtitle\",\"descriptionText\",\"smoking\",\"cats\",\"dogs\",\"petsNegotiable\",\"petsFee\",\"petsFeeInterval\",\"published\",\"customerRanking\",\"paidSearchRanking\",\"city\",\"featureToProperty\",\"buildingFeatureToProperty\",\"community\",\"medias\",\"parkings\",\"typeProp\",\"floorPlans\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[GET]::/v1/property/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/property/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"property",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "hdsyi7gw3n77jrngcck1x33y",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/property/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"property",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"cupidatat ex culpa anim\",\n    \"listingId\": 38280776.67767188,\n    \"name\": \"ut incididunt\",\n    \"address\": \"officia tempor sed\",\n    \"latitude\": \"deserunt nulla officia\",\n    \"longitude\": \"in ex\",\n    \"yearBuilt\": -10223995,\n    \"descriptionTitle\": \"laboris Ut reprehenderit in\",\n    \"descriptionSubtitle\": \"commodo\",\n    \"descriptionText\": \"exercitation proident\",\n    \"smoking\": true,\n    \"cats\": false,\n    \"dogs\": false,\n    \"petsNegotiable\": true,\n    \"petsFee\": -49636239,\n    \"petsFeeInterval\": \"elit dolore\",\n    \"published\": false,\n    \"customerRanking\": 68589906.85151508,\n    \"paidSearchRanking\": false,\n    \"city\": {\n      \"name\": \"est\"\n    },\n    \"featureToProperty\": [\n      {\n        \"feature\": {\n          \"name\": \"Duis eu ullamco dolore aliquip\"\n        }\n      },\n      {\n        \"feature\": {\n          \"name\": \"eiusmod magna\"\n        }\n      }\n    ],\n    \"buildingFeatureToProperty\": [\n      {\n        \"buildingFeature\": {\n          \"name\": \"elit nisi voluptate adipisicing ex\"\n        }\n      },\n      {\n        \"buildingFeature\": {\n          \"name\": \"in commodo ea et\"\n        }\n      }\n    ],\n    \"community\": {\n      \"name\": \"Duis irure elit\",\n      \"score\": 38656333,\n      \"imageUrl\": \"magna sed aliqua Duis\",\n      \"quadrant\": \"ex anim incididunt\",\n      \"sector\": \"culpa ut cupidatat\",\n      \"ward\": \"minim ut ipsum ad\",\n      \"population\": -52858305,\n      \"dwellings\": 18004577,\n      \"usedForRenting\": 13502114.186774477,\n      \"area\": -21418314.41947697,\n      \"density\": -13413362.386379778,\n      \"averageIncome\": -47827060,\n      \"lowIncome\": 16903385.22935511,\n      \"immigrants\": -33795693.03525365,\n      \"elevation\": -12142273,\n      \"established\": 13554288,\n      \"description\": \"Duis\",\n      \"latitude\": -20769422.625065386,\n      \"longitude\": 8003788.880180225,\n      \"communityFeatureToCommunity\": [\n        {\n          \"communityFeature\": {\n            \"name\": \"veniam ullamco\"\n          }\n        },\n        {\n          \"communityFeature\": {\n            \"name\": \"consequat Lorem\"\n          }\n        }\n      ]\n    },\n    \"medias\": [\n      {\n        \"assetId\": \"dolor in\",\n        \"order\": -86012538.93309857\n      },\n      {\n        \"assetId\": \"Excepteur\",\n        \"order\": 30489711.988420293\n      }\n    ],\n    \"parkings\": [\n      {\n        \"name\": \"quis sed dolor\",\n        \"fee\": -36896521.4639875,\n        \"feeInterval\": \"dolor Lorem aute culpa\"\n      },\n      {\n        \"name\": \"tempor ipsum\",\n        \"fee\": 60391007.75962272,\n        \"feeInterval\": \"nisi tempor\"\n      }\n    ],\n    \"typeProp\": {\n      \"name\": \"eiusmod non\"\n    },\n    \"floorPlans\": [\n      {\n        \"id\": \"ea ut\",\n        \"name\": \"do ad dolor\",\n        \"order\": 7415056.145700261,\n        \"units\": [\n          {\n            \"id\": \"sit laborum dolore Duis\",\n            \"name\": \"in Ut \",\n            \"rent\": 66553702.903686404,\n            \"deposit\": -11326490.883344814,\n            \"available\": false,\n            \"immediate\": true,\n            \"availableDate\": \"est velit in\",\n            \"shortterm\": true,\n            \"longterm\": false,\n            \"unitNumber\": \"irure ut ex labore\",\n            \"unitName\": \"id ea sint\",\n            \"surface\": -88671056,\n            \"furnished\": true,\n            \"heat\": false,\n            \"water\": true,\n            \"electricity\": true,\n            \"internet\": true,\n            \"television\": true,\n            \"order\": 67999973,\n            \"published\": false,\n            \"bedroom\": {\n              \"name\": \"ipsum est sit\"\n            },\n            \"bathroom\": {\n              \"name\": \"ut occ\"\n            }\n          },\n          {\n            \"id\": \"dolore\",\n            \"name\": \"dolore laborum nisi\",\n            \"rent\": 48611639.92684218,\n            \"deposit\": -30750504.25107552,\n            \"available\": true,\n            \"immediate\": false,\n            \"availableDate\": \"commodo ex\",\n            \"shortterm\": false,\n            \"longterm\": false,\n            \"unitNumber\": \"veniam ad\",\n            \"unitName\": \"officia nulla sunt reprehenderit\",\n            \"surface\": -20915682,\n            \"furnished\": false,\n            \"heat\": true,\n            \"water\": false,\n            \"electricity\": true,\n            \"internet\": true,\n            \"television\": true,\n            \"order\": 8608554,\n            \"published\": false,\n            \"bedroom\": {\n              \"name\": \"pariatur ut id\"\n            },\n            \"bathroom\": {\n              \"name\": \"nostrud\"\n            }\n          }\n        ]\n      },\n      {\n        \"id\": \"in ea deserunt nulla\",\n        \"name\": \"d\",\n        \"order\": 21670918.792345792,\n        \"units\": [\n          {\n            \"id\": \"deserunt ut commodo\",\n            \"name\": \"consequat est exercitation\",\n            \"rent\": -10170392.226376683,\n            \"deposit\": -75329634.17484728,\n            \"available\": true,\n            \"immediate\": false,\n            \"availableDate\": \"culpa in pariatur\",\n            \"shortterm\": true,\n            \"longterm\": false,\n            \"unitNumber\": \"quis\",\n            \"unitName\": \"amet deserunt nostrud non\",\n            \"surface\": -68821097,\n            \"furnished\": true,\n            \"heat\": false,\n            \"water\": true,\n            \"electricity\": true,\n            \"internet\": false,\n            \"television\": false,\n            \"order\": 98352569,\n            \"published\": false,\n            \"bedroom\": {\n              \"name\": \"reprehenderit irure dolor\"\n            },\n            \"bathroom\": {\n              \"name\": \"est\"\n            }\n          },\n          {\n            \"id\": \"aliqua amet et consequat do\",\n            \"name\": \"aute dolor ei\",\n            \"rent\": -44576680.82685098,\n            \"deposit\": -96672405.13294932,\n            \"available\": true,\n            \"immediate\": false,\n            \"availableDate\": \"dolor null\",\n            \"shortterm\": true,\n            \"longterm\": false,\n            \"unitNumber\": \"fugiat occaecat eu magna\",\n            \"unitName\": \"ut dolor culpa\",\n            \"surface\": 30580250,\n            \"furnished\": true,\n            \"heat\": true,\n            \"water\": false,\n            \"electricity\": false,\n            \"internet\": true,\n            \"television\": true,\n            \"order\": -20739829,\n            \"published\": false,\n            \"bedroom\": {\n              \"name\": \"aliquip id ullamco\"\n            },\n            \"bathroom\": {\n              \"name\": \"eu mollit\"\n            }\n          }\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/property/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"property",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/property/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"property",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/property/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/v1/property/list - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/v1/property/list - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/v1/property/list - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"listingId\":{\"type\":\"number\"},\"name\":{\"type\":\"string\",\"maxLength\":256},\"address\":{\"type\":\"string\",\"maxLength\":256},\"latitude\":{\"type\":\"string\"},\"longitude\":{\"type\":\"string\"},\"yearBuilt\":{\"type\":[\"number\",\"null\"]},\"descriptionTitle\":{\"type\":[\"string\",\"null\"],\"maxLength\":256},\"descriptionSubtitle\":{\"type\":[\"string\",\"null\"],\"maxLength\":256},\"descriptionText\":{\"type\":[\"string\",\"null\"]},\"typePropId\":{\"type\":\"string\",\"maxLength\":128},\"communityId\":{\"type\":[\"string\",\"null\"],\"maxLength\":128},\"cityId\":{\"type\":\"string\",\"maxLength\":128},\"smoking\":{\"type\":\"boolean\"},\"cats\":{\"type\":\"boolean\"},\"dogs\":{\"type\":\"boolean\"},\"petsNegotiable\":{\"type\":\"boolean\"},\"petsFee\":{\"type\":[\"number\",\"null\"]},\"petsFeeInterval\":{\"type\":[\"string\",\"null\"],\"maxLength\":128},\"published\":{\"type\":\"boolean\"},\"customerRanking\":{\"type\":\"number\"},\"paidSearchRanking\":{\"type\":\"boolean\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"listingId\",\"name\",\"address\",\"latitude\",\"longitude\",\"yearBuilt\",\"descriptionTitle\",\"descriptionSubtitle\",\"descriptionText\",\"typePropId\",\"communityId\",\"cityId\",\"smoking\",\"cats\",\"dogs\",\"petsNegotiable\",\"petsFee\",\"petsFeeInterval\",\"published\",\"customerRanking\",\"paidSearchRanking\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/v1/property/list - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"gt\",\n          \"yearBuilt\",\n          2010\n        ],\n        [\n          \"lt\",\n          \"yearBuilt\",\n          2020\n        ]\n      ]\n    ],\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"cats\",\n          1\n        ],\n        [\n          \"eq\",\n          \"dogs\",\n          1\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"communityId\",\n      \"icj3bimn4dg5v1yeu7i2frzq\"\n    ],\n    [\n      \"eq\",\n      \"cityId\",\n      \"dl7r7ezrt909p6bmct6avl9l\"\n    ],\n    [\n      \"eq\",\n      \"smoking\",\n      0\n    ]\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/property/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"property",
								"list"
							],
							"query": [
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "id-desc",
									"disabled": true
								},
								{
									"key": "cursor",
									"value": "abqdj6xe8puto1j83soz3bml",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with an array of property objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"gt\",\n          \"yearBuilt\",\n          2010\n        ],\n        [\n          \"lt\",\n          \"yearBuilt\",\n          2020\n        ]\n      ]\n    ],\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"cats\",\n          1\n        ],\n        [\n          \"eq\",\n          \"dogs\",\n          1\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"communityId\",\n      \"icj3bimn4dg5v1yeu7i2frzq\"\n    ],\n    [\n      \"eq\",\n      \"cityId\",\n      \"dl7r7ezrt909p6bmct6avl9l\"\n    ],\n    [\n      \"eq\",\n      \"smoking\",\n      0\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/property/list?limit=10&orderBy=id-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"property",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "id-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"voluptate\",\n      \"listingId\": 31037118.282786787,\n      \"name\": \"consequat ullamco dolor tempor\",\n      \"address\": \"incididunt adi\",\n      \"latitude\": \"consequat id\",\n      \"longitude\": \"Lore\",\n      \"yearBuilt\": 24062336.98991622,\n      \"descriptionTitle\": \"dolore aliqua veniam incididunt\",\n      \"descriptionSubtitle\": \"ut sint\",\n      \"descriptionText\": \"consectetur irure ex et deserunt\",\n      \"typePropId\": \"consectetur cupidatat ipsum consequat\",\n      \"communityId\": \"dolore pariatur sint\",\n      \"cityId\": \"ipsum\",\n      \"smoking\": true,\n      \"cats\": true,\n      \"dogs\": true,\n      \"petsNegotiable\": false,\n      \"petsFee\": -99343921.04697354,\n      \"petsFeeInterval\": \"tempor Excepteur aute nulla\",\n      \"published\": false,\n      \"customerRanking\": 20247378.683906406,\n      \"paidSearchRanking\": false,\n      \"createdAt\": \"cupidatat ad et\",\n      \"updatedAt\": \"consequat\"\n    },\n    {\n      \"id\": \"ea enim\",\n      \"listingId\": 1502788.5252246559,\n      \"name\": \"ex nostrud\",\n      \"address\": \"veniam ea\",\n      \"latitude\": \"Ut nostrud do\",\n      \"longitude\": \"dolore elit aliquip\",\n      \"yearBuilt\": 9724963.39934206,\n      \"descriptionTitle\": \"dolore commodo\",\n      \"descriptionSubtitle\": \"elit\",\n      \"descriptionText\": \"deserunt\",\n      \"typePropId\": \"qui occ\",\n      \"communityId\": \"anim nostrud eu magna tempor\",\n      \"cityId\": \"et incididunt Duis\",\n      \"smoking\": true,\n      \"cats\": false,\n      \"dogs\": false,\n      \"petsNegotiable\": false,\n      \"petsFee\": -37803505.31321854,\n      \"petsFeeInterval\": \"proi\",\n      \"published\": false,\n      \"customerRanking\": -7532762.702522427,\n      \"paidSearchRanking\": true,\n      \"createdAt\": \"consectetur labore veniam i\",\n      \"updatedAt\": \"in nostrud in occaecat\"\n    }\n  ]\n}"
						},
						{
							"name": "Responds with a bad request error object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"gt\",\n          \"yearBuilt\",\n          2010\n        ],\n        [\n          \"lt\",\n          \"yearBuilt\",\n          2020\n        ]\n      ]\n    ],\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"cats\",\n          1\n        ],\n        [\n          \"eq\",\n          \"dogs\",\n          1\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"communityId\",\n      \"icj3bimn4dg5v1yeu7i2frzq\"\n    ],\n    [\n      \"eq\",\n      \"cityId\",\n      \"dl7r7ezrt909p6bmct6avl9l\"\n    ],\n    [\n      \"eq\",\n      \"smoking\",\n      0\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/property/list?limit=10&orderBy=id-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"property",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "id-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"gt\",\n          \"yearBuilt\",\n          2010\n        ],\n        [\n          \"lt\",\n          \"yearBuilt\",\n          2020\n        ]\n      ]\n    ],\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"cats\",\n          1\n        ],\n        [\n          \"eq\",\n          \"dogs\",\n          1\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"communityId\",\n      \"icj3bimn4dg5v1yeu7i2frzq\"\n    ],\n    [\n      \"eq\",\n      \"cityId\",\n      \"dl7r7ezrt909p6bmct6avl9l\"\n    ],\n    [\n      \"eq\",\n      \"smoking\",\n      0\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/property/list?limit=10&orderBy=id-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"property",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "id-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/property/create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/v1/property/create - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/v1/property/create - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/v1/property/create - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/v1/property/create - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Property name\",\n  \"address\": \"123 Main St, Calgary, AB T2P 1J9\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\",\n  \"yearBuilt\": 2019,\n  \"descriptionTitle\": \"Property description title\",\n  \"descriptionSubtitle\": \"Property description subtitle\",\n  \"descriptionText\": \"Property description text\",\n  \"typePropId\": \"zvyuykclatrceuwmxo1bd42p\",\n  \"communityId\": \"icj3bimn4dg5v1yeu7i2frzq\",\n  \"cityId\": \"dl7r7ezrt909p6bmct6avl9l\",\n  \"smoking\": false,\n  \"cats\": true,\n  \"dogs\": false,\n  \"petsNegotiable\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/property/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"property",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Property name\",\n  \"address\": \"123 Main St, Calgary, AB T2P 1J9\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\",\n  \"yearBuilt\": 2019,\n  \"descriptionTitle\": \"Property description title\",\n  \"descriptionSubtitle\": \"Property description subtitle\",\n  \"descriptionText\": \"Property description text\",\n  \"typePropId\": \"zvyuykclatrceuwmxo1bd42p\",\n  \"communityId\": \"icj3bimn4dg5v1yeu7i2frzq\",\n  \"cityId\": \"dl7r7ezrt909p6bmct6avl9l\",\n  \"smoking\": false,\n  \"cats\": true,\n  \"dogs\": false,\n  \"petsNegotiable\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/property/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"property",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"consectetur\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Property name\",\n  \"address\": \"123 Main St, Calgary, AB T2P 1J9\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\",\n  \"yearBuilt\": 2019,\n  \"descriptionTitle\": \"Property description title\",\n  \"descriptionSubtitle\": \"Property description subtitle\",\n  \"descriptionText\": \"Property description text\",\n  \"typePropId\": \"zvyuykclatrceuwmxo1bd42p\",\n  \"communityId\": \"icj3bimn4dg5v1yeu7i2frzq\",\n  \"cityId\": \"dl7r7ezrt909p6bmct6avl9l\",\n  \"smoking\": false,\n  \"cats\": true,\n  \"dogs\": false,\n  \"petsNegotiable\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/property/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"property",
										"create"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Property name\",\n  \"address\": \"123 Main St, Calgary, AB T2P 1J9\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\",\n  \"yearBuilt\": 2019,\n  \"descriptionTitle\": \"Property description title\",\n  \"descriptionSubtitle\": \"Property description subtitle\",\n  \"descriptionText\": \"Property description text\",\n  \"typePropId\": \"zvyuykclatrceuwmxo1bd42p\",\n  \"communityId\": \"icj3bimn4dg5v1yeu7i2frzq\",\n  \"cityId\": \"dl7r7ezrt909p6bmct6avl9l\",\n  \"smoking\": false,\n  \"cats\": true,\n  \"dogs\": false,\n  \"petsNegotiable\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/property/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"property",
										"create"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Property name\",\n  \"address\": \"123 Main St, Calgary, AB T2P 1J9\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\",\n  \"yearBuilt\": 2019,\n  \"descriptionTitle\": \"Property description title\",\n  \"descriptionSubtitle\": \"Property description subtitle\",\n  \"descriptionText\": \"Property description text\",\n  \"typePropId\": \"zvyuykclatrceuwmxo1bd42p\",\n  \"communityId\": \"icj3bimn4dg5v1yeu7i2frzq\",\n  \"cityId\": \"dl7r7ezrt909p6bmct6avl9l\",\n  \"smoking\": false,\n  \"cats\": true,\n  \"dogs\": false,\n  \"petsNegotiable\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/property/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"property",
										"create"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/property/update/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[PUT]::/v1/property/update/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[PUT]::/v1/property/update/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[PUT]::/v1/property/update/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[PUT]::/v1/property/update/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Property name\",\n  \"address\": \"123 Main St, Calgary, AB T2P 1J9\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\",\n  \"yearBuilt\": 2020,\n  \"descriptionTitle\": \"Property description title\",\n  \"descriptionSubtitle\": \"Property description subtitle\",\n  \"descriptionText\": \"Property description text\",\n  \"smoking\": true,\n  \"cats\": true,\n  \"dogs\": false,\n  \"petsNegotiable\": true,\n  \"petsFee\": 100\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/property/update/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"property",
								"update",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "hdsyi7gw3n77jrngcck1x33y",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with the id of the updated property.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Property name\",\n  \"address\": \"123 Main St, Calgary, AB T2P 1J9\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\",\n  \"yearBuilt\": 2020,\n  \"descriptionTitle\": \"Property description title\",\n  \"descriptionSubtitle\": \"Property description subtitle\",\n  \"descriptionText\": \"Property description text\",\n  \"smoking\": true,\n  \"cats\": true,\n  \"dogs\": false,\n  \"petsNegotiable\": true,\n  \"petsFee\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/property/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"property",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"consectetur\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Property name\",\n  \"address\": \"123 Main St, Calgary, AB T2P 1J9\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\",\n  \"yearBuilt\": 2020,\n  \"descriptionTitle\": \"Property description title\",\n  \"descriptionSubtitle\": \"Property description subtitle\",\n  \"descriptionText\": \"Property description text\",\n  \"smoking\": true,\n  \"cats\": true,\n  \"dogs\": false,\n  \"petsNegotiable\": true,\n  \"petsFee\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/property/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"property",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Property name\",\n  \"address\": \"123 Main St, Calgary, AB T2P 1J9\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\",\n  \"yearBuilt\": 2020,\n  \"descriptionTitle\": \"Property description title\",\n  \"descriptionSubtitle\": \"Property description subtitle\",\n  \"descriptionText\": \"Property description text\",\n  \"smoking\": true,\n  \"cats\": true,\n  \"dogs\": false,\n  \"petsNegotiable\": true,\n  \"petsFee\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/property/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"property",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Property name\",\n  \"address\": \"123 Main St, Calgary, AB T2P 1J9\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\",\n  \"yearBuilt\": 2020,\n  \"descriptionTitle\": \"Property description title\",\n  \"descriptionSubtitle\": \"Property description subtitle\",\n  \"descriptionText\": \"Property description text\",\n  \"smoking\": true,\n  \"cats\": true,\n  \"dogs\": false,\n  \"petsNegotiable\": true,\n  \"petsFee\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/property/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"property",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/property/delete/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[DELETE]::/v1/property/delete/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[DELETE]::/v1/property/delete/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[DELETE]::/v1/property/delete/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[DELETE]::/v1/property/delete/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/property/delete/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"property",
								"delete",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "hdsyi7gw3n77jrngcck1x33y",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/property/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"property",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/property/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"property",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/property/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"property",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/property/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"property",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a conflict error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/property/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"property",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "region",
			"item": [
				{
					"name": "/v1/region/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[GET]::/v1/region/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[GET]::/v1/region/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[GET]::/v1/region/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"administrativeName\":{\"type\":\"string\"},\"cities\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\"]}}},\"required\":[\"id\",\"name\",\"administrativeName\",\"cities\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[GET]::/v1/region/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/region/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"region",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "kj3nrb5rv094v8ns5ptz1jhc",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/region/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"region",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "kj3nrb5rv094v8ns5ptz1jhc",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"velit Lorem\",\n    \"name\": \"adipisicing fugiat reprehenderit\",\n    \"administrativeName\": \"eiusmod culpa tempor ad\",\n    \"cities\": [\n      {\n        \"id\": \"eu\",\n        \"name\": \"do irure et esse laborum\"\n      },\n      {\n        \"id\": \"anim deserunt Ut occaecat\",\n        \"name\": \"laborum labore amet non\"\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/region/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"region",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "kj3nrb5rv094v8ns5ptz1jhc",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/region/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"region",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "kj3nrb5rv094v8ns5ptz1jhc",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/region/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/v1/region/list - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/v1/region/list - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/v1/region/list - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"administrativeName\":{\"type\":\"string\",\"maxLength\":256},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"administrativeName\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/v1/region/list - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Alberta\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Manitoba\"\n        ]\n      ]\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-23T00:00:00.000Z\",\n      \"2024-02-12T00:00:00.000Z\"\n    ]\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/region/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"region",
								"list"
							],
							"query": [
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "id-asc",
									"disabled": true
								},
								{
									"key": "cursor",
									"value": "abqdj6xe8puto1j83soz3bml",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with an array of region objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Alberta\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Manitoba\"\n        ]\n      ]\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-23T00:00:00.000Z\",\n      \"2024-02-12T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/region/list?limit=10&orderBy=id-asc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"region",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "id-asc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"laborum\",\n      \"name\": \"reprehenderit Ut\",\n      \"administrativeName\": \"cillum exercitation ipsum sed\",\n      \"createdAt\": \"ipsum incididunt\",\n      \"updatedAt\": \"id non ex dolore\"\n    },\n    {\n      \"id\": \"sunt\",\n      \"name\": \"non labore aute\",\n      \"administrativeName\": \"aliquip culpa nisi irur\",\n      \"createdAt\": \"ipsum\",\n      \"updatedAt\": \"elit tempor ut eu\"\n    }\n  ]\n}"
						},
						{
							"name": "Responds with a bad request error object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Alberta\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Manitoba\"\n        ]\n      ]\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-23T00:00:00.000Z\",\n      \"2024-02-12T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/region/list?limit=10&orderBy=id-asc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"region",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "id-asc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Alberta\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Manitoba\"\n        ]\n      ]\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-23T00:00:00.000Z\",\n      \"2024-02-12T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/region/list?limit=10&orderBy=id-asc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"region",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "id-asc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/region/create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/v1/region/create - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/v1/region/create - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/v1/region/create - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/v1/region/create - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Ontario\",\n  \"administrativeName\": \"Province\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/region/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"region",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Ontario\",\n  \"administrativeName\": \"Province\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/region/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"region",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"consectetur\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Ontario\",\n  \"administrativeName\": \"Province\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/region/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"region",
										"create"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Ontario\",\n  \"administrativeName\": \"Province\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/region/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"region",
										"create"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Ontario\",\n  \"administrativeName\": \"Province\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/region/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"region",
										"create"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/region/update/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[PUT]::/v1/region/update/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[PUT]::/v1/region/update/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[PUT]::/v1/region/update/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[PUT]::/v1/region/update/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"administrativeName\": \"State\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/region/update/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"region",
								"update",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "kj3nrb5rv094v8ns5ptz1jhc",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with the id of the updated region.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"administrativeName\": \"State\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/region/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"region",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "kj3nrb5rv094v8ns5ptz1jhc",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"consectetur\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"administrativeName\": \"State\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/region/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"region",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "kj3nrb5rv094v8ns5ptz1jhc",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"administrativeName\": \"State\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/region/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"region",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "kj3nrb5rv094v8ns5ptz1jhc",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"administrativeName\": \"State\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/region/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"region",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "kj3nrb5rv094v8ns5ptz1jhc",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/region/delete/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[DELETE]::/v1/region/delete/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[DELETE]::/v1/region/delete/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[DELETE]::/v1/region/delete/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[DELETE]::/v1/region/delete/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/region/delete/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"region",
								"delete",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "kj3nrb5rv094v8ns5ptz1jhc",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/region/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"region",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "kj3nrb5rv094v8ns5ptz1jhc",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/region/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"region",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "kj3nrb5rv094v8ns5ptz1jhc",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/region/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"region",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "kj3nrb5rv094v8ns5ptz1jhc",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/region/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"region",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "kj3nrb5rv094v8ns5ptz1jhc",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a conflict error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/region/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"region",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "kj3nrb5rv094v8ns5ptz1jhc",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "typeProp",
			"item": [
				{
					"name": "/v1/type-prop/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/v1/type-prop/list - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/v1/type-prop/list - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/v1/type-prop/list - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"order\":{\"type\":\"number\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"order\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/v1/type-prop/list - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/type-prop/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"type-prop",
								"list"
							],
							"query": [
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "updatedAt-desc",
									"disabled": true
								},
								{
									"key": "cursor",
									"value": "abqdj6xe8puto1j83soz3bml",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with an array of typeProp objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/type-prop/list?limit=10&orderBy=updatedAt-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"type-prop",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "updatedAt-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"labore ea sit incididunt\",\n      \"name\": \"in consectetur anim\",\n      \"order\": -3894539.451474935,\n      \"createdAt\": \"Ut\",\n      \"updatedAt\": \"nisi do\"\n    },\n    {\n      \"id\": \"consectetur irure\",\n      \"name\": \"amet consectetur sit Duis\",\n      \"order\": -53883371.626426294,\n      \"createdAt\": \"dolor tempor Ut sint\",\n      \"updatedAt\": \"cillum Excepteur sed\"\n    }\n  ]\n}"
						},
						{
							"name": "Responds with a bad request error object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/type-prop/list?limit=10&orderBy=updatedAt-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"type-prop",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "updatedAt-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/type-prop/list?limit=10&orderBy=updatedAt-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"type-prop",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "updatedAt-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/type-prop/create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/v1/type-prop/create - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/v1/type-prop/create - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/v1/type-prop/create - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/v1/type-prop/create - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/type-prop/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"type-prop",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/type-prop/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"type-prop",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"consectetur\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/type-prop/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"type-prop",
										"create"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/type-prop/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"type-prop",
										"create"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/type-prop/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"type-prop",
										"create"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/type-prop/update/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[PUT]::/v1/type-prop/update/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[PUT]::/v1/type-prop/update/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[PUT]::/v1/type-prop/update/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[PUT]::/v1/type-prop/update/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"order\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/type-prop/update/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"type-prop",
								"update",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "zvyuykclatrceuwmxo1bd42p",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with the id of the updated typeProp.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/type-prop/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"type-prop",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "zvyuykclatrceuwmxo1bd42p",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"consectetur\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/type-prop/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"type-prop",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "zvyuykclatrceuwmxo1bd42p",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/type-prop/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"type-prop",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "zvyuykclatrceuwmxo1bd42p",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/type-prop/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"type-prop",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "zvyuykclatrceuwmxo1bd42p",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/type-prop/delete/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[DELETE]::/v1/type-prop/delete/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[DELETE]::/v1/type-prop/delete/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[DELETE]::/v1/type-prop/delete/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[DELETE]::/v1/type-prop/delete/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/type-prop/delete/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"type-prop",
								"delete",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "zvyuykclatrceuwmxo1bd42p",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/type-prop/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"type-prop",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "zvyuykclatrceuwmxo1bd42p",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/type-prop/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"type-prop",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "zvyuykclatrceuwmxo1bd42p",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/type-prop/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"type-prop",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "zvyuykclatrceuwmxo1bd42p",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/type-prop/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"type-prop",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "zvyuykclatrceuwmxo1bd42p",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a conflict error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/type-prop/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"type-prop",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "zvyuykclatrceuwmxo1bd42p",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "unit",
			"item": [
				{
					"name": "/v1/unit/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[GET]::/v1/unit/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[GET]::/v1/unit/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[GET]::/v1/unit/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"propertyId\":{\"type\":\"string\"},\"floorPlanId\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"rent\":{\"type\":\"integer\"},\"deposit\":{\"type\":[\"integer\",\"null\"]},\"available\":{\"type\":\"boolean\"},\"immediate\":{\"type\":\"boolean\"},\"availableDate\":{\"type\":[\"string\",\"null\"]},\"shortterm\":{\"type\":\"boolean\"},\"longterm\":{\"type\":\"boolean\"},\"unitNumber\":{\"type\":[\"string\",\"null\"]},\"unitName\":{\"type\":[\"string\",\"null\"]},\"surface\":{\"type\":\"integer\"},\"furnished\":{\"type\":\"boolean\"},\"heat\":{\"type\":\"boolean\"},\"water\":{\"type\":\"boolean\"},\"electricity\":{\"type\":\"boolean\"},\"internet\":{\"type\":\"boolean\"},\"television\":{\"type\":\"boolean\"},\"order\":{\"type\":\"integer\"},\"published\":{\"type\":\"boolean\"},\"bedroom\":{\"type\":[\"object\",\"null\"],\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]},\"bathroom\":{\"type\":[\"object\",\"null\"],\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]}},\"required\":[\"id\",\"propertyId\",\"floorPlanId\",\"name\",\"rent\",\"deposit\",\"available\",\"immediate\",\"availableDate\",\"shortterm\",\"longterm\",\"unitNumber\",\"unitName\",\"surface\",\"furnished\",\"heat\",\"water\",\"electricity\",\"internet\",\"television\",\"order\",\"published\",\"bedroom\",\"bathroom\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[GET]::/v1/unit/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/unit/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"unit",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "amyphpzv9inobdo3x1dfu18p",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/unit/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"unit",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "amyphpzv9inobdo3x1dfu18p",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sint in\",\n    \"propertyId\": \"elit et Excepteur sed in\",\n    \"floorPlanId\": \"cupidatat minim id\",\n    \"name\": \"proident\",\n    \"rent\": -29808195,\n    \"deposit\": 38995438,\n    \"available\": true,\n    \"immediate\": true,\n    \"availableDate\": \"voluptate Duis\",\n    \"shortterm\": false,\n    \"longterm\": false,\n    \"unitNumber\": \"aliqua laboris\",\n    \"unitName\": \"minim est Duis\",\n    \"surface\": -79307910,\n    \"furnished\": true,\n    \"heat\": true,\n    \"water\": false,\n    \"electricity\": false,\n    \"internet\": false,\n    \"television\": true,\n    \"order\": 83938323,\n    \"published\": false,\n    \"bedroom\": {\n      \"name\": \"adipisicing\"\n    },\n    \"bathroom\": {\n      \"name\": \"et consequat elit\"\n    }\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/unit/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"unit",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "amyphpzv9inobdo3x1dfu18p",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/unit/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"unit",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "amyphpzv9inobdo3x1dfu18p",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/unit/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/v1/unit/list - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/v1/unit/list - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/v1/unit/list - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"propertyId\":{\"type\":\"string\",\"maxLength\":128},\"floorPlanId\":{\"type\":\"string\",\"maxLength\":128},\"rent\":{\"type\":\"number\"},\"deposit\":{\"type\":[\"number\",\"null\"]},\"available\":{\"type\":\"boolean\"},\"immediate\":{\"type\":\"boolean\"},\"availableDate\":{\"type\":[\"string\",\"null\"]},\"shortterm\":{\"type\":\"boolean\"},\"longterm\":{\"type\":\"boolean\"},\"unitNumber\":{\"type\":[\"string\",\"null\"],\"maxLength\":128},\"unitName\":{\"type\":[\"string\",\"null\"],\"maxLength\":128},\"surface\":{\"type\":\"number\"},\"furnished\":{\"type\":\"boolean\"},\"bedroomId\":{\"type\":[\"string\",\"null\"],\"maxLength\":128},\"bathroomId\":{\"type\":[\"string\",\"null\"],\"maxLength\":128},\"heat\":{\"type\":\"boolean\"},\"water\":{\"type\":\"boolean\"},\"electricity\":{\"type\":\"boolean\"},\"internet\":{\"type\":\"boolean\"},\"television\":{\"type\":\"boolean\"},\"order\":{\"type\":\"number\"},\"published\":{\"type\":\"boolean\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"propertyId\",\"floorPlanId\",\"rent\",\"deposit\",\"available\",\"immediate\",\"availableDate\",\"shortterm\",\"longterm\",\"unitNumber\",\"unitName\",\"surface\",\"furnished\",\"bedroomId\",\"bathroomId\",\"heat\",\"water\",\"electricity\",\"internet\",\"television\",\"order\",\"published\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/v1/unit/list - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"bedroomId\",\n          \"zjggk1ve17r7jmpq8dtmbjyw\"\n        ],\n        [\n          \"eq\",\n          \"bedroomId\",\n          \"kcfw2qhwnky96aeeov73aaze\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"bathroomId\",\n      \"qae4cp7xnotk3wh26dkpp7y7\"\n    ],\n    [\n      \"eq\",\n      \"longterm\",\n      1\n    ],\n    [\n      \"between\",\n      \"surface\",\n      700,\n      1000\n    ],\n    [\n      \"eq\",\n      \"furnished\",\n      1\n    ],\n    [\n      \"eq\",\n      \"heat\",\n      1\n    ],\n    [\n      \"eq\",\n      \"water\",\n      1\n    ],\n    [\n      \"eq\",\n      \"electricity\",\n      1\n    ]\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/unit/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"unit",
								"list"
							],
							"query": [
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "bedroomId-desc",
									"disabled": true
								},
								{
									"key": "cursor",
									"value": "abqdj6xe8puto1j83soz3bml",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with an array of unit objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"bedroomId\",\n          \"zjggk1ve17r7jmpq8dtmbjyw\"\n        ],\n        [\n          \"eq\",\n          \"bedroomId\",\n          \"kcfw2qhwnky96aeeov73aaze\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"bathroomId\",\n      \"qae4cp7xnotk3wh26dkpp7y7\"\n    ],\n    [\n      \"eq\",\n      \"longterm\",\n      1\n    ],\n    [\n      \"between\",\n      \"surface\",\n      700,\n      1000\n    ],\n    [\n      \"eq\",\n      \"furnished\",\n      1\n    ],\n    [\n      \"eq\",\n      \"heat\",\n      1\n    ],\n    [\n      \"eq\",\n      \"water\",\n      1\n    ],\n    [\n      \"eq\",\n      \"electricity\",\n      1\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/unit/list?limit=10&orderBy=bedroomId-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"unit",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "bedroomId-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"magna eu\",\n      \"name\": \"voluptate fugiat Lorem\",\n      \"propertyId\": \"minim occaecat\",\n      \"floorPlanId\": \"dolor cillum non\",\n      \"rent\": -36074221.33066067,\n      \"deposit\": 37509740.71770862,\n      \"available\": true,\n      \"immediate\": false,\n      \"availableDate\": \"Ut cillum sit\",\n      \"shortterm\": true,\n      \"longterm\": false,\n      \"unitNumber\": \"deserunt nostrud pariatur\",\n      \"unitName\": \"dolor quis incididunt\",\n      \"surface\": -20896496.59392436,\n      \"furnished\": true,\n      \"bedroomId\": \"culpa Lorem incididunt\",\n      \"bathroomId\": \"labore esse tempor\",\n      \"heat\": false,\n      \"water\": false,\n      \"electricity\": true,\n      \"internet\": false,\n      \"television\": false,\n      \"order\": -37236621.51108384,\n      \"published\": true,\n      \"createdAt\": \"amet veniam laboris ad\",\n      \"updatedAt\": \"aliqua non laboris consequat\"\n    },\n    {\n      \"id\": \"Lorem ut cillum\",\n      \"name\": \"occaecat qui\",\n      \"propertyId\": \"magna sint Duis laboris\",\n      \"floorPlanId\": \"labore ipsum est\",\n      \"rent\": -17052312.295461684,\n      \"deposit\": 5123176.353496373,\n      \"available\": true,\n      \"immediate\": true,\n      \"availableDate\": \"nisi dolore\",\n      \"shortterm\": true,\n      \"longterm\": false,\n      \"unitNumber\": \"minim\",\n      \"unitName\": \"aute labore\",\n      \"surface\": 9282988.820153952,\n      \"furnished\": true,\n      \"bedroomId\": \"sint\",\n      \"bathroomId\": \"enim et cillum dolore officia\",\n      \"heat\": false,\n      \"water\": true,\n      \"electricity\": true,\n      \"internet\": true,\n      \"television\": true,\n      \"order\": 99012332.28601408,\n      \"published\": false,\n      \"createdAt\": \"deserunt anim veniam ut et\",\n      \"updatedAt\": \"proident quis tempor\"\n    }\n  ]\n}"
						},
						{
							"name": "Responds with a bad request error object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"bedroomId\",\n          \"zjggk1ve17r7jmpq8dtmbjyw\"\n        ],\n        [\n          \"eq\",\n          \"bedroomId\",\n          \"kcfw2qhwnky96aeeov73aaze\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"bathroomId\",\n      \"qae4cp7xnotk3wh26dkpp7y7\"\n    ],\n    [\n      \"eq\",\n      \"longterm\",\n      1\n    ],\n    [\n      \"between\",\n      \"surface\",\n      700,\n      1000\n    ],\n    [\n      \"eq\",\n      \"furnished\",\n      1\n    ],\n    [\n      \"eq\",\n      \"heat\",\n      1\n    ],\n    [\n      \"eq\",\n      \"water\",\n      1\n    ],\n    [\n      \"eq\",\n      \"electricity\",\n      1\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/unit/list?limit=10&orderBy=bedroomId-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"unit",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "bedroomId-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"bedroomId\",\n          \"zjggk1ve17r7jmpq8dtmbjyw\"\n        ],\n        [\n          \"eq\",\n          \"bedroomId\",\n          \"kcfw2qhwnky96aeeov73aaze\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"bathroomId\",\n      \"qae4cp7xnotk3wh26dkpp7y7\"\n    ],\n    [\n      \"eq\",\n      \"longterm\",\n      1\n    ],\n    [\n      \"between\",\n      \"surface\",\n      700,\n      1000\n    ],\n    [\n      \"eq\",\n      \"furnished\",\n      1\n    ],\n    [\n      \"eq\",\n      \"heat\",\n      1\n    ],\n    [\n      \"eq\",\n      \"water\",\n      1\n    ],\n    [\n      \"eq\",\n      \"electricity\",\n      1\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/unit/list?limit=10&orderBy=bedroomId-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"unit",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "bedroomId-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/unit/create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/v1/unit/create - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/v1/unit/create - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/v1/unit/create - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/v1/unit/create - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"propertyId\": \"hdsyi7gw3n77jrngcck1x33y\",\n  \"floorPlanId\": \"fe897wto8ribvu9024zvfvxp\",\n  \"name\": \"Unit name\",\n  \"rent\": 1000,\n  \"deposit\": 1000,\n  \"shortterm\": true,\n  \"longterm\": true,\n  \"unitNumber\": \"101\",\n  \"unitName\": \"101\",\n  \"surface\": 1000,\n  \"furnished\": true,\n  \"heat\": true,\n  \"water\": true,\n  \"electricity\": true,\n  \"internet\": true,\n  \"television\": true,\n  \"order\": 1,\n  \"bedroomId\": \"zjggk1ve17r7jmpq8dtmbjyw\",\n  \"bathroomId\": \"qae4cp7xnotk3wh26dkpp7y7\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/unit/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"unit",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"propertyId\": \"hdsyi7gw3n77jrngcck1x33y\",\n  \"floorPlanId\": \"fe897wto8ribvu9024zvfvxp\",\n  \"name\": \"Unit name\",\n  \"rent\": 1000,\n  \"deposit\": 1000,\n  \"shortterm\": true,\n  \"longterm\": true,\n  \"unitNumber\": \"101\",\n  \"unitName\": \"101\",\n  \"surface\": 1000,\n  \"furnished\": true,\n  \"heat\": true,\n  \"water\": true,\n  \"electricity\": true,\n  \"internet\": true,\n  \"television\": true,\n  \"order\": 1,\n  \"bedroomId\": \"zjggk1ve17r7jmpq8dtmbjyw\",\n  \"bathroomId\": \"qae4cp7xnotk3wh26dkpp7y7\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/unit/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"unit",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"consectetur\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"propertyId\": \"hdsyi7gw3n77jrngcck1x33y\",\n  \"floorPlanId\": \"fe897wto8ribvu9024zvfvxp\",\n  \"name\": \"Unit name\",\n  \"rent\": 1000,\n  \"deposit\": 1000,\n  \"shortterm\": true,\n  \"longterm\": true,\n  \"unitNumber\": \"101\",\n  \"unitName\": \"101\",\n  \"surface\": 1000,\n  \"furnished\": true,\n  \"heat\": true,\n  \"water\": true,\n  \"electricity\": true,\n  \"internet\": true,\n  \"television\": true,\n  \"order\": 1,\n  \"bedroomId\": \"zjggk1ve17r7jmpq8dtmbjyw\",\n  \"bathroomId\": \"qae4cp7xnotk3wh26dkpp7y7\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/unit/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"unit",
										"create"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"propertyId\": \"hdsyi7gw3n77jrngcck1x33y\",\n  \"floorPlanId\": \"fe897wto8ribvu9024zvfvxp\",\n  \"name\": \"Unit name\",\n  \"rent\": 1000,\n  \"deposit\": 1000,\n  \"shortterm\": true,\n  \"longterm\": true,\n  \"unitNumber\": \"101\",\n  \"unitName\": \"101\",\n  \"surface\": 1000,\n  \"furnished\": true,\n  \"heat\": true,\n  \"water\": true,\n  \"electricity\": true,\n  \"internet\": true,\n  \"television\": true,\n  \"order\": 1,\n  \"bedroomId\": \"zjggk1ve17r7jmpq8dtmbjyw\",\n  \"bathroomId\": \"qae4cp7xnotk3wh26dkpp7y7\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/unit/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"unit",
										"create"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"propertyId\": \"hdsyi7gw3n77jrngcck1x33y\",\n  \"floorPlanId\": \"fe897wto8ribvu9024zvfvxp\",\n  \"name\": \"Unit name\",\n  \"rent\": 1000,\n  \"deposit\": 1000,\n  \"shortterm\": true,\n  \"longterm\": true,\n  \"unitNumber\": \"101\",\n  \"unitName\": \"101\",\n  \"surface\": 1000,\n  \"furnished\": true,\n  \"heat\": true,\n  \"water\": true,\n  \"electricity\": true,\n  \"internet\": true,\n  \"television\": true,\n  \"order\": 1,\n  \"bedroomId\": \"zjggk1ve17r7jmpq8dtmbjyw\",\n  \"bathroomId\": \"qae4cp7xnotk3wh26dkpp7y7\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/unit/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"unit",
										"create"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/unit/update/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[PUT]::/v1/unit/update/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[PUT]::/v1/unit/update/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[PUT]::/v1/unit/update/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[PUT]::/v1/unit/update/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"rent\": 1500,\n  \"deposit\": 1500,\n  \"shortterm\": false,\n  \"longterm\": true,\n  \"order\": 0,\n  \"published\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/unit/update/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"unit",
								"update",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "amyphpzv9inobdo3x1dfu18p",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with the id of the updated unit.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"rent\": 1500,\n  \"deposit\": 1500,\n  \"shortterm\": false,\n  \"longterm\": true,\n  \"order\": 0,\n  \"published\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/unit/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"unit",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "amyphpzv9inobdo3x1dfu18p",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"consectetur\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"rent\": 1500,\n  \"deposit\": 1500,\n  \"shortterm\": false,\n  \"longterm\": true,\n  \"order\": 0,\n  \"published\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/unit/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"unit",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "amyphpzv9inobdo3x1dfu18p",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"rent\": 1500,\n  \"deposit\": 1500,\n  \"shortterm\": false,\n  \"longterm\": true,\n  \"order\": 0,\n  \"published\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/unit/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"unit",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "amyphpzv9inobdo3x1dfu18p",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"rent\": 1500,\n  \"deposit\": 1500,\n  \"shortterm\": false,\n  \"longterm\": true,\n  \"order\": 0,\n  \"published\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/unit/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"unit",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "amyphpzv9inobdo3x1dfu18p",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/v1/unit/delete/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[DELETE]::/v1/unit/delete/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[DELETE]::/v1/unit/delete/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[DELETE]::/v1/unit/delete/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[DELETE]::/v1/unit/delete/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/v1/unit/delete/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"unit",
								"delete",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "amyphpzv9inobdo3x1dfu18p",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/unit/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"unit",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "amyphpzv9inobdo3x1dfu18p",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/unit/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"unit",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "amyphpzv9inobdo3x1dfu18p",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with an unauthorized message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/unit/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"unit",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "amyphpzv9inobdo3x1dfu18p",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a forbidden message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/unit/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"unit",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "amyphpzv9inobdo3x1dfu18p",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a conflict error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/unit/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"unit",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "amyphpzv9inobdo3x1dfu18p",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"in\",\n    \"issues\": [\n      {\n        \"message\": \"Excepteur enim\",\n        \"path\": [\n          \"commodo amet\",\n          \"consectetur est ad in eu\"\n        ]\n      },\n      {\n        \"message\": \"mollit reprehenderit\",\n        \"path\": [\n          \"ex in\",\n          \"deserunt cillum est dolore laboris\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{clerk_jwt_test}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		}
	]
}