{
	"info": {
		"_postman_id": "e9909dd2-26d2-4108-92b2-35378d3f64cc",
		"name": "Real Estate API Demo",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "3350677"
	},
	"item": [
		{
			"name": "home",
			"item": [
				{
					"name": "/",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[GET]::/ - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[GET]::/ - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[GET]::/ - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"message\":{\"type\":\"string\"}},\"required\":[\"message\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/ - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								""
							]
						}
					},
					"response": [
						{
							"name": "Responds with a message",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"sunt proident\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "search",
			"item": [
				{
					"name": "/search",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[POST]::/search - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[POST]::/search - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[POST]::/search - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"propertyId\":{\"type\":\"string\"},\"rent\":{\"type\":\"number\"},\"immediate\":{\"type\":\"number\"},\"availableDate\":{\"type\":\"string\"},\"shortterm\":{\"type\":\"number\"},\"longterm\":{\"type\":\"number\"},\"furnished\":{\"type\":\"number\"},\"heat\":{\"type\":\"number\"},\"water\":{\"type\":\"number\"},\"electricity\":{\"type\":\"number\"},\"internet\":{\"type\":\"number\"},\"television\":{\"type\":\"number\"},\"bedroom\":{\"type\":\"string\"},\"bathroom\":{\"type\":\"string\"},\"listingId\":{\"type\":\"number\"},\"address\":{\"type\":\"string\"},\"community\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"},\"smoking\":{\"type\":\"number\"},\"cats\":{\"type\":\"number\"},\"dogs\":{\"type\":\"number\"},\"parking\":{\"type\":\"string\"},\"feature\":{\"type\":\"string\"},\"imageId\":{\"type\":\"string\"},\"latitude\":{\"type\":\"string\"},\"longitude\":{\"type\":\"string\"}},\"required\":[\"id\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/search - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"and\": [\n    [\n      \"between\",\n      \"rent\",\n      1000,\n      2000\n    ],\n    [\n      \"like\",\n      \"address\",\n      \"Crescent\"\n    ],\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"smoking\",\n          1\n        ],\n        [\n          \"eq\",\n          \"cats\",\n          1\n        ],\n        [\n          \"eq\",\n          \"dogs\",\n          1\n        ]\n      ]\n    ],\n    [\n      \"aroundLatLng\",\n      50.9573828,\n      -114.084153,\n      1000\n    ]\n  ],\n  \"fields\": [\n    \"listingId\",\n    \"propertyId\",\n    \"rent\",\n    \"immediate\",\n    \"imageId\",\n    \"smoking\",\n    \"cats\",\n    \"dogs\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/search",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"search"
							],
							"query": [
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "cursor",
									"value": "abqdj6xe8puto1j83soz3bml",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with an array of property unit objects. If no filters are used, all property units are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"between\",\n      \"rent\",\n      1000,\n      2000\n    ],\n    [\n      \"like\",\n      \"address\",\n      \"Crescent\"\n    ],\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"smoking\",\n          1\n        ],\n        [\n          \"eq\",\n          \"cats\",\n          1\n        ],\n        [\n          \"eq\",\n          \"dogs\",\n          1\n        ]\n      ]\n    ],\n    [\n      \"aroundLatLng\",\n      50.9573828,\n      -114.084153,\n      1000\n    ]\n  ],\n  \"fields\": [\n    \"listingId\",\n    \"propertyId\",\n    \"rent\",\n    \"immediate\",\n    \"imageId\",\n    \"smoking\",\n    \"cats\",\n    \"dogs\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/search?limit=10&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"reprehenderit fugiat qui eu\",\n      \"propertyId\": \"dolor adipisicing cupidatat pariatur\",\n      \"rent\": -35062453.60038523,\n      \"immediate\": 62552601.1386424,\n      \"availableDate\": \"ut\",\n      \"shortterm\": -20249139.09704283,\n      \"longterm\": 23859345.271268934,\n      \"furnished\": -31852616.481587097,\n      \"heat\": 58442733.50297317,\n      \"water\": 39742553.02373123,\n      \"electricity\": 72240946.62088838,\n      \"internet\": -90494914.2462144,\n      \"television\": -64513289.86324083,\n      \"bedroom\": \"elit aliquip tempor\",\n      \"bathroom\": \"Duis reprehenderit sunt\",\n      \"listingId\": -16405749.578685343,\n      \"address\": \"quis incididunt consequat cillum\",\n      \"community\": \"deserunt\",\n      \"type\": \"nisi labore exercitation ipsum anim\",\n      \"smoking\": -76735586.2739239,\n      \"cats\": 52575400.876268,\n      \"dogs\": 55941807.70656982,\n      \"parking\": \"tempor velit\",\n      \"feature\": \"esse minim quis eiusmod\",\n      \"imageId\": \"incididunt et\",\n      \"latitude\": \"deserunt et irure reprehenderit magna\",\n      \"longitude\": \"sit mollit minim anim\"\n    },\n    {\n      \"id\": \"eu esse\",\n      \"propertyId\": \"Duis fugiat nisi incididunt\",\n      \"rent\": -82006875.63533062,\n      \"immediate\": -5281422.87347886,\n      \"availableDate\": \"in repreh\",\n      \"shortterm\": 57107919.40672153,\n      \"longterm\": -63643605.30879551,\n      \"furnished\": -71843990.08883902,\n      \"heat\": 67945385.83498362,\n      \"water\": -24076040.636125207,\n      \"electricity\": -60495048.464983456,\n      \"internet\": 11461042.203139275,\n      \"television\": -39744159.28612865,\n      \"bedroom\": \"Ut esse minim\",\n      \"bathroom\": \"minim sunt incididunt laboris\",\n      \"listingId\": 48604513.80921984,\n      \"address\": \"laborum commodo nisi\",\n      \"community\": \"dolore aute ut\",\n      \"type\": \"ut\",\n      \"smoking\": -89786287.64882503,\n      \"cats\": -70425449.36999655,\n      \"dogs\": 35813750.2103439,\n      \"parking\": \"amet in eu\",\n      \"feature\": \"proident minim\",\n      \"imageId\": \"ea anim occaecat minim et\",\n      \"latitude\": \"s\",\n      \"longitude\": \"Ut anim non Duis in\"\n    }\n  ]\n}"
						},
						{
							"name": "Responds with a bad request error object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"between\",\n      \"rent\",\n      1000,\n      2000\n    ],\n    [\n      \"like\",\n      \"address\",\n      \"Crescent\"\n    ],\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"smoking\",\n          1\n        ],\n        [\n          \"eq\",\n          \"cats\",\n          1\n        ],\n        [\n          \"eq\",\n          \"dogs\",\n          1\n        ]\n      ]\n    ],\n    [\n      \"aroundLatLng\",\n      50.9573828,\n      -114.084153,\n      1000\n    ]\n  ],\n  \"fields\": [\n    \"listingId\",\n    \"propertyId\",\n    \"rent\",\n    \"immediate\",\n    \"imageId\",\n    \"smoking\",\n    \"cats\",\n    \"dogs\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/search?limit=10&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "bathroom",
			"item": [
				{
					"name": "/bathroom/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[POST]::/bathroom/list - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[POST]::/bathroom/list - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[POST]::/bathroom/list - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"order\":{\"type\":\"number\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"order\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/bathroom/list - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/bathroom/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bathroom",
								"list"
							],
							"query": [
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "id-asc",
									"disabled": true
								},
								{
									"key": "cursor",
									"value": "abqdj6xe8puto1j83soz3bml",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with an array of bathroom objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/bathroom/list?limit=10&orderBy=id-asc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bathroom",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "id-asc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"pariatur Duis sed\",\n      \"name\": \"eu\",\n      \"order\": 72262992.05402076,\n      \"createdAt\": \"voluptate dolore velit\",\n      \"updatedAt\": \"fugiat consectetur\"\n    },\n    {\n      \"id\": \"nostrud ex\",\n      \"name\": \"occaecat deserunt\",\n      \"order\": 35323093.63463479,\n      \"createdAt\": \"et do labore\",\n      \"updatedAt\": \"pariatur\"\n    }\n  ]\n}"
						},
						{
							"name": "Responds with a bad request error object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/bathroom/list?limit=10&orderBy=id-asc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bathroom",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "id-asc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/bathroom/create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/bathroom/create - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/bathroom/create - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/bathroom/create - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/bathroom/create - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/bathroom/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bathroom",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/bathroom/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bathroom",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sit sint voluptate aute\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/bathroom/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bathroom",
										"create"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/bathroom/update/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[PUT]::/bathroom/update/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[PUT]::/bathroom/update/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[PUT]::/bathroom/update/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[PUT]::/bathroom/update/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"order\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/bathroom/update/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bathroom",
								"update",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "qae4cp7xnotk3wh26dkpp7y7",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with the id of the updated bathroom.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/bathroom/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bathroom",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "qae4cp7xnotk3wh26dkpp7y7",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sit sint voluptate aute\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/bathroom/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bathroom",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "qae4cp7xnotk3wh26dkpp7y7",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/bathroom/delete/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[DELETE]::/bathroom/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[DELETE]::/bathroom/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[DELETE]::/bathroom/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/bathroom/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bathroom/delete/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bathroom",
								"delete",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "qae4cp7xnotk3wh26dkpp7y7",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bathroom/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bathroom",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "qae4cp7xnotk3wh26dkpp7y7",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bathroom/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bathroom",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "qae4cp7xnotk3wh26dkpp7y7",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a conflict error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bathroom/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bathroom",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "qae4cp7xnotk3wh26dkpp7y7",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "bedroom",
			"item": [
				{
					"name": "/bedroom/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[POST]::/bedroom/list - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[POST]::/bedroom/list - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[POST]::/bedroom/list - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"order\":{\"type\":\"number\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"order\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/bedroom/list - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/bedroom/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bedroom",
								"list"
							],
							"query": [
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "id-asc",
									"disabled": true
								},
								{
									"key": "cursor",
									"value": "abqdj6xe8puto1j83soz3bml",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with an array of bedroom objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/bedroom/list?limit=10&orderBy=id-asc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bedroom",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "id-asc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"pariatur Duis sed\",\n      \"name\": \"eu\",\n      \"order\": 72262992.05402076,\n      \"createdAt\": \"voluptate dolore velit\",\n      \"updatedAt\": \"fugiat consectetur\"\n    },\n    {\n      \"id\": \"nostrud ex\",\n      \"name\": \"occaecat deserunt\",\n      \"order\": 35323093.63463479,\n      \"createdAt\": \"et do labore\",\n      \"updatedAt\": \"pariatur\"\n    }\n  ]\n}"
						},
						{
							"name": "Responds with a bad request error object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/bedroom/list?limit=10&orderBy=id-asc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bedroom",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "id-asc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/bedroom/create",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[POST]::/bedroom/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[POST]::/bedroom/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[POST]::/bedroom/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/bedroom/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/bedroom/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bedroom",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/bedroom/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bedroom",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sit sint voluptate aute\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/bedroom/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bedroom",
										"create"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/bedroom/update/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[PUT]::/bedroom/update/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[PUT]::/bedroom/update/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[PUT]::/bedroom/update/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[PUT]::/bedroom/update/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"order\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/bedroom/update/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bedroom",
								"update",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "zjggk1ve17r7jmpq8dtmbjyw",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with the id of the updated bedroom.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/bedroom/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bedroom",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "zjggk1ve17r7jmpq8dtmbjyw",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sit sint voluptate aute\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/bedroom/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bedroom",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "zjggk1ve17r7jmpq8dtmbjyw",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/bedroom/delete/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[DELETE]::/bedroom/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[DELETE]::/bedroom/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[DELETE]::/bedroom/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/bedroom/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/bedroom/delete/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bedroom",
								"delete",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "zjggk1ve17r7jmpq8dtmbjyw",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bedroom/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bedroom",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "zjggk1ve17r7jmpq8dtmbjyw",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bedroom/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bedroom",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "zjggk1ve17r7jmpq8dtmbjyw",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a conflict error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bedroom/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bedroom",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "zjggk1ve17r7jmpq8dtmbjyw",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "buildingFeature",
			"item": [
				{
					"name": "/building-feature/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[POST]::/building-feature/list - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[POST]::/building-feature/list - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[POST]::/building-feature/list - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"order\":{\"type\":\"number\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"order\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/building-feature/list - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/building-feature/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"building-feature",
								"list"
							],
							"query": [
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "id-asc",
									"disabled": true
								},
								{
									"key": "cursor",
									"value": "abqdj6xe8puto1j83soz3bml",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with an array of buildingFeature objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/building-feature/list?limit=10&orderBy=id-asc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"building-feature",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "id-asc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"pariatur Duis sed\",\n      \"name\": \"eu\",\n      \"order\": 72262992.05402076,\n      \"createdAt\": \"voluptate dolore velit\",\n      \"updatedAt\": \"fugiat consectetur\"\n    },\n    {\n      \"id\": \"nostrud ex\",\n      \"name\": \"occaecat deserunt\",\n      \"order\": 35323093.63463479,\n      \"createdAt\": \"et do labore\",\n      \"updatedAt\": \"pariatur\"\n    }\n  ]\n}"
						},
						{
							"name": "Responds with a bad request error object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/building-feature/list?limit=10&orderBy=id-asc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"building-feature",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "id-asc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/building-feature/create",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[POST]::/building-feature/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[POST]::/building-feature/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[POST]::/building-feature/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/building-feature/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/building-feature/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"building-feature",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/building-feature/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"building-feature",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sit sint voluptate aute\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/building-feature/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"building-feature",
										"create"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/building-feature/update/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[PUT]::/building-feature/update/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[PUT]::/building-feature/update/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[PUT]::/building-feature/update/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[PUT]::/building-feature/update/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"order\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/building-feature/update/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"building-feature",
								"update",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "zsm6fam0k05blkaeoit8x09a",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with the id of the updated buildingFeature.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/building-feature/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"building-feature",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "zsm6fam0k05blkaeoit8x09a",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sit sint voluptate aute\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/building-feature/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"building-feature",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "zsm6fam0k05blkaeoit8x09a",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/building-feature/delete/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[DELETE]::/building-feature/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[DELETE]::/building-feature/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[DELETE]::/building-feature/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/building-feature/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/building-feature/delete/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"building-feature",
								"delete",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "zsm6fam0k05blkaeoit8x09a",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/building-feature/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"building-feature",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "zsm6fam0k05blkaeoit8x09a",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/building-feature/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"building-feature",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "zsm6fam0k05blkaeoit8x09a",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a conflict error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/building-feature/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"building-feature",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "zsm6fam0k05blkaeoit8x09a",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "buildingFeatureToProperty",
			"item": [
				{
					"name": "/building-feature-to-property/features-by-item/:itemId",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[GET]::/building-feature-to-property/features-by-item/:itemId - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[GET]::/building-feature-to-property/features-by-item/:itemId - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[GET]::/building-feature-to-property/features-by-item/:itemId - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"buildingFeatureId\":{\"type\":\"string\"},\"buildingFeature\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]}},\"required\":[\"buildingFeatureId\",\"buildingFeature\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/building-feature-to-property/features-by-item/:itemId - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/building-feature-to-property/features-by-item/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"building-feature-to-property",
								"features-by-item",
								":itemId"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "hdsyi7gw3n77jrngcck1x33y",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/building-feature-to-property/features-by-item/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"building-feature-to-property",
										"features-by-item",
										":itemId"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"buildingFeatureId\": \"cupidatat est ullamco\",\n      \"buildingFeature\": {\n        \"name\": \"velit\"\n      }\n    },\n    {\n      \"buildingFeatureId\": \"anim ad\",\n      \"buildingFeature\": {\n        \"name\": \"ut consectetur in\"\n      }\n    }\n  ]\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/building-feature-to-property/features-by-item/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"building-feature-to-property",
										"features-by-item",
										":itemId"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/building-feature-to-property/create",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[POST]::/building-feature-to-property/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[POST]::/building-feature-to-property/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[POST]::/building-feature-to-property/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/building-feature-to-property/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"featureId\": \"zsm6fam0k05blkaeoit8x09a\",\n  \"itemId\": \"hdsyi7gw3n77jrngcck1x33y\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/building-feature-to-property/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"building-feature-to-property",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"featureId\": \"zsm6fam0k05blkaeoit8x09a\",\n  \"itemId\": \"hdsyi7gw3n77jrngcck1x33y\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/building-feature-to-property/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"building-feature-to-property",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"featureId\": \"zsm6fam0k05blkaeoit8x09a\",\n  \"itemId\": \"hdsyi7gw3n77jrngcck1x33y\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/building-feature-to-property/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"building-feature-to-property",
										"create"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/building-feature-to-property/delete/:featureId/:itemId",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[DELETE]::/building-feature-to-property/delete/:featureId/:itemId - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[DELETE]::/building-feature-to-property/delete/:featureId/:itemId - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[DELETE]::/building-feature-to-property/delete/:featureId/:itemId - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/building-feature-to-property/delete/:featureId/:itemId - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/building-feature-to-property/delete/:featureId/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"building-feature-to-property",
								"delete",
								":featureId",
								":itemId"
							],
							"variable": [
								{
									"key": "featureId",
									"value": "zsm6fam0k05blkaeoit8x09a",
									"description": "(Required) "
								},
								{
									"key": "itemId",
									"value": "hdsyi7gw3n77jrngcck1x33y",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/building-feature-to-property/delete/:featureId/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"building-feature-to-property",
										"delete",
										":featureId",
										":itemId"
									],
									"variable": [
										{
											"key": "featureId",
											"value": "zsm6fam0k05blkaeoit8x09a",
											"description": "(Required) "
										},
										{
											"key": "itemId",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/building-feature-to-property/delete/:featureId/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"building-feature-to-property",
										"delete",
										":featureId",
										":itemId"
									],
									"variable": [
										{
											"key": "featureId",
											"value": "zsm6fam0k05blkaeoit8x09a",
											"description": "(Required) "
										},
										{
											"key": "itemId",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "city",
			"item": [
				{
					"name": "/city/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/city/list - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/city/list - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/city/list - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"latitude\":{\"type\":\"string\"},\"longitude\":{\"type\":\"string\"},\"regionId\":{\"type\":\"string\",\"maxLength\":128},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"latitude\",\"longitude\",\"regionId\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/city/list - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\"eq\", \"name\", \"Toronto\"],\n        [\"eq\", \"name\", \"Ottawa\"],\n        [\"eq\", \"name\", \"Mississauga\"]\n      ]\n    ],\n    [\"eq\", \"regionId\", \"kj3nrb5rv094v8ns5ptz1jhc\"]\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/city/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"city",
								"list"
							],
							"query": [
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "latitude-desc",
									"disabled": true
								},
								{
									"key": "cursor",
									"value": "abqdj6xe8puto1j83soz3bml",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with an array of city objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        \"eq\",\n        \"name\",\n        \"Toronto\"\n      ],\n      [\n        \"eq\",\n        \"name\",\n        \"Ottawa\"\n      ],\n      [\n        \"eq\",\n        \"name\",\n        \"Mississauga\"\n      ]\n    ],\n    [\n      \"eq\",\n      \"regionId\",\n      \"kj3nrb5rv094v8ns5ptz1jhc\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/city/list?limit=10&orderBy=latitude-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"city",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "latitude-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"deserunt sint do enim\",\n      \"name\": \"v\",\n      \"latitude\": \"ut sed non dolore\",\n      \"longitude\": \"ipsum Excepteur\",\n      \"regionId\": \"anim enim officia\",\n      \"createdAt\": \"sed dolore consequat\",\n      \"updatedAt\": \"ut non tempor in\"\n    },\n    {\n      \"id\": \"officia ipsum dolor\",\n      \"name\": \"Duis\",\n      \"latitude\": \"nisi dolor\",\n      \"longitude\": \"magna sit ut irure\",\n      \"regionId\": \"in nisi\",\n      \"createdAt\": \"ullamco nostrud\",\n      \"updatedAt\": \"voluptate\"\n    }\n  ]\n}"
						},
						{
							"name": "Responds with a bad request error object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        \"eq\",\n        \"name\",\n        \"Toronto\"\n      ],\n      [\n        \"eq\",\n        \"name\",\n        \"Ottawa\"\n      ],\n      [\n        \"eq\",\n        \"name\",\n        \"Mississauga\"\n      ]\n    ],\n    [\n      \"eq\",\n      \"regionId\",\n      \"kj3nrb5rv094v8ns5ptz1jhc\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/city/list?limit=10&orderBy=latitude-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"city",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "latitude-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/city/create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/city/create - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/city/create - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/city/create - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/city/create - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Toronto\",\n  \"regionId\": \"kj3nrb5rv094v8ns5ptz1jhc\",\n  \"latitude\": \"43.741667\",\n  \"longitude\": \"-79.373333\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/city/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"city",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Toronto\",\n  \"regionId\": \"atgl5rbiijouz9695d01vpne\",\n  \"latitude\": \"43.741667\",\n  \"longitude\": \"-79.373333\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/city/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"city",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sit sint voluptate aute\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Toronto\",\n  \"regionId\": \"atgl5rbiijouz9695d01vpne\",\n  \"latitude\": \"43.741667\",\n  \"longitude\": \"-79.373333\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/city/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"city",
										"create"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/city/update/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[PUT]::/city/update/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[PUT]::/city/update/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[PUT]::/city/update/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[PUT]::/city/update/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"latitude\": \"49.2827\",\n  \"longitude\": \"-123.1207\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/city/update/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"city",
								"update",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "dl7r7ezrt909p6bmct6avl9l",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with the id of the updated city.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Vancouver\",\n  \"regionId\": \"atgl5rbiijouz9695d01vpne\",\n  \"latitude\": \"49.2827\",\n  \"longitude\": \"-123.1207\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/city/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"city",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "dl7r7ezrt909p6bmct6avl9l",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sit sint voluptate aute\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Vancouver\",\n  \"regionId\": \"atgl5rbiijouz9695d01vpne\",\n  \"latitude\": \"49.2827\",\n  \"longitude\": \"-123.1207\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/city/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"city",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "dl7r7ezrt909p6bmct6avl9l",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/city/delete/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[DELETE]::/city/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[DELETE]::/city/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[DELETE]::/city/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/city/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/city/delete/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"city",
								"delete",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "dl7r7ezrt909p6bmct6avl9l",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/city/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"city",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "dl7r7ezrt909p6bmct6avl9l",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/city/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"city",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "dl7r7ezrt909p6bmct6avl9l",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a conflict error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/city/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"city",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "dl7r7ezrt909p6bmct6avl9l",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "community",
			"item": [
				{
					"name": "/community/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[GET]::/community/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[GET]::/community/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[GET]::/community/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"score\":{\"type\":[\"integer\",\"null\"]},\"imageUrl\":{\"type\":[\"string\",\"null\"]},\"quadrant\":{\"type\":[\"string\",\"null\"]},\"sector\":{\"type\":[\"string\",\"null\"]},\"ward\":{\"type\":[\"string\",\"null\"]},\"population\":{\"type\":[\"integer\",\"null\"]},\"dwellings\":{\"type\":[\"integer\",\"null\"]},\"usedForRenting\":{\"type\":[\"string\",\"null\"]},\"area\":{\"type\":[\"string\",\"null\"]},\"density\":{\"type\":[\"string\",\"null\"]},\"averageIncome\":{\"type\":[\"integer\",\"null\"]},\"lowIncome\":{\"type\":[\"string\",\"null\"]},\"immigrants\":{\"type\":[\"string\",\"null\"]},\"elevation\":{\"type\":[\"integer\",\"null\"]},\"established\":{\"type\":[\"integer\",\"null\"]},\"description\":{\"type\":[\"string\",\"null\"]},\"latitude\":{\"type\":\"string\"},\"longitude\":{\"type\":\"string\"},\"city\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]},\"communityFeatureToCommunity\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"communityFeature\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]}},\"required\":[\"communityFeature\"]}}},\"required\":[\"id\",\"name\",\"score\",\"imageUrl\",\"quadrant\",\"sector\",\"ward\",\"population\",\"dwellings\",\"usedForRenting\",\"area\",\"density\",\"averageIncome\",\"lowIncome\",\"immigrants\",\"elevation\",\"established\",\"description\",\"latitude\",\"longitude\",\"city\",\"communityFeatureToCommunity\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/community/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/community/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"community",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "icj3bimn4dg5v1yeu7i2frzq",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/community/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"community",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "icj3bimn4dg5v1yeu7i2frzq",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"nisi\",\n    \"name\": \"exercitation irur\",\n    \"score\": -40264961,\n    \"imageUrl\": \"velit\",\n    \"quadrant\": \"irure in nostrud cillum\",\n    \"sector\": \"sit sed qui Ut\",\n    \"ward\": \"ut sit\",\n    \"population\": 30438218,\n    \"dwellings\": -25706933,\n    \"usedForRenting\": \"ad dolore fugiat\",\n    \"area\": \"amet\",\n    \"density\": \"nulla\",\n    \"averageIncome\": 21747322,\n    \"lowIncome\": \"sint qui enim\",\n    \"immigrants\": \"incididunt nostrud\",\n    \"elevation\": -70576022,\n    \"established\": -86045385,\n    \"description\": \"Lorem ea Excepteur irure\",\n    \"latitude\": \"in\",\n    \"longitude\": \"elit mollit proident\",\n    \"city\": {\n      \"name\": \"id\"\n    },\n    \"communityFeatureToCommunity\": [\n      {\n        \"communityFeature\": {\n          \"name\": \"ut ad id dolore\"\n        }\n      },\n      {\n        \"communityFeature\": {\n          \"name\": \"sunt mollit\"\n        }\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/community/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"community",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "icj3bimn4dg5v1yeu7i2frzq",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/community/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[POST]::/community/list - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[POST]::/community/list - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[POST]::/community/list - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"score\":{\"type\":[\"number\",\"null\"]},\"imageUrl\":{\"type\":[\"string\",\"null\"],\"maxLength\":256},\"quadrant\":{\"type\":[\"string\",\"null\"],\"maxLength\":32},\"sector\":{\"type\":[\"string\",\"null\"],\"maxLength\":128},\"ward\":{\"type\":[\"string\",\"null\"],\"maxLength\":64},\"population\":{\"type\":[\"number\",\"null\"]},\"dwellings\":{\"type\":[\"number\",\"null\"]},\"usedForRenting\":{\"type\":[\"string\",\"null\"]},\"area\":{\"type\":[\"string\",\"null\"]},\"density\":{\"type\":[\"string\",\"null\"]},\"averageIncome\":{\"type\":[\"number\",\"null\"]},\"lowIncome\":{\"type\":[\"string\",\"null\"]},\"immigrants\":{\"type\":[\"string\",\"null\"]},\"elevation\":{\"type\":[\"number\",\"null\"]},\"established\":{\"type\":[\"number\",\"null\"]},\"description\":{\"type\":[\"string\",\"null\"]},\"latitude\":{\"type\":\"string\"},\"longitude\":{\"type\":\"string\"},\"cityId\":{\"type\":\"string\",\"maxLength\":128},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"score\",\"imageUrl\",\"quadrant\",\"sector\",\"ward\",\"population\",\"dwellings\",\"usedForRenting\",\"area\",\"density\",\"averageIncome\",\"lowIncome\",\"immigrants\",\"elevation\",\"established\",\"description\",\"latitude\",\"longitude\",\"cityId\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/community/list - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Community name 1\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Community name 1\"\n        ]\n      ]\n    ],\n    [\n      \"gt\",\n      \"area\",\n      3\n    ],\n    [\n      \"lt\",\n      \"population\",\n      2000\n    ],\n    [\n      \"eq\",\n      \"quadrant\",\n      \"NW\"\n    ]\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/community/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"community",
								"list"
							],
							"query": [
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "latitude-asc",
									"disabled": true
								},
								{
									"key": "cursor",
									"value": "abqdj6xe8puto1j83soz3bml",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with an array of community objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Community name 1\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Community name 1\"\n        ]\n      ]\n    ],\n    [\n      \"gt\",\n      \"area\",\n      3\n    ],\n    [\n      \"lt\",\n      \"population\",\n      2000\n    ],\n    [\n      \"eq\",\n      \"quadrant\",\n      \"NW\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/community/list?limit=10&orderBy=latitude-asc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"community",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "latitude-asc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"culpa veniam\",\n      \"name\": \"Duis consequat pariatur\",\n      \"score\": 72765549.01051822,\n      \"imageUrl\": \"qui magna sed\",\n      \"quadrant\": \"dolor laborum\",\n      \"sector\": \"dolore aute\",\n      \"ward\": \"culpa Lorem ex mollit\",\n      \"population\": -55545870.442166075,\n      \"dwellings\": -20064218.635131776,\n      \"usedForRenting\": \"ipsum proident culpa minim\",\n      \"area\": \"sunt consequat quis\",\n      \"density\": \"aute nisi minim sunt est\",\n      \"averageIncome\": -75101625.94786936,\n      \"lowIncome\": \"quis nostrud amet veniam eiusmod\",\n      \"immigrants\": \"labore officia dolor\",\n      \"elevation\": -58963071.58651286,\n      \"established\": 12028620.010875806,\n      \"description\": \"labore\",\n      \"latitude\": \"officia paria\",\n      \"longitude\": \"mollit nisi Excepteur\",\n      \"cityId\": \"cupidatat proident est culpa\",\n      \"createdAt\": \"sunt ullamco\",\n      \"updatedAt\": \"fugiat elit\"\n    },\n    {\n      \"id\": \"cillum magna est velit\",\n      \"name\": \"aute minim id in\",\n      \"score\": 1996257.831043914,\n      \"imageUrl\": \"esse et\",\n      \"quadrant\": \"minim cillum culpa\",\n      \"sector\": \"ut nulla eu\",\n      \"ward\": \"proident veniam voluptate q\",\n      \"population\": 44567041.54950991,\n      \"dwellings\": -25221562.723723426,\n      \"usedForRenting\": \"reprehenderit\",\n      \"area\": \"aute\",\n      \"density\": \"do\",\n      \"averageIncome\": -32880693.422538295,\n      \"lowIncome\": \"eu\",\n      \"immigrants\": \"aliquip sunt pariatur\",\n      \"elevation\": -98916673.03669162,\n      \"established\": -54040774.33846925,\n      \"description\": \"eiusmod pariatur dolor\",\n      \"latitude\": \"deserunt ex id\",\n      \"longitude\": \"ad nisi anim pariatur sint\",\n      \"cityId\": \"dolor\",\n      \"createdAt\": \"consequat\",\n      \"updatedAt\": \"ut anim labore\"\n    }\n  ]\n}"
						},
						{
							"name": "Responds with a bad request error object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Community name 1\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Community name 1\"\n        ]\n      ]\n    ],\n    [\n      \"gt\",\n      \"area\",\n      3\n    ],\n    [\n      \"lt\",\n      \"population\",\n      2000\n    ],\n    [\n      \"eq\",\n      \"quadrant\",\n      \"NW\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/community/list?limit=10&orderBy=latitude-asc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"community",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "latitude-asc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/community/create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/community/create - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/community/create - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/community/create - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/community/create - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Community name\",\n  \"cityId\": \"dl7r7ezrt909p6bmct6avl9l\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/community/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"community",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Community name\",\n  \"cityId\": \"a5ug1fdwkkc4byl1uw9d7cqo\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/community/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"community",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sit sint voluptate aute\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Community name\",\n  \"cityId\": \"a5ug1fdwkkc4byl1uw9d7cqo\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/community/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"community",
										"create"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/community/update/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[PUT]::/community/update/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[PUT]::/community/update/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[PUT]::/community/update/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[PUT]::/community/update/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\",\n  \"imageUrl\": \"https://example.com/image.jpg\",\n  \"quadrant\": \"NW\",\n  \"sector\": \"SE\",\n  \"ward\": \"Ward 1\",\n  \"population\": 1000,\n  \"dwellings\": 500,\n  \"usedForRenting\": 30.45,\n  \"area\": 3.2,\n  \"density\": 10.5,\n  \"averageIncome\": 50000\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/community/update/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"community",
								"update",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "icj3bimn4dg5v1yeu7i2frzq",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with the id of the updated community.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Community name\",\n  \"cityId\": \"a5ug1fdwkkc4byl1uw9d7cqo\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\",\n  \"imageUrl\": \"https://example.com/image.jpg\",\n  \"quadrant\": \"NW\",\n  \"sector\": \"SE\",\n  \"ward\": \"Ward 1\",\n  \"population\": 1000,\n  \"dwellings\": 500,\n  \"usedForRenting\": 30.45,\n  \"area\": 3.2,\n  \"density\": 10.5,\n  \"averageIncome\": 50000\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/community/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"community",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "icj3bimn4dg5v1yeu7i2frzq",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sit sint voluptate aute\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Community name\",\n  \"cityId\": \"a5ug1fdwkkc4byl1uw9d7cqo\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\",\n  \"imageUrl\": \"https://example.com/image.jpg\",\n  \"quadrant\": \"NW\",\n  \"sector\": \"SE\",\n  \"ward\": \"Ward 1\",\n  \"population\": 1000,\n  \"dwellings\": 500,\n  \"usedForRenting\": 30.45,\n  \"area\": 3.2,\n  \"density\": 10.5,\n  \"averageIncome\": 50000\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/community/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"community",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "icj3bimn4dg5v1yeu7i2frzq",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/community/delete/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[DELETE]::/community/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[DELETE]::/community/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[DELETE]::/community/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/community/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/community/delete/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"community",
								"delete",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "icj3bimn4dg5v1yeu7i2frzq",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/community/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"community",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "icj3bimn4dg5v1yeu7i2frzq",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/community/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"community",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "icj3bimn4dg5v1yeu7i2frzq",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a conflict error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/community/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"community",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "icj3bimn4dg5v1yeu7i2frzq",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "communityFeature",
			"item": [
				{
					"name": "/community-feature/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[POST]::/community-feature/list - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[POST]::/community-feature/list - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[POST]::/community-feature/list - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"order\":{\"type\":\"number\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"order\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/community-feature/list - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/community-feature/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"community-feature",
								"list"
							],
							"query": [
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "id-asc",
									"disabled": true
								},
								{
									"key": "cursor",
									"value": "abqdj6xe8puto1j83soz3bml",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with an array of communityFeature objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/community-feature/list?limit=10&orderBy=id-asc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"community-feature",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "id-asc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"pariatur Duis sed\",\n      \"name\": \"eu\",\n      \"order\": 72262992.05402076,\n      \"createdAt\": \"voluptate dolore velit\",\n      \"updatedAt\": \"fugiat consectetur\"\n    },\n    {\n      \"id\": \"nostrud ex\",\n      \"name\": \"occaecat deserunt\",\n      \"order\": 35323093.63463479,\n      \"createdAt\": \"et do labore\",\n      \"updatedAt\": \"pariatur\"\n    }\n  ]\n}"
						},
						{
							"name": "Responds with a bad request error object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/community-feature/list?limit=10&orderBy=id-asc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"community-feature",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "id-asc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/community-feature/create",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[POST]::/community-feature/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[POST]::/community-feature/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[POST]::/community-feature/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/community-feature/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/community-feature/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"community-feature",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/community-feature/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"community-feature",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sit sint voluptate aute\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/community-feature/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"community-feature",
										"create"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/community-feature/update/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[PUT]::/community-feature/update/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[PUT]::/community-feature/update/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[PUT]::/community-feature/update/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[PUT]::/community-feature/update/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"order\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/community-feature/update/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"community-feature",
								"update",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "cwswfax9454xpaxcym2la262",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with the id of the updated communityFeature.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/community-feature/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"community-feature",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "cwswfax9454xpaxcym2la262",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sit sint voluptate aute\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/community-feature/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"community-feature",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "cwswfax9454xpaxcym2la262",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/community-feature/delete/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[DELETE]::/community-feature/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[DELETE]::/community-feature/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[DELETE]::/community-feature/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/community-feature/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/community-feature/delete/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"community-feature",
								"delete",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "cwswfax9454xpaxcym2la262",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/community-feature/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"community-feature",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "cwswfax9454xpaxcym2la262",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/community-feature/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"community-feature",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "cwswfax9454xpaxcym2la262",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a conflict error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/community-feature/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"community-feature",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "cwswfax9454xpaxcym2la262",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "communityFeatureToCommunity",
			"item": [
				{
					"name": "/community-feature-to-community/features-by-item/:itemId",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[GET]::/community-feature-to-community/features-by-item/:itemId - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[GET]::/community-feature-to-community/features-by-item/:itemId - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[GET]::/community-feature-to-community/features-by-item/:itemId - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"communityFeatureId\":{\"type\":\"string\"},\"communityFeature\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]}},\"required\":[\"communityFeatureId\",\"communityFeature\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/community-feature-to-community/features-by-item/:itemId - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/community-feature-to-community/features-by-item/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"community-feature-to-community",
								"features-by-item",
								":itemId"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "icj3bimn4dg5v1yeu7i2frzq",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/community-feature-to-community/features-by-item/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"community-feature-to-community",
										"features-by-item",
										":itemId"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "icj3bimn4dg5v1yeu7i2frzq",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"communityFeatureId\": \"voluptate\",\n      \"communityFeature\": {\n        \"name\": \"Duis\"\n      }\n    },\n    {\n      \"communityFeatureId\": \"\",\n      \"communityFeature\": {\n        \"name\": \"reprehenderit enim veniam\"\n      }\n    }\n  ]\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/community-feature-to-community/features-by-item/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"community-feature-to-community",
										"features-by-item",
										":itemId"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "icj3bimn4dg5v1yeu7i2frzq",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/community-feature-to-community/create",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[POST]::/community-feature-to-community/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[POST]::/community-feature-to-community/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[POST]::/community-feature-to-community/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/community-feature-to-community/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"featureId\": \"cwswfax9454xpaxcym2la262\",\n  \"itemId\": \"icj3bimn4dg5v1yeu7i2frzq\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/community-feature-to-community/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"community-feature-to-community",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"featureId\": \"cwswfax9454xpaxcym2la262\",\n  \"itemId\": \"icj3bimn4dg5v1yeu7i2frzq\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/community-feature-to-community/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"community-feature-to-community",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"featureId\": \"cwswfax9454xpaxcym2la262\",\n  \"itemId\": \"icj3bimn4dg5v1yeu7i2frzq\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/community-feature-to-community/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"community-feature-to-community",
										"create"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/community-feature-to-community/delete/:featureId/:itemId",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[DELETE]::/community-feature-to-community/delete/:featureId/:itemId - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[DELETE]::/community-feature-to-community/delete/:featureId/:itemId - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[DELETE]::/community-feature-to-community/delete/:featureId/:itemId - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/community-feature-to-community/delete/:featureId/:itemId - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/community-feature-to-community/delete/:featureId/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"community-feature-to-community",
								"delete",
								":featureId",
								":itemId"
							],
							"variable": [
								{
									"key": "featureId",
									"value": "cwswfax9454xpaxcym2la262",
									"description": "(Required) "
								},
								{
									"key": "itemId",
									"value": "icj3bimn4dg5v1yeu7i2frzq",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/community-feature-to-community/delete/:featureId/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"community-feature-to-community",
										"delete",
										":featureId",
										":itemId"
									],
									"variable": [
										{
											"key": "featureId",
											"value": "cwswfax9454xpaxcym2la262",
											"description": "(Required) "
										},
										{
											"key": "itemId",
											"value": "icj3bimn4dg5v1yeu7i2frzq",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/community-feature-to-community/delete/:featureId/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"community-feature-to-community",
										"delete",
										":featureId",
										":itemId"
									],
									"variable": [
										{
											"key": "featureId",
											"value": "cwswfax9454xpaxcym2la262",
											"description": "(Required) "
										},
										{
											"key": "itemId",
											"value": "icj3bimn4dg5v1yeu7i2frzq",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "feature",
			"item": [
				{
					"name": "/feature/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[POST]::/feature/list - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[POST]::/feature/list - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[POST]::/feature/list - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"order\":{\"type\":\"number\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"order\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/feature/list - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/feature/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"feature",
								"list"
							],
							"query": [
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "id-asc",
									"disabled": true
								},
								{
									"key": "cursor",
									"value": "abqdj6xe8puto1j83soz3bml",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with an array of feature objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/feature/list?limit=10&orderBy=id-asc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"feature",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "id-asc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"pariatur Duis sed\",\n      \"name\": \"eu\",\n      \"order\": 72262992.05402076,\n      \"createdAt\": \"voluptate dolore velit\",\n      \"updatedAt\": \"fugiat consectetur\"\n    },\n    {\n      \"id\": \"nostrud ex\",\n      \"name\": \"occaecat deserunt\",\n      \"order\": 35323093.63463479,\n      \"createdAt\": \"et do labore\",\n      \"updatedAt\": \"pariatur\"\n    }\n  ]\n}"
						},
						{
							"name": "Responds with a bad request error object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/feature/list?limit=10&orderBy=id-asc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"feature",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "id-asc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/feature/create",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[POST]::/feature/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[POST]::/feature/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[POST]::/feature/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/feature/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/feature/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"feature",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/feature/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"feature",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sit sint voluptate aute\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/feature/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"feature",
										"create"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/feature/update/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[PUT]::/feature/update/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[PUT]::/feature/update/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[PUT]::/feature/update/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[PUT]::/feature/update/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"order\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/feature/update/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"feature",
								"update",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "i53gzgu35snbfwuc94hsivb3",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with the id of the updated feature.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/feature/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"feature",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "i53gzgu35snbfwuc94hsivb3",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sit sint voluptate aute\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/feature/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"feature",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "i53gzgu35snbfwuc94hsivb3",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/feature/delete/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[DELETE]::/feature/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[DELETE]::/feature/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[DELETE]::/feature/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/feature/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/feature/delete/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"feature",
								"delete",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "i53gzgu35snbfwuc94hsivb3",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/feature/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"feature",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "i53gzgu35snbfwuc94hsivb3",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/feature/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"feature",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "i53gzgu35snbfwuc94hsivb3",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a conflict error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/feature/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"feature",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "i53gzgu35snbfwuc94hsivb3",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "featureToProperty",
			"item": [
				{
					"name": "/feature-to-property/features-by-item/:itemId",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[GET]::/feature-to-property/features-by-item/:itemId - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[GET]::/feature-to-property/features-by-item/:itemId - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[GET]::/feature-to-property/features-by-item/:itemId - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"featureId\":{\"type\":\"string\"},\"feature\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]}},\"required\":[\"featureId\",\"feature\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/feature-to-property/features-by-item/:itemId - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/feature-to-property/features-by-item/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"feature-to-property",
								"features-by-item",
								":itemId"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "hdsyi7gw3n77jrngcck1x33y",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/feature-to-property/features-by-item/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"feature-to-property",
										"features-by-item",
										":itemId"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"featureId\": \"Ut eu Lorem commodo\",\n      \"feature\": {\n        \"name\": \"veniam sit\"\n      }\n    },\n    {\n      \"featureId\": \"mollit magna\",\n      \"feature\": {\n        \"name\": \"Lorem\"\n      }\n    }\n  ]\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/feature-to-property/features-by-item/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"feature-to-property",
										"features-by-item",
										":itemId"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/feature-to-property/create",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[POST]::/feature-to-property/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[POST]::/feature-to-property/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[POST]::/feature-to-property/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/feature-to-property/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"featureId\": \"i53gzgu35snbfwuc94hsivb3\",\n  \"itemId\": \"hdsyi7gw3n77jrngcck1x33y\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/feature-to-property/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"feature-to-property",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"featureId\": \"i53gzgu35snbfwuc94hsivb3\",\n  \"itemId\": \"hdsyi7gw3n77jrngcck1x33y\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/feature-to-property/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"feature-to-property",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"featureId\": \"i53gzgu35snbfwuc94hsivb3\",\n  \"itemId\": \"hdsyi7gw3n77jrngcck1x33y\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/feature-to-property/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"feature-to-property",
										"create"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/feature-to-property/delete/:featureId/:itemId",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[DELETE]::/feature-to-property/delete/:featureId/:itemId - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[DELETE]::/feature-to-property/delete/:featureId/:itemId - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[DELETE]::/feature-to-property/delete/:featureId/:itemId - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/feature-to-property/delete/:featureId/:itemId - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/feature-to-property/delete/:featureId/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"feature-to-property",
								"delete",
								":featureId",
								":itemId"
							],
							"variable": [
								{
									"key": "featureId",
									"value": "i53gzgu35snbfwuc94hsivb3",
									"description": "(Required) "
								},
								{
									"key": "itemId",
									"value": "hdsyi7gw3n77jrngcck1x33y",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/feature-to-property/delete/:featureId/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"feature-to-property",
										"delete",
										":featureId",
										":itemId"
									],
									"variable": [
										{
											"key": "featureId",
											"value": "i53gzgu35snbfwuc94hsivb3",
											"description": "(Required) "
										},
										{
											"key": "itemId",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/feature-to-property/delete/:featureId/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"feature-to-property",
										"delete",
										":featureId",
										":itemId"
									],
									"variable": [
										{
											"key": "featureId",
											"value": "i53gzgu35snbfwuc94hsivb3",
											"description": "(Required) "
										},
										{
											"key": "itemId",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "floorPlan",
			"item": [
				{
					"name": "/floor-plan/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/floor-plan/list - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/floor-plan/list - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/floor-plan/list - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"propertyId\":{\"type\":\"string\",\"maxLength\":128},\"order\":{\"type\":\"number\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"propertyId\",\"order\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/floor-plan/list - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Floor Plan 1\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Floor Plan 2\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"propertyId\",\n      \"hdsyi7gw3n77jrngcck1x33y\"\n    ]\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/floor-plan/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"floor-plan",
								"list"
							],
							"query": [
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "updatedAt-desc",
									"disabled": true
								},
								{
									"key": "cursor",
									"value": "abqdj6xe8puto1j83soz3bml",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with an array of floorPlan objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        \"eq\",\n        \"name\",\n        \"Main floor\"\n      ],\n      [\n        \"eq\",\n        \"name\",\n        \"Second floor\"\n      ]\n    ],\n    [\n      \"eq\",\n      \"propertyId\",\n      \"atgl5rbiijouz9695d01vpne\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/floor-plan/list?limit=10&orderBy=updatedAt-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"floor-plan",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "updatedAt-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"cupidatat labore Lorem\",\n      \"name\": \"sunt\",\n      \"propertyId\": \"aliquip ut\",\n      \"order\": 39357088.24597478,\n      \"createdAt\": \"eiusmod officia do ut labore\",\n      \"updatedAt\": \"veniam\"\n    },\n    {\n      \"id\": \"nostrud sint ullamco\",\n      \"name\": \"consequat sed\",\n      \"propertyId\": \"consectetur ut\",\n      \"order\": 58301319.20374942,\n      \"createdAt\": \"eiusmod sint\",\n      \"updatedAt\": \"voluptate sed fugiat ut tempor\"\n    }\n  ]\n}"
						},
						{
							"name": "Responds with a bad request error object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        \"eq\",\n        \"name\",\n        \"Main floor\"\n      ],\n      [\n        \"eq\",\n        \"name\",\n        \"Second floor\"\n      ]\n    ],\n    [\n      \"eq\",\n      \"propertyId\",\n      \"atgl5rbiijouz9695d01vpne\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/floor-plan/list?limit=10&orderBy=updatedAt-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"floor-plan",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "updatedAt-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/floor-plan/create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/floor-plan/create - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/floor-plan/create - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/floor-plan/create - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/floor-plan/create - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Floor Plan 1\",\n  \"propertyId\": \"hdsyi7gw3n77jrngcck1x33y\",\n  \"order\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/floor-plan/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"floor-plan",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Floor Plan 1\",\n  \"propertyId\": \"atgl5rbiijouz9695d01vpne\",\n  \"order\": 0\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/floor-plan/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"floor-plan",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sit sint voluptate aute\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Floor Plan 1\",\n  \"propertyId\": \"atgl5rbiijouz9695d01vpne\",\n  \"order\": 0\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/floor-plan/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"floor-plan",
										"create"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/floor-plan/update/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[PUT]::/floor-plan/update/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[PUT]::/floor-plan/update/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[PUT]::/floor-plan/update/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[PUT]::/floor-plan/update/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Floor Plan 2\",\n  \"order\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/floor-plan/update/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"floor-plan",
								"update",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "fe897wto8ribvu9024zvfvxp",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with the id of the updated floorPlan.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Floor Plan 2\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/floor-plan/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"floor-plan",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "fe897wto8ribvu9024zvfvxp",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sit sint voluptate aute\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Floor Plan 2\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/floor-plan/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"floor-plan",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "fe897wto8ribvu9024zvfvxp",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/floor-plan/delete/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[DELETE]::/floor-plan/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[DELETE]::/floor-plan/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[DELETE]::/floor-plan/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/floor-plan/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/floor-plan/delete/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"floor-plan",
								"delete",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "fe897wto8ribvu9024zvfvxp",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/floor-plan/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"floor-plan",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "fe897wto8ribvu9024zvfvxp",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/floor-plan/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"floor-plan",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "fe897wto8ribvu9024zvfvxp",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a conflict error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/floor-plan/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"floor-plan",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "fe897wto8ribvu9024zvfvxp",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "media",
			"item": [
				{
					"name": "/media/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/media/list - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/media/list - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/media/list - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"assetId\":{\"type\":\"string\",\"maxLength\":256},\"mediaTypeId\":{\"type\":\"string\",\"maxLength\":128},\"propertyId\":{\"type\":\"string\",\"maxLength\":128},\"order\":{\"type\":\"number\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"assetId\",\"mediaTypeId\",\"propertyId\",\"order\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/media/list - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"assetId\",\n          \"a344xpp1\"\n        ],\n        [\n          \"eq\",\n          \"assetId\",\n          \"a344xpp2\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"mediaTypeId\",\n      \"kaeu5o03h4ihq1zoxzb19l92\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-23T00:00:00.000Z\",\n      \"2024-02-12T00:00:00.000Z\"\n    ]\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/media/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media",
								"list"
							],
							"query": [
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "order-asc",
									"disabled": true
								},
								{
									"key": "cursor",
									"value": "abqdj6xe8puto1j83soz3bml",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with an array of media objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"assetId\",\n          \"a344xpp1\"\n        ],\n        [\n          \"eq\",\n          \"assetId\",\n          \"a344xpp2\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"mediaTypeId\",\n      \"a27vslbjwoyszaqrxw6082aa\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-23T00:00:00.000Z\",\n      \"2024-02-12T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/media/list?limit=10&orderBy=order-asc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"media",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "order-asc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"et laboris occaecat\",\n      \"assetId\": \"dolor est reprehenderit\",\n      \"mediaTypeId\": \"consequat fugiat pariatur\",\n      \"propertyId\": \"dolor in do\",\n      \"order\": -65582805.6410082,\n      \"createdAt\": \"cillum ea proident\",\n      \"updatedAt\": \"esse\"\n    },\n    {\n      \"id\": \"id\",\n      \"assetId\": \"velit cillum aliqua incididunt\",\n      \"mediaTypeId\": \"deserunt consequat\",\n      \"propertyId\": \"elit ut par\",\n      \"order\": -4004987.0172297508,\n      \"createdAt\": \"ea velit\",\n      \"updatedAt\": \"non minim ut sed\"\n    }\n  ]\n}"
						},
						{
							"name": "Responds with a bad request error object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"assetId\",\n          \"a344xpp1\"\n        ],\n        [\n          \"eq\",\n          \"assetId\",\n          \"a344xpp2\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"mediaTypeId\",\n      \"a27vslbjwoyszaqrxw6082aa\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-23T00:00:00.000Z\",\n      \"2024-02-12T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/media/list?limit=10&orderBy=order-asc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"media",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "order-asc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/media/create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/media/create - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/media/create - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/media/create - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/media/create - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"assetId\": \"a344xpp1\",\n  \"mediaTypeId\": \"kaeu5o03h4ihq1zoxzb19l92\",\n  \"propertyId\": \"hdsyi7gw3n77jrngcck1x33y\",\n  \"order\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/media/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"assetId\": \"a344xpp1\",\n  \"mediaTypeId\": \"a27vslbjwoyszaqrxw6082aa\",\n  \"propertyId\": \"a1i6zw4lep7o2qrc5hdxytmv\",\n  \"order\": 0\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/media/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"media",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sit sint voluptate aute\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"assetId\": \"a344xpp1\",\n  \"mediaTypeId\": \"a27vslbjwoyszaqrxw6082aa\",\n  \"propertyId\": \"a1i6zw4lep7o2qrc5hdxytmv\",\n  \"order\": 0\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/media/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"media",
										"create"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/media/update/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[PUT]::/media/update/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[PUT]::/media/update/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[PUT]::/media/update/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[PUT]::/media/update/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"order\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/media/update/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media",
								"update",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "h8e874h63772amg892ajzbo6",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with the id of the updated media.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/media/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"media",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "h8e874h63772amg892ajzbo6",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sit sint voluptate aute\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/media/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"media",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "h8e874h63772amg892ajzbo6",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/media/delete/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[DELETE]::/media/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[DELETE]::/media/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[DELETE]::/media/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/media/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/media/delete/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media",
								"delete",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "h8e874h63772amg892ajzbo6",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/media/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"media",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "h8e874h63772amg892ajzbo6",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/media/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"media",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "h8e874h63772amg892ajzbo6",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a conflict error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/media/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"media",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "h8e874h63772amg892ajzbo6",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "mediaType",
			"item": [
				{
					"name": "/media-type/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[POST]::/media-type/list - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[POST]::/media-type/list - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[POST]::/media-type/list - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/media-type/list - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"video\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"image\"\n        ]\n      ]\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-23T00:00:00.000Z\",\n      \"2024-02-12T00:00:00.000Z\"\n    ]\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/media-type/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media-type",
								"list"
							],
							"query": [
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "updatedAt-asc",
									"disabled": true
								},
								{
									"key": "cursor",
									"value": "abqdj6xe8puto1j83soz3bml",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with an array of mediaType objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"video\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"image\"\n        ]\n      ]\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-23T00:00:00.000Z\",\n      \"2024-02-12T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/media-type/list?limit=10&orderBy=updatedAt-asc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"media-type",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "updatedAt-asc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"anim\",\n      \"name\": \"mollit\",\n      \"createdAt\": \"irure fugiat\",\n      \"updatedAt\": \"aliquip\"\n    },\n    {\n      \"id\": \"culpa\",\n      \"name\": \"ut laboris\",\n      \"createdAt\": \"qui anim pariatur laborum\",\n      \"updatedAt\": \"non aliqua\"\n    }\n  ]\n}"
						},
						{
							"name": "Responds with a bad request error object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"video\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"image\"\n        ]\n      ]\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-23T00:00:00.000Z\",\n      \"2024-02-12T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/media-type/list?limit=10&orderBy=updatedAt-asc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"media-type",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "updatedAt-asc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/media-type/create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/media-type/create - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/media-type/create - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/media-type/create - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/media-type/create - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"postman test media type\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/media-type/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media-type",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"image\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/media-type/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"media-type",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sit sint voluptate aute\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"image\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/media-type/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"media-type",
										"create"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/media-type/update/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[PUT]::/media-type/update/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[PUT]::/media-type/update/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[PUT]::/media-type/update/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[PUT]::/media-type/update/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"postman update\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/media-type/update/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media-type",
								"update",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "kaeu5o03h4ihq1zoxzb19l92",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with the id of the updated mediaType.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"video\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/media-type/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"media-type",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "kaeu5o03h4ihq1zoxzb19l92",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sit sint voluptate aute\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"video\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/media-type/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"media-type",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "kaeu5o03h4ihq1zoxzb19l92",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/media-type/delete/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[DELETE]::/media-type/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[DELETE]::/media-type/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[DELETE]::/media-type/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/media-type/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/media-type/delete/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"media-type",
								"delete",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "kaeu5o03h4ihq1zoxzb19l92",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/media-type/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"media-type",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "kaeu5o03h4ihq1zoxzb19l92",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/media-type/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"media-type",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "kaeu5o03h4ihq1zoxzb19l92",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a conflict error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/media-type/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"media-type",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "kaeu5o03h4ihq1zoxzb19l92",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "parking",
			"item": [
				{
					"name": "/parking/parkings-by-property/:itemId",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[GET]::/parking/parkings-by-property/:itemId - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[GET]::/parking/parkings-by-property/:itemId - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[GET]::/parking/parkings-by-property/:itemId - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"fee\":{\"type\":[\"integer\",\"null\"]},\"feeInterval\":{\"type\":[\"string\",\"null\"]},\"order\":{\"type\":\"integer\"}},\"required\":[\"id\",\"name\",\"fee\",\"feeInterval\",\"order\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/parking/parkings-by-property/:itemId - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/parking/parkings-by-property/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"parking",
								"parkings-by-property",
								":itemId"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "hdsyi7gw3n77jrngcck1x33y",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/parking/parkings-by-property/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"parking",
										"parkings-by-property",
										":itemId"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"anim labore exercitation reprehenderit\",\n      \"name\": \"cillum tempor\",\n      \"fee\": 37155051,\n      \"feeInterval\": \"ipsum commodo sed ex laboris\",\n      \"order\": 72624698\n    },\n    {\n      \"id\": \"ex non Ut\",\n      \"name\": \"incididunt dolor fugiat est mollit\",\n      \"fee\": -21838937,\n      \"feeInterval\": \"no\",\n      \"order\": 95147604\n    }\n  ]\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/parking/parkings-by-property/:itemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"parking",
										"parkings-by-property",
										":itemId"
									],
									"variable": [
										{
											"key": "itemId",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/parking/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[POST]::/parking/list - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[POST]::/parking/list - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[POST]::/parking/list - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"propertyId\":{\"type\":\"string\",\"maxLength\":128},\"fee\":{\"type\":[\"number\",\"null\"]},\"feeInterval\":{\"type\":[\"string\",\"null\"],\"maxLength\":128},\"order\":{\"type\":\"number\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"propertyId\",\"fee\",\"feeInterval\",\"order\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/parking/list - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Outdoor\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Covered\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"eq\",\n      \"fee\",\n      100\n    ],\n    [\n      \"eq\",\n      \"feeInterval\",\n      \"monthly\"\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/parking/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"parking",
								"list"
							],
							"query": [
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "updatedAt-asc",
									"disabled": true
								},
								{
									"key": "cursor",
									"value": "abqdj6xe8puto1j83soz3bml",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with an array of parking objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Outdoor\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Covered\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"eq\",\n      \"fee\",\n      100\n    ],\n    [\n      \"eq\",\n      \"feeInterval\",\n      \"monthly\"\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/parking/list?limit=10&orderBy=updatedAt-asc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"parking",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "updatedAt-asc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"tempor laboris irure eu\",\n      \"name\": \"consectetur enim\",\n      \"propertyId\": \"dolor sunt est\",\n      \"fee\": 51730338.239103526,\n      \"feeInterval\": \"tempor\",\n      \"order\": 38420614.5579837,\n      \"createdAt\": \"ad proident ut cil\",\n      \"updatedAt\": \"cillum in dolor proident\"\n    },\n    {\n      \"id\": \"irure veniam ex voluptate nisi\",\n      \"name\": \"laborum esse dolore velit\",\n      \"propertyId\": \"amet id consectetur\",\n      \"fee\": 89024704.18489733,\n      \"feeInterval\": \"dolore nisi\",\n      \"order\": 65721471.60117611,\n      \"createdAt\": \"nisi exercitation\",\n      \"updatedAt\": \"proident nostrud\"\n    }\n  ]\n}"
						},
						{
							"name": "Responds with a bad request error object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Outdoor\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Covered\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"eq\",\n      \"fee\",\n      100\n    ],\n    [\n      \"eq\",\n      \"feeInterval\",\n      \"monthly\"\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/parking/list?limit=10&orderBy=updatedAt-asc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"parking",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "updatedAt-asc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/parking/create",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[POST]::/parking/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[POST]::/parking/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[POST]::/parking/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/parking/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Covered\",\n  \"propertyId\": \"hdsyi7gw3n77jrngcck1x33y\",\n  \"fee\": 100,\n  \"feeInterval\": \"monthly\",\n  \"order\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/parking/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"parking",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Covered\",\n  \"propertyId\": \"hdsyi7gw3n77jrngcck1x33y\",\n  \"fee\": 100,\n  \"feeInterval\": \"monthly\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/parking/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"parking",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sit sint voluptate aute\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Covered\",\n  \"propertyId\": \"hdsyi7gw3n77jrngcck1x33y\",\n  \"fee\": 100,\n  \"feeInterval\": \"monthly\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/parking/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"parking",
										"create"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/parking/update/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[PUT]::/parking/update/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[PUT]::/parking/update/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[PUT]::/parking/update/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[PUT]::/parking/update/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Covered\",\n  \"fee\": 100,\n  \"feeInterval\": \"monthly\",\n  \"order\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/parking/update/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"parking",
								"update",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "wowhdybituf34cr8im31nr4s",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with the id of the updated parking.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Covered\",\n  \"fee\": 100,\n  \"feeInterval\": \"monthly\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/parking/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"parking",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "wowhdybituf34cr8im31nr4s",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sit sint voluptate aute\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Covered\",\n  \"fee\": 100,\n  \"feeInterval\": \"monthly\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/parking/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"parking",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "wowhdybituf34cr8im31nr4s",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/parking/delete/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[DELETE]::/parking/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[DELETE]::/parking/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[DELETE]::/parking/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/parking/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/parking/delete/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"parking",
								"delete",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "wowhdybituf34cr8im31nr4s",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/parking/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"parking",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "wowhdybituf34cr8im31nr4s",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/parking/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"parking",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "wowhdybituf34cr8im31nr4s",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a conflict error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/parking/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"parking",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "wowhdybituf34cr8im31nr4s",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "property",
			"item": [
				{
					"name": "/property/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('[GET]::/property/:id - Status code is 2xx', function () {",
									"    pm.response.to.be.success;",
									"})",
									"",
									"pm.test('[GET]::/property/:id - Content-Type is application/json', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"})",
									"",
									"pm.test('[GET]::/property/:id - Response has JSON Body', function () {",
									"    pm.response.to.have.jsonBody();",
									"})",
									"",
									"const schema = {",
									"    'type': 'object',",
									"    'properties': {",
									"        'success': {",
									"            'type': 'boolean',",
									"            'enum': [true]",
									"        },",
									"        'data': {",
									"            'type': 'object',",
									"            'properties': {",
									"                'id': { 'type': 'string' },",
									"                'listingId': { 'type': 'number' },",
									"                'name': { 'type': 'string' },",
									"                'address': { 'type': 'string' },",
									"                'latitude': { 'type': 'string' },",
									"                'longitude': { 'type': 'string' },",
									"                'yearBuilt': {",
									"                    'type': [",
									"                        'integer',",
									"                        'null'",
									"                    ]",
									"                },",
									"                'descriptionTitle': {",
									"                    'type': [",
									"                        'string',",
									"                        'null'",
									"                    ]",
									"                },",
									"                'descriptionSubtitle': {",
									"                    'type': [",
									"                        'string',",
									"                        'null'",
									"                    ]",
									"                },",
									"                'descriptionText': {",
									"                    'type': [",
									"                        'string',",
									"                        'null'",
									"                    ]",
									"                },",
									"                'smoking': { 'type': 'boolean' },",
									"                'cats': { 'type': 'boolean' },",
									"                'dogs': { 'type': 'boolean' },",
									"                'petsNegotiable': { 'type': 'boolean' },",
									"                'petsFee': {",
									"                    'type': [",
									"                        'integer',",
									"                        'null'",
									"                    ]",
									"                },",
									"                'petsFeeInterval': {",
									"                    'type': [",
									"                        'string',",
									"                        'null'",
									"                    ]",
									"                },",
									"                'published': { 'type': 'boolean' },",
									"                'customerRanking': { 'type': 'number' },",
									"                'paidSearchRanking': { 'type': 'boolean' },",
									"                'city': {",
									"                    'type': 'object',",
									"                    'properties': { 'name': { 'type': 'string' } },",
									"                    'required': ['name']",
									"                },",
									"                'featureToProperty': {",
									"                    'type': 'array',",
									"                    'items': {",
									"                        'type': 'object',",
									"                        'properties': {",
									"                            'feature': {",
									"                                'type': 'object',",
									"                                'properties': { 'name': { 'type': 'string' } },",
									"                                'required': ['name']",
									"                            }",
									"                        },",
									"                        'required': ['feature']",
									"                    }",
									"                },",
									"                'buildingFeatureToProperty': {",
									"                    'type': 'array',",
									"                    'items': {",
									"                        'type': 'object',",
									"                        'properties': {",
									"                            'buildingFeature': {",
									"                                'type': 'object',",
									"                                'properties': { 'name': { 'type': 'string' } },",
									"                                'required': ['name']",
									"                            }",
									"                        },",
									"                        'required': ['buildingFeature']",
									"                    }",
									"                },",
									"                'community': {",
									"                    'type': 'object',",
									"                    'properties': {",
									"                        'name': { 'type': 'string' },",
									"                        'score': {",
									"                            'type': [",
									"                                'integer',",
									"                                'null'",
									"                            ]",
									"                        },",
									"                        'imageUrl': {",
									"                            'type': [",
									"                                'string',",
									"                                'null'",
									"                            ]",
									"                        },",
									"                        'quadrant': {",
									"                            'type': [",
									"                                'string',",
									"                                'null'",
									"                            ]",
									"                        },",
									"                        'sector': {",
									"                            'type': [",
									"                                'string',",
									"                                'null'",
									"                            ]",
									"                        },",
									"                        'ward': {",
									"                            'type': [",
									"                                'string',",
									"                                'null'",
									"                            ]",
									"                        },",
									"                        'population': {",
									"                            'type': [",
									"                                'integer',",
									"                                'null'",
									"                            ]",
									"                        },",
									"                        'dwellings': {",
									"                            'type': [",
									"                                'integer',",
									"                                'null'",
									"                            ]",
									"                        },",
									"                        'usedForRenting': {",
									"                            'type': [",
									"                                'number',",
									"                                'null'",
									"                            ]",
									"                        },",
									"                        'area': {",
									"                            'type': [",
									"                                'number',",
									"                                'null'",
									"                            ]",
									"                        },",
									"                        'density': {",
									"                            'type': [",
									"                                'number',",
									"                                'null'",
									"                            ]",
									"                        },",
									"                        'averageIncome': {",
									"                            'type': [",
									"                                'integer',",
									"                                'null'",
									"                            ]",
									"                        },",
									"                        'lowIncome': {",
									"                            'type': [",
									"                                'number',",
									"                                'null'",
									"                            ]",
									"                        },",
									"                        'immigrants': {",
									"                            'type': [",
									"                                'number',",
									"                                'null'",
									"                            ]",
									"                        },",
									"                        'elevation': {",
									"                            'type': [",
									"                                'integer',",
									"                                'null'",
									"                            ]",
									"                        },",
									"                        'established': {",
									"                            'type': [",
									"                                'integer',",
									"                                'null'",
									"                            ]",
									"                        },",
									"                        'description': {",
									"                            'type': [",
									"                                'string',",
									"                                'null'",
									"                            ]",
									"                        },",
									"                        'latitude': { 'type': 'number' },",
									"                        'longitude': { 'type': 'number' },",
									"                        'communityFeatureToCommunity': {",
									"                            'type': 'array',",
									"                            'items': {",
									"                                'type': 'object',",
									"                                'properties': {",
									"                                    'communityFeature': {",
									"                                        'type': 'object',",
									"                                        'properties': { 'name': { 'type': 'string' } },",
									"                                        'required': ['name']",
									"                                    }",
									"                                },",
									"                                'required': ['communityFeature']",
									"                            }",
									"                        }",
									"                    },",
									"                    'required': [",
									"                        'name',",
									"                        'score',",
									"                        'imageUrl',",
									"                        'quadrant',",
									"                        'sector',",
									"                        'ward',",
									"                        'population',",
									"                        'dwellings',",
									"                        'usedForRenting',",
									"                        'area',",
									"                        'density',",
									"                        'averageIncome',",
									"                        'lowIncome',",
									"                        'immigrants',",
									"                        'elevation',",
									"                        'established',",
									"                        'description',",
									"                        'latitude',",
									"                        'longitude',",
									"                        'communityFeatureToCommunity'",
									"                    ]",
									"                },",
									"                'medias': {",
									"                    'type': 'array',",
									"                    'items': {",
									"                        'type': 'object',",
									"                        'properties': {",
									"                            'assetId': { 'type': 'string' },",
									"                            'order': { 'type': 'number' }",
									"                        },",
									"                        'required': [",
									"                            'assetId',",
									"                            'order'",
									"                        ]",
									"                    }",
									"                },",
									"                'parkings': {",
									"                    'type': 'array',",
									"                    'items': {",
									"                        'type': 'object',",
									"                        'properties': {",
									"                            'name': { 'type': 'string' },",
									"                            'fee': { 'type': 'number' },",
									"                            'feeInterval': { 'type': 'string' }",
									"                        },",
									"                        'required': [",
									"                            'name',",
									"                            'fee',",
									"                            'feeInterval'",
									"                        ]",
									"                    }",
									"                },",
									"                'typeProp': {",
									"                    'type': 'object',",
									"                    'properties': { 'name': { 'type': 'string' } },",
									"                    'required': ['name']",
									"                },",
									"                'floorPlans': {",
									"                    'type': 'array',",
									"                    'items': {",
									"                        'type': 'object',",
									"                        'properties': {",
									"                            'id': { 'type': 'string' },",
									"                            'name': { 'type': 'string' },",
									"                            'order': { 'type': 'number' },",
									"                            'units': {",
									"                                'type': 'array',",
									"                                'items': {",
									"                                    'type': 'object',",
									"                                    'properties': {",
									"                                        'id': { 'type': 'string' },",
									"                                        'name': { 'type': 'string' },",
									"                                        'rent': { 'type': 'number' },",
									"                                        'deposit': {",
									"                                            'type': [",
									"                                                'number',",
									"                                                'null'",
									"                                            ]",
									"                                        },",
									"                                        'available': { 'type': 'boolean' },",
									"                                        'immediate': { 'type': 'boolean' },",
									"                                        'availableDate': {",
									"                                            'type': [",
									"                                                'string',",
									"                                                'null'",
									"                                            ]",
									"                                        },",
									"                                        'shortterm': { 'type': 'boolean' },",
									"                                        'longterm': { 'type': 'boolean' },",
									"                                        'unitNumber': {",
									"                                            'type': [",
									"                                                'string',",
									"                                                'null'",
									"                                            ]",
									"                                        },",
									"                                        'unitName': {",
									"                                            'type': [",
									"                                                'string',",
									"                                                'null'",
									"                                            ]",
									"                                        },",
									"                                        'surface': { 'type': 'integer' },",
									"                                        'furnished': { 'type': 'boolean' },",
									"                                        'heat': { 'type': 'boolean' },",
									"                                        'water': { 'type': 'boolean' },",
									"                                        'electricity': { 'type': 'boolean' },",
									"                                        'internet': { 'type': 'boolean' },",
									"                                        'television': { 'type': 'boolean' },",
									"                                        'order': { 'type': 'integer' },",
									"                                        'published': { 'type': 'boolean' },",
									"                                        'bedroom': {",
									"                                            'type': 'object',",
									"                                            'properties': { 'name': { 'type': 'string' } },",
									"                                            'required': ['name']",
									"                                        },",
									"                                        'bathroom': {",
									"                                            'type': 'object',",
									"                                            'properties': { 'name': { 'type': 'string' } },",
									"                                            'required': ['name']",
									"                                        }",
									"                                    },",
									"                                    'required': [",
									"                                        'id',",
									"                                        'name',",
									"                                        'rent',",
									"                                        'deposit',",
									"                                        'available',",
									"                                        'immediate',",
									"                                        'availableDate',",
									"                                        'shortterm',",
									"                                        'longterm',",
									"                                        'unitNumber',",
									"                                        'unitName',",
									"                                        'surface',",
									"                                        'furnished',",
									"                                        'heat',",
									"                                        'water',",
									"                                        'electricity',",
									"                                        'internet',",
									"                                        'television',",
									"                                        'order',",
									"                                        'published',",
									"                                        'bedroom',",
									"                                        'bathroom'",
									"                                    ]",
									"                                }",
									"                            }",
									"                        },",
									"                        'required': [",
									"                            'id',",
									"                            'name',",
									"                            'order',",
									"                            'units'",
									"                        ]",
									"                    }",
									"                }",
									"            },",
									"            'required': [",
									"                'id',",
									"                'listingId',",
									"                'name',",
									"                'address',",
									"                'latitude',",
									"                'longitude',",
									"                'yearBuilt',",
									"                'descriptionTitle',",
									"                'descriptionSubtitle',",
									"                'descriptionText',",
									"                'smoking',",
									"                'cats',",
									"                'dogs',",
									"                'petsNegotiable',",
									"                'petsFee',",
									"                'petsFeeInterval',",
									"                'published',",
									"                'customerRanking',",
									"                'paidSearchRanking',",
									"                'city',",
									"                'featureToProperty',",
									"                'buildingFeatureToProperty',",
									"                'community',",
									"                'medias',",
									"                'parkings',",
									"                'typeProp',",
									"                'floorPlans'",
									"            ]",
									"        }",
									"    },",
									"    'required': [",
									"        'success',",
									"        'data'",
									"    ]",
									"};",
									"",
									"pm.test(\"[GET]::/property/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/property/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"property",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "a09yhukzcl0z0gzj8xf81ixa",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/property/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"property",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"Lorem aliqua\",\n    \"listingId\": -96566009.35808948,\n    \"name\": \"sed adipisicing ut\",\n    \"address\": \"consectetur sint incididunt ut commodo\",\n    \"latitude\": \"culpa consectetur exercitation ad eiusmod\",\n    \"longitude\": \"nisi veniam nostrud ex\",\n    \"yearBuilt\": 46476267,\n    \"descriptionTitle\": \"cillum sed\",\n    \"descriptionSubtitle\": \"sed officia\",\n    \"descriptionText\": \"Duis ullamco\",\n    \"smoking\": false,\n    \"cats\": false,\n    \"dogs\": true,\n    \"petsNegotiable\": false,\n    \"petsFee\": 29155860,\n    \"petsFeeInterval\": \"officia\",\n    \"published\": true,\n    \"customerRanking\": 19591729.209831893,\n    \"paidSearchRanking\": true,\n    \"city\": {\n      \"name\": \"voluptate qui minim\"\n    },\n    \"featureToProperty\": [\n      {\n        \"feature\": {\n          \"name\": \"eiusmod\"\n        }\n      },\n      {\n        \"feature\": {\n          \"name\": \"non minim ut\"\n        }\n      }\n    ],\n    \"buildingFeatureToProperty\": [\n      {\n        \"buildingFeature\": {\n          \"name\": \"Excepteur\"\n        }\n      },\n      {\n        \"buildingFeature\": {\n          \"name\": \"enim veniam mollit et\"\n        }\n      }\n    ],\n    \"community\": {\n      \"name\": \"sunt pariatur\",\n      \"score\": -90279240,\n      \"imageUrl\": \"enim anim culpa dolore\",\n      \"quadrant\": \"irure ullamco\",\n      \"sector\": \"ut sunt exercitation voluptate\",\n      \"ward\": \"c\",\n      \"population\": -34896549,\n      \"dwellings\": -29025761,\n      \"usedForRenting\": -81968877.64919634,\n      \"area\": -292718.66475105286,\n      \"density\": -52252590.13727048,\n      \"averageIncome\": -96810863,\n      \"lowIncome\": 1128951.5142145902,\n      \"immigrants\": -42853849.93589765,\n      \"elevation\": -24270217,\n      \"established\": -81316702,\n      \"description\": \"nostrud exercitation\",\n      \"latitude\": 1809840.1946930587,\n      \"longitude\": 36223859.749653906,\n      \"communityFeatureToCommunity\": [\n        {\n          \"communityFeature\": {\n            \"name\": \"elit\"\n          }\n        },\n        {\n          \"communityFeature\": {\n            \"name\": \"pariatur esse adipisicing in\"\n          }\n        }\n      ]\n    },\n    \"medias\": [\n      {\n        \"assetId\": \"dolor ipsum mollit est\",\n        \"order\": 8470148.671963036\n      },\n      {\n        \"assetId\": \"consec\",\n        \"order\": -26519212.666502863\n      }\n    ],\n    \"parkings\": [\n      {\n        \"name\": \"sed cupidatat in aliquip enim\",\n        \"fee\": 74147980.11422947,\n        \"feeInterval\": \"ex\"\n      },\n      {\n        \"name\": \"occaecat sit ut\",\n        \"fee\": -80911228.19991207,\n        \"feeInterval\": \"Ut cillum Exce\"\n      }\n    ],\n    \"typeProp\": {\n      \"name\": \"ex\"\n    },\n    \"floorPlans\": [\n      {\n        \"id\": \"nostrud deserunt ad voluptate sunt\",\n        \"name\": \"velit esse nostrud\",\n        \"order\": -84134237.25551316,\n        \"units\": [\n          {\n            \"id\": \"eiusmod sit quis deserunt eu\",\n            \"name\": \"minim reprehenderit sit Ut ea\",\n            \"rent\": 89921596.88227046,\n            \"deposit\": 33610060.07540634,\n            \"available\": false,\n            \"immediate\": false,\n            \"availableDate\": \"reprehenderit officia in exercitation\",\n            \"shortterm\": false,\n            \"longterm\": true,\n            \"unitNumber\": \"reprehenderit sed ex\",\n            \"unitName\": {},\n            \"surface\": 8950967,\n            \"furnished\": true,\n            \"heat\": true,\n            \"water\": false,\n            \"electricity\": true,\n            \"internet\": false,\n            \"television\": false,\n            \"order\": -97530397,\n            \"published\": false,\n            \"bedroom\": {\n              \"name\": \"aliquip eiusmod\"\n            },\n            \"bathroom\": {\n              \"name\": \"sit enim\"\n            }\n          },\n          {\n            \"id\": \"v\",\n            \"name\": \"et laboris\",\n            \"rent\": 19982979.049821377,\n            \"deposit\": -88801919.43264237,\n            \"available\": false,\n            \"immediate\": true,\n            \"availableDate\": \"fug\",\n            \"shortterm\": true,\n            \"longterm\": false,\n            \"unitNumber\": \"id\",\n            \"unitName\": {},\n            \"surface\": 68303523,\n            \"furnished\": false,\n            \"heat\": false,\n            \"water\": false,\n            \"electricity\": true,\n            \"internet\": false,\n            \"television\": true,\n            \"order\": -64687411,\n            \"published\": true,\n            \"bedroom\": {\n              \"name\": \"in officia aliquip\"\n            },\n            \"bathroom\": {\n              \"name\": \"reprehenderit fugiat ea laboris\"\n            }\n          }\n        ]\n      },\n      {\n        \"id\": \"ullamco do nulla in eiusmod\",\n        \"name\": \"nostrud aliqua fugiat\",\n        \"order\": 49428221.72859964,\n        \"units\": [\n          {\n            \"id\": \"quis fugiat\",\n            \"name\": \"adipisicing veniam aute incididunt\",\n            \"rent\": -36210081.560811736,\n            \"deposit\": -24417225.15352352,\n            \"available\": true,\n            \"immediate\": false,\n            \"availableDate\": \"ex commodo Ut nisi proident\",\n            \"shortterm\": true,\n            \"longterm\": false,\n            \"unitNumber\": \"eu\",\n            \"unitName\": {},\n            \"surface\": -14665314,\n            \"furnished\": false,\n            \"heat\": false,\n            \"water\": false,\n            \"electricity\": true,\n            \"internet\": true,\n            \"television\": false,\n            \"order\": 51118563,\n            \"published\": true,\n            \"bedroom\": {\n              \"name\": \"aliqua\"\n            },\n            \"bathroom\": {\n              \"name\": \"minim anim ad\"\n            }\n          },\n          {\n            \"id\": \"fugiat proident qui\",\n            \"name\": \"ullamco dolor laborum mollit\",\n            \"rent\": -64210316.05876624,\n            \"deposit\": 77559911.16402924,\n            \"available\": true,\n            \"immediate\": true,\n            \"availableDate\": \"officia proident dolor\",\n            \"shortterm\": true,\n            \"longterm\": false,\n            \"unitNumber\": \"commodo sunt laboris\",\n            \"unitName\": {},\n            \"surface\": -51993555,\n            \"furnished\": true,\n            \"heat\": true,\n            \"water\": true,\n            \"electricity\": true,\n            \"internet\": false,\n            \"television\": false,\n            \"order\": -41144412,\n            \"published\": true,\n            \"bedroom\": {\n              \"name\": \"Lorem deserunt id officia dolore\"\n            },\n            \"bathroom\": {\n              \"name\": \"in exercitation Duis laboris\"\n            }\n          }\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/property/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"property",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/property/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[POST]::/property/list - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[POST]::/property/list - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[POST]::/property/list - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"listingId\":{\"type\":\"number\"},\"name\":{\"type\":\"string\",\"maxLength\":256},\"address\":{\"type\":\"string\",\"maxLength\":256},\"latitude\":{\"type\":\"string\"},\"longitude\":{\"type\":\"string\"},\"yearBuilt\":{\"type\":[\"number\",\"null\"]},\"descriptionTitle\":{\"type\":[\"string\",\"null\"],\"maxLength\":256},\"descriptionSubtitle\":{\"type\":[\"string\",\"null\"],\"maxLength\":256},\"descriptionText\":{\"type\":[\"string\",\"null\"]},\"typePropId\":{\"type\":\"string\",\"maxLength\":128},\"communityId\":{\"type\":[\"string\",\"null\"],\"maxLength\":128},\"cityId\":{\"type\":\"string\",\"maxLength\":128},\"smoking\":{\"type\":\"boolean\"},\"cats\":{\"type\":\"boolean\"},\"dogs\":{\"type\":\"boolean\"},\"petsNegotiable\":{\"type\":\"boolean\"},\"petsFee\":{\"type\":[\"number\",\"null\"]},\"petsFeeInterval\":{\"type\":[\"string\",\"null\"],\"maxLength\":128},\"published\":{\"type\":\"boolean\"},\"customerRanking\":{\"type\":\"number\"},\"paidSearchRanking\":{\"type\":\"boolean\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"listingId\",\"name\",\"address\",\"latitude\",\"longitude\",\"yearBuilt\",\"descriptionTitle\",\"descriptionSubtitle\",\"descriptionText\",\"typePropId\",\"communityId\",\"cityId\",\"smoking\",\"cats\",\"dogs\",\"petsNegotiable\",\"petsFee\",\"petsFeeInterval\",\"published\",\"customerRanking\",\"paidSearchRanking\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/property/list - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"gt\",\n          \"yearBuilt\",\n          2010\n        ],\n        [\n          \"lt\",\n          \"yearBuilt\",\n          2020\n        ]\n      ]\n    ],\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"cats\",\n          1\n        ],\n        [\n          \"eq\",\n          \"dogs\",\n          1\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"communityId\",\n      \"icj3bimn4dg5v1yeu7i2frzq\"\n    ],\n    [\n      \"eq\",\n      \"cityId\",\n      \"dl7r7ezrt909p6bmct6avl9l\"\n    ],\n    [\n      \"eq\",\n      \"smoking\",\n      0\n    ]\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/property/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"property",
								"list"
							],
							"query": [
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "updatedAt-desc",
									"disabled": true
								},
								{
									"key": "cursor",
									"value": "abqdj6xe8puto1j83soz3bml",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with an array of property objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"gt\",\n          \"yearBuilt\",\n          2010\n        ],\n        [\n          \"lt\",\n          \"yearBuilt\",\n          2020\n        ]\n      ]\n    ],\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"cats\",\n          1\n        ],\n        [\n          \"eq\",\n          \"dogs\",\n          1\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"communityId\",\n      \"icj3bimn4dg5v1yeu7i2frzq\"\n    ],\n    [\n      \"eq\",\n      \"cityId\",\n      \"dl7r7ezrt909p6bmct6avl9l\"\n    ],\n    [\n      \"eq\",\n      \"smoking\",\n      0\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/property/list?limit=10&orderBy=updatedAt-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"property",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "updatedAt-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"sint incididunt consequat ut dolore\",\n      \"listingId\": -83747776.40876555,\n      \"name\": \"incididunt et\",\n      \"address\": \"in D\",\n      \"latitude\": \"dolor ullamco in nulla\",\n      \"longitude\": \"aliqua irure adipisicing amet in\",\n      \"yearBuilt\": -82649309.38845296,\n      \"descriptionTitle\": \"cupidatat veniam qui elit\",\n      \"descriptionSubtitle\": \"Ut eiusmod dolor anim\",\n      \"descriptionText\": \"irure deserunt\",\n      \"typePropId\": \"amet dolore sint dolor\",\n      \"communityId\": \"veni\",\n      \"cityId\": \"n\",\n      \"smoking\": false,\n      \"cats\": true,\n      \"dogs\": false,\n      \"petsNegotiable\": true,\n      \"petsFee\": -47474165.76676704,\n      \"petsFeeInterval\": \"deserunt\",\n      \"published\": false,\n      \"customerRanking\": 52889638.60254195,\n      \"paidSearchRanking\": false,\n      \"createdAt\": \"amet nisi\",\n      \"updatedAt\": \"dolore et Lorem\"\n    },\n    {\n      \"id\": \"voluptate ex\",\n      \"listingId\": -84791348.36754411,\n      \"name\": \"tempor dolore\",\n      \"address\": \"ad ullamco\",\n      \"latitude\": \"Ut Excepteur qui\",\n      \"longitude\": \"minim\",\n      \"yearBuilt\": -99038510.75601274,\n      \"descriptionTitle\": \"quis incididunt nulla\",\n      \"descriptionSubtitle\": \"commodo labore Ut\",\n      \"descriptionText\": \"sed amet dolor Excepteur ut\",\n      \"typePropId\": \"consectetur Lorem\",\n      \"communityId\": \"\",\n      \"cityId\": \"aliqua\",\n      \"smoking\": true,\n      \"cats\": false,\n      \"dogs\": true,\n      \"petsNegotiable\": false,\n      \"petsFee\": 29562271.623236835,\n      \"petsFeeInterval\": \"irure ad enim tempor consequat\",\n      \"published\": true,\n      \"customerRanking\": 52044231.406003594,\n      \"paidSearchRanking\": false,\n      \"createdAt\": \"cupidatat in veniam\",\n      \"updatedAt\": \"labore labor\"\n    }\n  ]\n}"
						},
						{
							"name": "Responds with a bad request error object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"gt\",\n          \"yearBuilt\",\n          2010\n        ],\n        [\n          \"lt\",\n          \"yearBuilt\",\n          2020\n        ]\n      ]\n    ],\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"cats\",\n          1\n        ],\n        [\n          \"eq\",\n          \"dogs\",\n          1\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"communityId\",\n      \"icj3bimn4dg5v1yeu7i2frzq\"\n    ],\n    [\n      \"eq\",\n      \"cityId\",\n      \"dl7r7ezrt909p6bmct6avl9l\"\n    ],\n    [\n      \"eq\",\n      \"smoking\",\n      0\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/property/list?limit=10&orderBy=updatedAt-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"property",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "updatedAt-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/property/create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/property/create - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/property/create - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/property/create - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[POST]::/property/create - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Property name\",\n  \"address\": \"123 Main St, Calgary, AB T2P 1J9\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\",\n  \"yearBuilt\": 2019,\n  \"descriptionTitle\": \"Property description title\",\n  \"descriptionSubtitle\": \"Property description subtitle\",\n  \"descriptionText\": \"Property description text\",\n  \"typePropId\": \"zvyuykclatrceuwmxo1bd42p\",\n  \"communityId\": \"icj3bimn4dg5v1yeu7i2frzq\",\n  \"cityId\": \"dl7r7ezrt909p6bmct6avl9l\",\n  \"smoking\": false,\n  \"cats\": true,\n  \"dogs\": false,\n  \"petsNegotiable\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/property/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"property",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Property name\",\n  \"address\": \"123 Main St, Calgary, AB T2P 1J9\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\",\n  \"yearBuilt\": 2019,\n  \"descriptionTitle\": \"Property description title\",\n  \"descriptionSubtitle\": \"Property description subtitle\",\n  \"descriptionText\": \"Property description text\",\n  \"typePropId\": \"a5ug1fdwkkc4byl1uw9d7cqo\",\n  \"communityId\": \"a5ug1fdwkkc4byl1uw9d7cqo\",\n  \"cityId\": \"a5ug1fdwkkc4byl1uw9d7cqo\",\n  \"smoking\": false,\n  \"cats\": true,\n  \"dogs\": false,\n  \"petsNegotiable\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/property/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"property",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sit sint voluptate aute\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Property name\",\n  \"address\": \"123 Main St, Calgary, AB T2P 1J9\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\",\n  \"yearBuilt\": 2019,\n  \"descriptionTitle\": \"Property description title\",\n  \"descriptionSubtitle\": \"Property description subtitle\",\n  \"descriptionText\": \"Property description text\",\n  \"typePropId\": \"a5ug1fdwkkc4byl1uw9d7cqo\",\n  \"communityId\": \"a5ug1fdwkkc4byl1uw9d7cqo\",\n  \"cityId\": \"a5ug1fdwkkc4byl1uw9d7cqo\",\n  \"smoking\": false,\n  \"cats\": true,\n  \"dogs\": false,\n  \"petsNegotiable\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/property/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"property",
										"create"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/property/update/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[PUT]::/property/update/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[PUT]::/property/update/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[PUT]::/property/update/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[PUT]::/property/update/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Property name\",\n  \"address\": \"123 Main St, Calgary, AB T2P 1J9\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\",\n  \"yearBuilt\": 2020,\n  \"descriptionTitle\": \"Property description title\",\n  \"descriptionSubtitle\": \"Property description subtitle\",\n  \"descriptionText\": \"Property description text\",\n  \"smoking\": true,\n  \"cats\": true,\n  \"dogs\": false,\n  \"petsNegotiable\": true,\n  \"petsFee\": 100\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/property/update/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"property",
								"update",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "hdsyi7gw3n77jrngcck1x33y",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with the id of the updated property.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Property name\",\n  \"address\": \"123 Main St, Calgary, AB T2P 1J9\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\",\n  \"yearBuilt\": 2020,\n  \"descriptionTitle\": \"Property description title\",\n  \"descriptionSubtitle\": \"Property description subtitle\",\n  \"descriptionText\": \"Property description text\",\n  \"smoking\": true,\n  \"cats\": true,\n  \"dogs\": false,\n  \"petsNegotiable\": true,\n  \"petsFee\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/property/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"property",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sit sint voluptate aute\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Property name\",\n  \"address\": \"123 Main St, Calgary, AB T2P 1J9\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\",\n  \"yearBuilt\": 2020,\n  \"descriptionTitle\": \"Property description title\",\n  \"descriptionSubtitle\": \"Property description subtitle\",\n  \"descriptionText\": \"Property description text\",\n  \"smoking\": true,\n  \"cats\": true,\n  \"dogs\": false,\n  \"petsNegotiable\": true,\n  \"petsFee\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/property/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"property",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/property/delete/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[DELETE]::/property/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[DELETE]::/property/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[DELETE]::/property/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/property/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/property/delete/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"property",
								"delete",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "hdsyi7gw3n77jrngcck1x33y",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/property/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"property",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/property/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"property",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a conflict error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/property/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"property",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "hdsyi7gw3n77jrngcck1x33y",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "region",
			"item": [
				{
					"name": "/region/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[GET]::/region/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[GET]::/region/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[GET]::/region/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"administrativeName\":{\"type\":\"string\"},\"cities\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\"]}}},\"required\":[\"id\",\"name\",\"administrativeName\",\"cities\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/region/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/region/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"region",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "kj3nrb5rv094v8ns5ptz1jhc",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/region/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"region",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "kj3nrb5rv094v8ns5ptz1jhc",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"fugiat Excepteur ut officia\",\n    \"name\": \"laborum\",\n    \"administrativeName\": \"in ut\",\n    \"cities\": [\n      {\n        \"id\": \"deserunt eu adipisicing magna\",\n        \"name\": \"est occaecat dolore dolor\"\n      },\n      {\n        \"id\": \"dolor adipisicing qui fugiat aliqua\",\n        \"name\": \"aliquip cillum aute labor\"\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/region/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"region",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "kj3nrb5rv094v8ns5ptz1jhc",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/region/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[POST]::/region/list - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[POST]::/region/list - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[POST]::/region/list - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"administrativeName\":{\"type\":\"string\",\"maxLength\":256},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"administrativeName\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/region/list - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Alberta\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Manitoba\"\n        ]\n      ]\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-23T00:00:00.000Z\",\n      \"2024-02-12T00:00:00.000Z\"\n    ]\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/region/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"region",
								"list"
							],
							"query": [
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "createdAt-asc",
									"disabled": true
								},
								{
									"key": "cursor",
									"value": "abqdj6xe8puto1j83soz3bml",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with an array of region objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Alberta\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Manitoba\"\n        ]\n      ]\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-23T00:00:00.000Z\",\n      \"2024-02-12T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/region/list?limit=10&orderBy=createdAt-asc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"region",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "createdAt-asc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"fugiat incididunt\",\n      \"name\": \"ullamco laboris\",\n      \"administrativeName\": \"in incididunt quis eiusmod in\",\n      \"createdAt\": \"ad\",\n      \"updatedAt\": \"cupidatat ut velit\"\n    },\n    {\n      \"id\": \"pariatur Excepteur laboris\",\n      \"name\": \"sit sunt quis mollit\",\n      \"administrativeName\": \"cupidatat irure nostrud\",\n      \"createdAt\": \"ut ullamco officia\",\n      \"updatedAt\": \"ipsum Excepteur veniam laboris\"\n    }\n  ]\n}"
						},
						{
							"name": "Responds with a bad request error object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Alberta\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Manitoba\"\n        ]\n      ]\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-23T00:00:00.000Z\",\n      \"2024-02-12T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/region/list?limit=10&orderBy=createdAt-asc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"region",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "createdAt-asc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/region/create",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[POST]::/region/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[POST]::/region/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[POST]::/region/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/region/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Ontario\",\n  \"administrativeName\": \"Province\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/region/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"region",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Ontario\",\n  \"administrativeName\": \"Province\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/region/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"region",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sit sint voluptate aute\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Ontario\",\n  \"administrativeName\": \"Province\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/region/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"region",
										"create"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/region/update/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[PUT]::/region/update/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[PUT]::/region/update/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[PUT]::/region/update/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[PUT]::/region/update/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"administrativeName\": \"State\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/region/update/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"region",
								"update",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "kj3nrb5rv094v8ns5ptz1jhc",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with the id of the updated region.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"British Columbia\",\n  \"administrativeName\": \"Province\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/region/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"region",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "kj3nrb5rv094v8ns5ptz1jhc",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sit sint voluptate aute\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"British Columbia\",\n  \"administrativeName\": \"Province\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/region/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"region",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "kj3nrb5rv094v8ns5ptz1jhc",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/region/delete/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[DELETE]::/region/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[DELETE]::/region/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[DELETE]::/region/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/region/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/region/delete/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"region",
								"delete",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "kj3nrb5rv094v8ns5ptz1jhc",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/region/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"region",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "kj3nrb5rv094v8ns5ptz1jhc",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/region/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"region",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "kj3nrb5rv094v8ns5ptz1jhc",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a conflict error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/region/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"region",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "kj3nrb5rv094v8ns5ptz1jhc",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "typeProp",
			"item": [
				{
					"name": "/type-prop/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[POST]::/type-prop/list - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[POST]::/type-prop/list - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[POST]::/type-prop/list - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"order\":{\"type\":\"number\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"order\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/type-prop/list - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/type-prop/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"type-prop",
								"list"
							],
							"query": [
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "id-asc",
									"disabled": true
								},
								{
									"key": "cursor",
									"value": "abqdj6xe8puto1j83soz3bml",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with an array of typeProp objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/type-prop/list?limit=10&orderBy=id-asc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"type-prop",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "id-asc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"pariatur Duis sed\",\n      \"name\": \"eu\",\n      \"order\": 72262992.05402076,\n      \"createdAt\": \"voluptate dolore velit\",\n      \"updatedAt\": \"fugiat consectetur\"\n    },\n    {\n      \"id\": \"nostrud ex\",\n      \"name\": \"occaecat deserunt\",\n      \"order\": 35323093.63463479,\n      \"createdAt\": \"et do labore\",\n      \"updatedAt\": \"pariatur\"\n    }\n  ]\n}"
						},
						{
							"name": "Responds with a bad request error object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/type-prop/list?limit=10&orderBy=id-asc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"type-prop",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "id-asc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/type-prop/create",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[POST]::/type-prop/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[POST]::/type-prop/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[POST]::/type-prop/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/type-prop/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/type-prop/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"type-prop",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/type-prop/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"type-prop",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sit sint voluptate aute\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/type-prop/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"type-prop",
										"create"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/type-prop/update/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[PUT]::/type-prop/update/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[PUT]::/type-prop/update/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[PUT]::/type-prop/update/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}",
									"",
									"// Validate if response matches JSON schema ",
									"pm.test(\"[PUT]::/type-prop/update/:id - Schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"order\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/type-prop/update/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"type-prop",
								"update",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "zvyuykclatrceuwmxo1bd42p",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with the id of the updated typeProp.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/type-prop/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"type-prop",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "zvyuykclatrceuwmxo1bd42p",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sit sint voluptate aute\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/type-prop/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"type-prop",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "zvyuykclatrceuwmxo1bd42p",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/type-prop/delete/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[DELETE]::/type-prop/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[DELETE]::/type-prop/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[DELETE]::/type-prop/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/type-prop/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/type-prop/delete/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"type-prop",
								"delete",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "zvyuykclatrceuwmxo1bd42p",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/type-prop/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"type-prop",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "zvyuykclatrceuwmxo1bd42p",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/type-prop/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"type-prop",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "zvyuykclatrceuwmxo1bd42p",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a conflict error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/type-prop/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"type-prop",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "zvyuykclatrceuwmxo1bd42p",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "unit",
			"item": [
				{
					"name": "/unit/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[GET]::/unit/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[GET]::/unit/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[GET]::/unit/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"propertyId\":{\"type\":\"string\"},\"floorPlanId\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"rent\":{\"type\":\"integer\"},\"deposit\":{\"type\":[\"integer\",\"null\"]},\"available\":{\"type\":\"boolean\"},\"immediate\":{\"type\":\"boolean\"},\"availableDate\":{\"type\":[\"string\",\"null\"]},\"shortterm\":{\"type\":\"boolean\"},\"longterm\":{\"type\":\"boolean\"},\"unitNumber\":{\"type\":[\"string\",\"null\"]},\"unitName\":{\"type\":[\"string\",\"null\"]},\"surface\":{\"type\":\"integer\"},\"furnished\":{\"type\":\"boolean\"},\"heat\":{\"type\":\"boolean\"},\"water\":{\"type\":\"boolean\"},\"electricity\":{\"type\":\"boolean\"},\"internet\":{\"type\":\"boolean\"},\"television\":{\"type\":\"boolean\"},\"order\":{\"type\":\"integer\"},\"published\":{\"type\":\"boolean\"},\"bedroom\":{\"type\":[\"object\",\"null\"],\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]},\"bathroom\":{\"type\":[\"object\",\"null\"],\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]}},\"required\":[\"id\",\"propertyId\",\"floorPlanId\",\"name\",\"rent\",\"deposit\",\"available\",\"immediate\",\"availableDate\",\"shortterm\",\"longterm\",\"unitNumber\",\"unitName\",\"surface\",\"furnished\",\"heat\",\"water\",\"electricity\",\"internet\",\"television\",\"order\",\"published\",\"bedroom\",\"bathroom\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/unit/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/unit/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"unit",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "amyphpzv9inobdo3x1dfu18p",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/unit/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"unit",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "amyphpzv9inobdo3x1dfu18p",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"laboris deserunt anim\",\n    \"propertyId\": \"do in enim\",\n    \"floorPlanId\": \"fugia\",\n    \"name\": \"eiusmod in occaecat\",\n    \"rent\": 2768315,\n    \"deposit\": -91133845,\n    \"available\": false,\n    \"immediate\": true,\n    \"availableDate\": \"incididunt irure ex\",\n    \"shortterm\": true,\n    \"longterm\": true,\n    \"unitNumber\": \"labore\",\n    \"unitName\": \"non\",\n    \"surface\": 8301946,\n    \"furnished\": false,\n    \"heat\": true,\n    \"water\": true,\n    \"electricity\": true,\n    \"internet\": false,\n    \"television\": false,\n    \"order\": 83446729,\n    \"published\": false,\n    \"bedroom\": {\n      \"name\": \"Ut incididunt\"\n    },\n    \"bathroom\": {\n      \"name\": \"sunt\"\n    }\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/unit/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"unit",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "amyphpzv9inobdo3x1dfu18p",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/unit/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[POST]::/unit/list - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[POST]::/unit/list - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[POST]::/unit/list - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"propertyId\":{\"type\":\"string\",\"maxLength\":128},\"floorPlanId\":{\"type\":\"string\",\"maxLength\":128},\"rent\":{\"type\":\"number\"},\"deposit\":{\"type\":[\"number\",\"null\"]},\"available\":{\"type\":\"boolean\"},\"immediate\":{\"type\":\"boolean\"},\"availableDate\":{\"type\":[\"string\",\"null\"]},\"shortterm\":{\"type\":\"boolean\"},\"longterm\":{\"type\":\"boolean\"},\"unitNumber\":{\"type\":[\"string\",\"null\"],\"maxLength\":128},\"unitName\":{\"type\":[\"string\",\"null\"],\"maxLength\":128},\"surface\":{\"type\":\"number\"},\"furnished\":{\"type\":\"boolean\"},\"bedroomId\":{\"type\":[\"string\",\"null\"],\"maxLength\":128},\"bathroomId\":{\"type\":[\"string\",\"null\"],\"maxLength\":128},\"heat\":{\"type\":\"boolean\"},\"water\":{\"type\":\"boolean\"},\"electricity\":{\"type\":\"boolean\"},\"internet\":{\"type\":\"boolean\"},\"television\":{\"type\":\"boolean\"},\"order\":{\"type\":\"number\"},\"published\":{\"type\":\"boolean\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"propertyId\",\"floorPlanId\",\"rent\",\"deposit\",\"available\",\"immediate\",\"availableDate\",\"shortterm\",\"longterm\",\"unitNumber\",\"unitName\",\"surface\",\"furnished\",\"bedroomId\",\"bathroomId\",\"heat\",\"water\",\"electricity\",\"internet\",\"television\",\"order\",\"published\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/unit/list - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"bedroomId\",\n          \"zjggk1ve17r7jmpq8dtmbjyw\"\n        ],\n        [\n          \"eq\",\n          \"bedroomId\",\n          \"kcfw2qhwnky96aeeov73aaze\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"bathroomId\",\n      \"qae4cp7xnotk3wh26dkpp7y7\"\n    ],\n    [\n      \"eq\",\n      \"longterm\",\n      1\n    ],\n    [\n      \"between\",\n      \"surface\",\n      700,\n      1000\n    ],\n    [\n      \"eq\",\n      \"furnished\",\n      1\n    ],\n    [\n      \"eq\",\n      \"heat\",\n      1\n    ],\n    [\n      \"eq\",\n      \"water\",\n      1\n    ],\n    [\n      \"eq\",\n      \"electricity\",\n      1\n    ]\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/unit/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"unit",
								"list"
							],
							"query": [
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "longterm-desc",
									"disabled": true
								},
								{
									"key": "cursor",
									"value": "abqdj6xe8puto1j83soz3bml",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with an array of unit objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"bedroomId\",\n          \"zjggk1ve17r7jmpq8dtmbjyw\"\n        ],\n        [\n          \"eq\",\n          \"bedroomId\",\n          \"kcfw2qhwnky96aeeov73aaze\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"bathroomId\",\n      \"qae4cp7xnotk3wh26dkpp7y7\"\n    ],\n    [\n      \"eq\",\n      \"longterm\",\n      1\n    ],\n    [\n      \"between\",\n      \"surface\",\n      700,\n      1000\n    ],\n    [\n      \"eq\",\n      \"furnished\",\n      1\n    ],\n    [\n      \"eq\",\n      \"heat\",\n      1\n    ],\n    [\n      \"eq\",\n      \"water\",\n      1\n    ],\n    [\n      \"eq\",\n      \"electricity\",\n      1\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/unit/list?limit=10&orderBy=longterm-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"unit",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "longterm-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"aliqua laborum elit\",\n      \"name\": \"cillum velit in quis\",\n      \"propertyId\": \"cillum ut pariatur\",\n      \"floorPlanId\": \"commodo in Duis\",\n      \"rent\": 2382499.3912050724,\n      \"deposit\": -79257148.62870982,\n      \"available\": false,\n      \"immediate\": true,\n      \"availableDate\": \"ullamco voluptate sit velit\",\n      \"shortterm\": true,\n      \"longterm\": true,\n      \"unitNumber\": \"commodo exercitation\",\n      \"unitName\": \"pariatur non\",\n      \"surface\": 25807326.02523233,\n      \"furnished\": true,\n      \"bedroomId\": \"nisi id in\",\n      \"bathroomId\": \"enim\",\n      \"heat\": false,\n      \"water\": true,\n      \"electricity\": true,\n      \"internet\": false,\n      \"television\": true,\n      \"order\": -83205917.59510174,\n      \"published\": true,\n      \"createdAt\": \"in eu\",\n      \"updatedAt\": \"nisi cupidatat occaecat in\"\n    },\n    {\n      \"id\": \"eu esse ex culpa\",\n      \"name\": \"anim enim\",\n      \"propertyId\": \"do amet minim velit\",\n      \"floorPlanId\": \"sint voluptate dolor amet quis\",\n      \"rent\": -72091557.0342278,\n      \"deposit\": 8601333.393275648,\n      \"available\": false,\n      \"immediate\": true,\n      \"availableDate\": \"dolore anim dolore\",\n      \"shortterm\": true,\n      \"longterm\": true,\n      \"unitNumber\": \"nostrud aute elit\",\n      \"unitName\": \"in\",\n      \"surface\": 31430733.677730992,\n      \"furnished\": false,\n      \"bedroomId\": \"ut sed in\",\n      \"bathroomId\": \"mollit dolore fugi\",\n      \"heat\": true,\n      \"water\": false,\n      \"electricity\": true,\n      \"internet\": true,\n      \"television\": true,\n      \"order\": -72106924.2487804,\n      \"published\": false,\n      \"createdAt\": \"velit incididunt\",\n      \"updatedAt\": \"incididunt\"\n    }\n  ]\n}"
						},
						{
							"name": "Responds with a bad request error object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"bedroomId\",\n          \"zjggk1ve17r7jmpq8dtmbjyw\"\n        ],\n        [\n          \"eq\",\n          \"bedroomId\",\n          \"kcfw2qhwnky96aeeov73aaze\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"bathroomId\",\n      \"qae4cp7xnotk3wh26dkpp7y7\"\n    ],\n    [\n      \"eq\",\n      \"longterm\",\n      1\n    ],\n    [\n      \"between\",\n      \"surface\",\n      700,\n      1000\n    ],\n    [\n      \"eq\",\n      \"furnished\",\n      1\n    ],\n    [\n      \"eq\",\n      \"heat\",\n      1\n    ],\n    [\n      \"eq\",\n      \"water\",\n      1\n    ],\n    [\n      \"eq\",\n      \"electricity\",\n      1\n    ]\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/unit/list?limit=10&orderBy=longterm-desc&cursor=abqdj6xe8puto1j83soz3bml",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"unit",
										"list"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "orderBy",
											"value": "longterm-desc"
										},
										{
											"key": "cursor",
											"value": "abqdj6xe8puto1j83soz3bml"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/unit/create",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[POST]::/unit/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[POST]::/unit/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[POST]::/unit/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/unit/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"propertyId\": \"hdsyi7gw3n77jrngcck1x33y\",\n  \"floorPlanId\": \"fe897wto8ribvu9024zvfvxp\",\n  \"name\": \"Unit name\",\n  \"rent\": 1000,\n  \"deposit\": 1000,\n  \"shortterm\": true,\n  \"longterm\": true,\n  \"unitNumber\": \"101\",\n  \"unitName\": \"101\",\n  \"surface\": 1000,\n  \"furnished\": true,\n  \"heat\": true,\n  \"water\": true,\n  \"electricity\": true,\n  \"internet\": true,\n  \"television\": true,\n  \"order\": 1,\n  \"bedroomId\": \"zjggk1ve17r7jmpq8dtmbjyw\",\n  \"bathroomId\": \"qae4cp7xnotk3wh26dkpp7y7\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/unit/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"unit",
								"create"
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"propertyId\": \"hdsyi7gw3n77jrngcck1x33y\",\n  \"floorPlanId\": \"fe897wto8ribvu9024zvfvxp\",\n  \"name\": \"Unit name\",\n  \"rent\": 1000,\n  \"deposit\": 1000,\n  \"shortterm\": true,\n  \"longterm\": true,\n  \"unitNumber\": \"101\",\n  \"unitName\": \"101\",\n  \"surface\": 1000,\n  \"furnished\": true,\n  \"heat\": true,\n  \"water\": true,\n  \"electricity\": true,\n  \"internet\": true,\n  \"television\": true,\n  \"order\": 1,\n  \"bedroomId\": \"zjggk1ve17r7jmpq8dtmbjyw\",\n  \"bathroomId\": \"qae4cp7xnotk3wh26dkpp7y7\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/unit/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"unit",
										"create"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sit sint voluptate aute\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"propertyId\": \"hdsyi7gw3n77jrngcck1x33y\",\n  \"floorPlanId\": \"fe897wto8ribvu9024zvfvxp\",\n  \"name\": \"Unit name\",\n  \"rent\": 1000,\n  \"deposit\": 1000,\n  \"shortterm\": true,\n  \"longterm\": true,\n  \"unitNumber\": \"101\",\n  \"unitName\": \"101\",\n  \"surface\": 1000,\n  \"furnished\": true,\n  \"heat\": true,\n  \"water\": true,\n  \"electricity\": true,\n  \"internet\": true,\n  \"television\": true,\n  \"order\": 1,\n  \"bedroomId\": \"zjggk1ve17r7jmpq8dtmbjyw\",\n  \"bathroomId\": \"qae4cp7xnotk3wh26dkpp7y7\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/unit/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"unit",
										"create"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/unit/update/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[PUT]::/unit/update/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[PUT]::/unit/update/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[PUT]::/unit/update/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[PUT]::/unit/update/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"rent\": 1500,\n  \"deposit\": 1500,\n  \"shortterm\": false,\n  \"longterm\": true,\n  \"order\": 0,\n  \"published\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/unit/update/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"unit",
								"update",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "amyphpzv9inobdo3x1dfu18p",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with the id of the updated unit.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"rent\": 1500,\n  \"deposit\": 1500,\n  \"shortterm\": false,\n  \"longterm\": true,\n  \"order\": 0,\n  \"published\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/unit/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"unit",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "amyphpzv9inobdo3x1dfu18p",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sit sint voluptate aute\"\n  }\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"rent\": 1500,\n  \"deposit\": 1500,\n  \"shortterm\": false,\n  \"longterm\": true,\n  \"order\": 0,\n  \"published\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/unit/update/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"unit",
										"update",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "amyphpzv9inobdo3x1dfu18p",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/unit/delete/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate status 2xx \npm.test(\"[DELETE]::/unit/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
									"// Validate if response header has matching content-type\npm.test(\"[DELETE]::/unit/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
									"// Validate if response has JSON Body \npm.test(\"[DELETE]::/unit/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
									"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/unit/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/unit/delete/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"unit",
								"delete",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "amyphpzv9inobdo3x1dfu18p",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Responds with a success message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/unit/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"unit",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "amyphpzv9inobdo3x1dfu18p",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						},
						{
							"name": "Responds with a bad request error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/unit/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"unit",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "amyphpzv9inobdo3x1dfu18p",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						},
						{
							"name": "Responds with a conflict error message.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/unit/delete/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"unit",
										"delete",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "amyphpzv9inobdo3x1dfu18p",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"incididunt id\",\n    \"issues\": [\n      {\n        \"message\": \"in sed\",\n        \"path\": [\n          \"commodo est\",\n          \"magna consequat\"\n        ]\n      },\n      {\n        \"message\": \"laboris tempor ex deserunt \",\n        \"path\": [\n          \"cupidatat aliquip reprehenderit anim\",\n          \"in\"\n        ]\n      }\n    ]\n  }\n}"
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		}
	]
}