{
  "_": {
    "postman_id": "a5d315e1-f0db-417d-858f-01cda164ef80"
  },
  "item": [
    {
      "id": "4c69a5cf-f4d2-4230-b43c-b9f1ed0b9017",
      "name": "home",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "c5f92312-4195-4827-b0fe-8943fcaf8168",
          "name": "/",
          "request": {
            "name": "/",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                ""
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "471de9c1-bbe0-4a7c-8f80-b1a986052bd1",
              "name": "Responds with a message",
              "originalRequest": {
                "url": {
                  "path": [
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"message\": \"proident irure amet veniam incididunt\"\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b1f2a035-8776-4d01-9486-7201a236dab6",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/ - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/ - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/ - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"message\":{\"type\":\"string\"}},\"required\":[\"message\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/ - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "7d774d51-9c1d-4849-89fd-edee53396465",
      "name": "search",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "3fc8423f-5b5b-4c4e-860e-018f96520dfa",
          "name": "/search",
          "request": {
            "name": "/search",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "search"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "limit",
                  "value": "10"
                },
                {
                  "disabled": true,
                  "key": "cursor",
                  "value": "abqdj6xe8puto1j83soz3bml"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"and\": [\n    [\n      \"eq\",\n      \"smoking\",\n      1\n    ],\n    [\n      \"between\",\n      \"rent\",\n      1000,\n      1200\n    ],\n    [\n      \"like\",\n      \"address\",\n      \"Crescent\"\n    ],\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"cats\",\n          1\n        ],\n        [\n          \"eq\",\n          \"dogs\",\n          1\n        ]\n      ]\n    ],\n    [\n      \"aroundLatLng\",\n      50.9573828,\n      -114.084153,\n      1000\n    ]\n  ],\n  \"fields\": [\n    \"listingId\",\n    \"propertyId\",\n    \"rent\",\n    \"immediate\",\n    \"imageId\"\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "cbd62f47-8be7-4826-bdb1-37b7a75d7b4b",
              "name": "Responds with an array of property unit objects. If no filters are used, all property units are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
              "originalRequest": {
                "url": {
                  "path": [
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"eq\",\n      \"smoking\",\n      1\n    ],\n    [\n      \"between\",\n      \"rent\",\n      1000,\n      1200\n    ],\n    [\n      \"like\",\n      \"address\",\n      \"Crescent\"\n    ],\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"cats\",\n          1\n        ],\n        [\n          \"eq\",\n          \"dogs\",\n          1\n        ]\n      ]\n    ],\n    [\n      \"aroundLatLng\",\n      50.9573828,\n      -114.084153,\n      1000\n    ]\n  ],\n  \"fields\": [\n    \"listingId\",\n    \"propertyId\",\n    \"rent\",\n    \"immediate\",\n    \"imageId\"\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"irure et aliqua eiusmod Excepteur\",\n      \"propertyId\": \"elit in\",\n      \"rent\": 54392999.60352501,\n      \"immediate\": 49913256.110218406,\n      \"availableDate\": \"reprehenderit adipisicing qui id\",\n      \"shortterm\": 63038548.09867442,\n      \"longterm\": 91018446.93733609,\n      \"furnished\": 49110894.03481829,\n      \"heat\": -88921858.24986547,\n      \"water\": 65101234.6039103,\n      \"electricity\": -6225176.13976261,\n      \"internet\": -60900432.50811079,\n      \"television\": 58482548.487502635,\n      \"bedroom\": \"consectetur proident\",\n      \"bathroom\": \"voluptate proident do ullamco et\",\n      \"listingId\": 61006224.073785156,\n      \"address\": \"ullamco aliquip deserunt sint\",\n      \"community\": \"incididunt qui irure exercitation u\",\n      \"type\": \"qui cupidatat sit voluptate\",\n      \"smoking\": 50107106.590664744,\n      \"cats\": -67901074.26703398,\n      \"dogs\": -18712708.274421975,\n      \"parking\": \"occaecat id\",\n      \"feature\": \"reprehenderit sunt amet\",\n      \"imageId\": \"commodo tempor veniam sint\",\n      \"latitude\": \"reprehenderit nostrud ut proident\",\n      \"longitude\": \"deserunt et enim velit adipisicing\"\n    },\n    {\n      \"id\": \"amet cupidatat\",\n      \"propertyId\": \"deserunt\",\n      \"rent\": -8302696.872046322,\n      \"immediate\": -63640166.684705734,\n      \"availableDate\": \"voluptate non\",\n      \"shortterm\": -95698249.71809262,\n      \"longterm\": 53263788.877227455,\n      \"furnished\": -45771809.59488496,\n      \"heat\": 5394522.184259728,\n      \"water\": 48814319.993964255,\n      \"electricity\": -69075244.57894328,\n      \"internet\": -56363871.23334012,\n      \"television\": -8077258.680493087,\n      \"bedroom\": \"non id ut eiusmod\",\n      \"bathroom\": \"tempor nisi\",\n      \"listingId\": 42983016.64543179,\n      \"address\": \"voluptate in amet anim reprehenderit\",\n      \"community\": \"labore irure\",\n      \"type\": \"amet in deserunt sint\",\n      \"smoking\": -92723739.30768092,\n      \"cats\": 65364020.646048665,\n      \"dogs\": 49973132.395667404,\n      \"parking\": \"elit dolore commodo nostrud v\",\n      \"feature\": \"sed est nisi do\",\n      \"imageId\": \"nulla aute\",\n      \"latitude\": \"ad mollit commodo\",\n      \"longitude\": \"nulla quis velit\"\n    }\n  ]\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "f19c5af8-7642-400b-85a4-8828f58edc36",
              "name": "Responds with a bad request error object",
              "originalRequest": {
                "url": {
                  "path": [
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"eq\",\n      \"smoking\",\n      1\n    ],\n    [\n      \"between\",\n      \"rent\",\n      1000,\n      1200\n    ],\n    [\n      \"like\",\n      \"address\",\n      \"Crescent\"\n    ],\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"cats\",\n          1\n        ],\n        [\n          \"eq\",\n          \"dogs\",\n          1\n        ]\n      ]\n    ],\n    [\n      \"aroundLatLng\",\n      50.9573828,\n      -114.084153,\n      1000\n    ]\n  ],\n  \"fields\": [\n    \"listingId\",\n    \"propertyId\",\n    \"rent\",\n    \"immediate\",\n    \"imageId\"\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c48c250b-766c-49de-b47c-1e7333a46289",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/search - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/search - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/search - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"propertyId\":{\"type\":\"string\"},\"rent\":{\"type\":\"number\"},\"immediate\":{\"type\":\"number\"},\"availableDate\":{\"type\":\"string\"},\"shortterm\":{\"type\":\"number\"},\"longterm\":{\"type\":\"number\"},\"furnished\":{\"type\":\"number\"},\"heat\":{\"type\":\"number\"},\"water\":{\"type\":\"number\"},\"electricity\":{\"type\":\"number\"},\"internet\":{\"type\":\"number\"},\"television\":{\"type\":\"number\"},\"bedroom\":{\"type\":\"string\"},\"bathroom\":{\"type\":\"string\"},\"listingId\":{\"type\":\"number\"},\"address\":{\"type\":\"string\"},\"community\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"},\"smoking\":{\"type\":\"number\"},\"cats\":{\"type\":\"number\"},\"dogs\":{\"type\":\"number\"},\"parking\":{\"type\":\"string\"},\"feature\":{\"type\":\"string\"},\"imageId\":{\"type\":\"string\"},\"latitude\":{\"type\":\"string\"},\"longitude\":{\"type\":\"string\"}},\"required\":[\"id\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/search - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "0fed5c3d-906c-42ec-9223-041f967fac17",
      "name": "bathroom",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "58944869-65f3-48a4-bf49-c172de8c2ef3",
          "name": "/bathroom/list",
          "request": {
            "name": "/bathroom/list",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "bathroom",
                "list"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "limit",
                  "value": "10"
                },
                {
                  "disabled": true,
                  "key": "orderBy",
                  "value": "updatedAt-asc"
                },
                {
                  "disabled": true,
                  "key": "cursor",
                  "value": "abqdj6xe8puto1j83soz3bml"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "0a7a9c81-2fdc-459a-baf1-47b7991f7b6b",
              "name": "Responds with an array of bathroom objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
              "originalRequest": {
                "url": {
                  "path": [
                    "bathroom",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "updatedAt-asc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"mollit adipisicing in\",\n      \"name\": \"ullamco nostrud ea\",\n      \"order\": -2556487.8001251817,\n      \"createdAt\": \"minim\",\n      \"updatedAt\": \"nostrud fugiat officia\"\n    },\n    {\n      \"id\": \"amet enim\",\n      \"name\": \"ex quis\",\n      \"order\": -99635132.47752136,\n      \"createdAt\": \"ad in\",\n      \"updatedAt\": \"v\"\n    }\n  ]\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "c263af80-b97b-467b-ac0d-2bea76de2150",
              "name": "Responds with a bad request error object",
              "originalRequest": {
                "url": {
                  "path": [
                    "bathroom",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "updatedAt-asc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3f01cd8a-88e8-462d-bcd4-97a367a2ceb4",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/bathroom/list - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/bathroom/list - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/bathroom/list - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"order\":{\"type\":\"number\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"order\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/bathroom/list - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "5fee05ec-590a-4eea-89bf-e0e0a8428fca",
          "name": "/bathroom/create",
          "request": {
            "name": "/bathroom/create",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "bathroom",
                "create"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "2ba141bc-e9b0-459e-be35-6f4ef5875b27",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "bathroom",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sed ut aute\"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "59536059-8585-47a4-95c8-99d8dce14725",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "bathroom",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "856d9628-8fde-40b2-9a7b-4279c9e0c58c",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/bathroom/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/bathroom/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/bathroom/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/bathroom/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "4f7d3bb2-5945-4d24-be6d-5325a3097c51",
          "name": "/bathroom/update/:id",
          "request": {
            "name": "/bathroom/update/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "bathroom",
                "update",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "Duis in non tempor",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "751ac89e-9653-4cfb-8072-5746454bcbf0",
              "name": "Responds with the id of the updated bathroom.",
              "originalRequest": {
                "url": {
                  "path": [
                    "bathroom",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sed ut aute\"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "cc4c3d6c-dc53-4584-9b0b-4e233236b755",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "bathroom",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f88e98bb-d06d-4534-b0d6-7b7afc772c68",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[PUT]::/bathroom/update/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[PUT]::/bathroom/update/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[PUT]::/bathroom/update/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[PUT]::/bathroom/update/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "8e8ed9cd-6f4c-4991-8e4e-881476297f41",
          "name": "/bathroom/delete/:id",
          "request": {
            "name": "/bathroom/delete/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "bathroom",
                "delete",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "Duis in non tempor",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "efa99329-9997-4f32-9515-b0ca2c37a52b",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "bathroom",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "dd05584f-75f0-43d8-aeb6-a51f4886a381",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "bathroom",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "6a363349-b121-4a2d-b8dd-76d986313d11",
              "name": "Responds with a conflict error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "bathroom",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e5a24a74-d682-4f99-a77f-ece5738e0358",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[DELETE]::/bathroom/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[DELETE]::/bathroom/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[DELETE]::/bathroom/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/bathroom/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "e9d56b2e-cbb0-4429-9d37-ca3089bd8ddf",
      "name": "bedroom",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "c903c7b4-23ff-434e-8627-358f6daaa6c0",
          "name": "/bedroom/list",
          "request": {
            "name": "/bedroom/list",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "bedroom",
                "list"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "limit",
                  "value": "10"
                },
                {
                  "disabled": true,
                  "key": "orderBy",
                  "value": "updatedAt-asc"
                },
                {
                  "disabled": true,
                  "key": "cursor",
                  "value": "abqdj6xe8puto1j83soz3bml"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "ec9506ab-f2f8-4d15-aeb0-ce5f40840fef",
              "name": "Responds with an array of bedroom objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
              "originalRequest": {
                "url": {
                  "path": [
                    "bedroom",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "updatedAt-asc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"mollit adipisicing in\",\n      \"name\": \"ullamco nostrud ea\",\n      \"order\": -2556487.8001251817,\n      \"createdAt\": \"minim\",\n      \"updatedAt\": \"nostrud fugiat officia\"\n    },\n    {\n      \"id\": \"amet enim\",\n      \"name\": \"ex quis\",\n      \"order\": -99635132.47752136,\n      \"createdAt\": \"ad in\",\n      \"updatedAt\": \"v\"\n    }\n  ]\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "714ae793-5526-4b2d-8013-91726f9f3288",
              "name": "Responds with a bad request error object",
              "originalRequest": {
                "url": {
                  "path": [
                    "bedroom",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "updatedAt-asc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "88512168-7ff5-459c-9f68-66e11b469130",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/bedroom/list - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/bedroom/list - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/bedroom/list - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"order\":{\"type\":\"number\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"order\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/bedroom/list - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "20b0f740-b02e-4518-8fb2-cd1dbbe851ba",
          "name": "/bedroom/create",
          "request": {
            "name": "/bedroom/create",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "bedroom",
                "create"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "04877719-ef99-447c-9302-5211e7ba2538",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "bedroom",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sed ut aute\"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "f2310c61-1e78-46d9-9f0c-d7e5bed4a2e7",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "bedroom",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "14147abe-ca39-4d82-bec8-df7fd3d9d5d6",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/bedroom/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/bedroom/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/bedroom/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/bedroom/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "7db879c7-6b28-4b33-b907-afee920a568c",
          "name": "/bedroom/update/:id",
          "request": {
            "name": "/bedroom/update/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "bedroom",
                "update",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "Duis in non tempor",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "e864df73-148e-41a7-8afc-ab8a4f04b63a",
              "name": "Responds with the id of the updated bedroom.",
              "originalRequest": {
                "url": {
                  "path": [
                    "bedroom",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sed ut aute\"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "c718f268-50fc-4589-90da-f5361538dd5f",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "bedroom",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8e03ced4-c995-40cf-b1ec-cfa80d456290",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[PUT]::/bedroom/update/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[PUT]::/bedroom/update/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[PUT]::/bedroom/update/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[PUT]::/bedroom/update/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "191f0cb2-bb4f-4a25-a60b-27d3d430a8a0",
          "name": "/bedroom/delete/:id",
          "request": {
            "name": "/bedroom/delete/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "bedroom",
                "delete",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "Duis in non tempor",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "2024ca3a-6841-4a94-9a67-30b121398fa5",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "bedroom",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "2187e71a-1a7c-4fd5-af59-cd4c25706b56",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "bedroom",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "66fd3455-7def-4ac7-8ef7-38d84714051e",
              "name": "Responds with a conflict error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "bedroom",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "70ecafeb-b4e8-4b29-9139-db5593d809be",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[DELETE]::/bedroom/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[DELETE]::/bedroom/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[DELETE]::/bedroom/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/bedroom/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "9004ddb2-dc8d-41c4-901f-1dc2bef9eeb0",
      "name": "buildingFeatureToProperty",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "9247f3c6-3e36-4627-8b6e-c722699a7776",
          "name": "/building-feature-to-property/features-by-item/:itemId",
          "request": {
            "name": "/building-feature-to-property/features-by-item/:itemId",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "building-feature-to-property",
                "features-by-item",
                ":itemId"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "Duis in non tempor",
                  "key": "itemId"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "87f7c7e3-1902-43a1-a91e-c32be5f9444f",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "building-feature-to-property",
                    "features-by-item",
                    ":itemId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "itemId"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"buildingFeatureId\": \"dolore do proident\",\n      \"buildingFeature\": {\n        \"name\": \"ea nulla dolor\"\n      }\n    },\n    {\n      \"buildingFeatureId\": \"ull\",\n      \"buildingFeature\": {\n        \"name\": \"dolore qui quis\"\n      }\n    }\n  ]\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "02745d1b-87d0-48a6-bd09-bb380139bf6c",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "building-feature-to-property",
                    "features-by-item",
                    ":itemId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "itemId"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0659e595-ab7b-4f06-bb96-c511cf817bf1",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/building-feature-to-property/features-by-item/:itemId - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/building-feature-to-property/features-by-item/:itemId - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/building-feature-to-property/features-by-item/:itemId - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"buildingFeatureId\":{\"type\":\"string\"},\"buildingFeature\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]}},\"required\":[\"buildingFeatureId\",\"buildingFeature\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/building-feature-to-property/features-by-item/:itemId - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "3886a809-90ca-4170-9061-68fad1e2b61f",
          "name": "/building-feature-to-property/create",
          "request": {
            "name": "/building-feature-to-property/create",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "building-feature-to-property",
                "create"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"featureId\": \"kse7hpwwu3rj6ook4g90nvzs\",\n  \"itemId\": \"a5ug1fdwkkc4byl1uw9d7cqo\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "7c626df2-331e-4aae-abef-89f5ef5b3480",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "building-feature-to-property",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"featureId\": \"kse7hpwwu3rj6ook4g90nvzs\",\n  \"itemId\": \"a5ug1fdwkkc4byl1uw9d7cqo\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "da40fd19-90ec-4111-8f9e-615262a42e1e",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "building-feature-to-property",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"featureId\": \"kse7hpwwu3rj6ook4g90nvzs\",\n  \"itemId\": \"a5ug1fdwkkc4byl1uw9d7cqo\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "408310f5-17eb-4dd0-a497-7b22fe522b22",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/building-feature-to-property/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/building-feature-to-property/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/building-feature-to-property/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/building-feature-to-property/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "0e1a8625-d785-4095-89a6-2ac483d1b16a",
          "name": "/building-feature-to-property/delete/:featureId/:itemId",
          "request": {
            "name": "/building-feature-to-property/delete/:featureId/:itemId",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "building-feature-to-property",
                "delete",
                ":featureId",
                ":itemId"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "Duis in non tempor",
                  "key": "featureId"
                },
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "Duis in non tempor",
                  "key": "itemId"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "e0bdd01d-ad78-4c21-8f4a-3e36ebe66803",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "building-feature-to-property",
                    "delete",
                    ":featureId",
                    ":itemId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "featureId"
                    },
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "itemId"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "81d52022-dd0a-4fc5-8eb2-64222f55a8f0",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "building-feature-to-property",
                    "delete",
                    ":featureId",
                    ":itemId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "featureId"
                    },
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "itemId"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d80f219a-3bbc-469a-8ef2-3b39618504c3",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[DELETE]::/building-feature-to-property/delete/:featureId/:itemId - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[DELETE]::/building-feature-to-property/delete/:featureId/:itemId - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[DELETE]::/building-feature-to-property/delete/:featureId/:itemId - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/building-feature-to-property/delete/:featureId/:itemId - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "d36a7b44-ba83-47d6-bf16-5b2a04d7cfd0",
      "name": "city",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "44fab126-ae70-4756-b770-8e05bfdc6199",
          "name": "/city/list",
          "request": {
            "name": "/city/list",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "city",
                "list"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "limit",
                  "value": "10"
                },
                {
                  "disabled": true,
                  "key": "orderBy",
                  "value": "createdAt-desc"
                },
                {
                  "disabled": true,
                  "key": "cursor",
                  "value": "abqdj6xe8puto1j83soz3bml"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        \"eq\",\n        \"name\",\n        \"Toronto\"\n      ],\n      [\n        \"eq\",\n        \"name\",\n        \"Ottawa\"\n      ],\n      [\n        \"eq\",\n        \"name\",\n        \"Mississauga\"\n      ]\n    ],\n    [\n      \"eq\",\n      \"regionId\",\n      \"atgl5rbiijouz9695d01vpne\"\n    ]\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "7070c13d-f27e-4474-b437-41cc90fe106e",
              "name": "Responds with an array of city objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
              "originalRequest": {
                "url": {
                  "path": [
                    "city",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "createdAt-desc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        \"eq\",\n        \"name\",\n        \"Toronto\"\n      ],\n      [\n        \"eq\",\n        \"name\",\n        \"Ottawa\"\n      ],\n      [\n        \"eq\",\n        \"name\",\n        \"Mississauga\"\n      ]\n    ],\n    [\n      \"eq\",\n      \"regionId\",\n      \"atgl5rbiijouz9695d01vpne\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"veniam tempor sunt sed\",\n      \"name\": \"do occaecat non laboris cupidatat\",\n      \"latitude\": \"incididunt in laborum\",\n      \"longitude\": \"ut eiusmod\",\n      \"regionId\": \"anim aute adipisicing tempor\",\n      \"createdAt\": \"in ut\",\n      \"updatedAt\": \"labore nostrud consequat proident\"\n    },\n    {\n      \"id\": \"irure dolore\",\n      \"name\": \"ea\",\n      \"latitude\": \"Excepteur dolore\",\n      \"longitude\": \"sunt tempor reprehenderit aliqua\",\n      \"regionId\": \"dolor\",\n      \"createdAt\": \"sed enim dolore\",\n      \"updatedAt\": \"ut\"\n    }\n  ]\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "cc04ed78-7198-4527-8d62-45c386644a7f",
              "name": "Responds with a bad request error object",
              "originalRequest": {
                "url": {
                  "path": [
                    "city",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "createdAt-desc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        \"eq\",\n        \"name\",\n        \"Toronto\"\n      ],\n      [\n        \"eq\",\n        \"name\",\n        \"Ottawa\"\n      ],\n      [\n        \"eq\",\n        \"name\",\n        \"Mississauga\"\n      ]\n    ],\n    [\n      \"eq\",\n      \"regionId\",\n      \"atgl5rbiijouz9695d01vpne\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8f28314a-5411-4d52-b1f0-d331d2883dd2",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/city/list - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/city/list - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/city/list - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"latitude\":{\"type\":\"string\"},\"longitude\":{\"type\":\"string\"},\"regionId\":{\"type\":\"string\",\"maxLength\":128},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"latitude\",\"longitude\",\"regionId\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/city/list - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "8813e563-40b6-48c1-a3b7-b9bdef4eecbb",
          "name": "/city/create",
          "request": {
            "name": "/city/create",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "city",
                "create"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Toronto\",\n  \"regionId\": \"atgl5rbiijouz9695d01vpne\",\n  \"latitude\": \"43.741667\",\n  \"longitude\": \"-79.373333\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "4919708c-387e-4abf-bfb5-2897c3201d8e",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "city",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Toronto\",\n  \"regionId\": \"atgl5rbiijouz9695d01vpne\",\n  \"latitude\": \"43.741667\",\n  \"longitude\": \"-79.373333\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sed ut aute\"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "151a4f90-c98c-4466-af84-8eaeaaea44d1",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "city",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Toronto\",\n  \"regionId\": \"atgl5rbiijouz9695d01vpne\",\n  \"latitude\": \"43.741667\",\n  \"longitude\": \"-79.373333\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cc419b44-a309-4f98-91e5-7c631d9fb5ff",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/city/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/city/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/city/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/city/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "652c675b-ea0f-4576-a2d8-3bcf9ecb8d0f",
          "name": "/city/update/:id",
          "request": {
            "name": "/city/update/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "city",
                "update",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "Duis in non tempor",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Vancouver\",\n  \"regionId\": \"atgl5rbiijouz9695d01vpne\",\n  \"latitude\": \"49.2827\",\n  \"longitude\": \"-123.1207\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "65951fd9-1b08-4506-a263-91b4da794f90",
              "name": "Responds with the id of the updated city.",
              "originalRequest": {
                "url": {
                  "path": [
                    "city",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Vancouver\",\n  \"regionId\": \"atgl5rbiijouz9695d01vpne\",\n  \"latitude\": \"49.2827\",\n  \"longitude\": \"-123.1207\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sed ut aute\"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "cd16c579-d6cf-41ae-9c0b-8680df1a3e3b",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "city",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Vancouver\",\n  \"regionId\": \"atgl5rbiijouz9695d01vpne\",\n  \"latitude\": \"49.2827\",\n  \"longitude\": \"-123.1207\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "20bb8286-7413-4c09-b161-67fa4e960664",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[PUT]::/city/update/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[PUT]::/city/update/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[PUT]::/city/update/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[PUT]::/city/update/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "20b4476b-08c0-49b3-a018-32c9434bf239",
          "name": "/city/delete/:id",
          "request": {
            "name": "/city/delete/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "city",
                "delete",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "Duis in non tempor",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "26121510-b477-4d01-953c-d1fe36fb6484",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "city",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "a5f69eb3-08af-407d-9117-60196b9698ec",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "city",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "eead6e91-18b9-43f7-a4fc-f8fcd41a6ec8",
              "name": "Responds with a conflict error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "city",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5f83763a-ca6b-4921-8d91-c904347c8aa8",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[DELETE]::/city/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[DELETE]::/city/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[DELETE]::/city/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/city/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "b7e6daa4-4d7c-4e43-84f4-2b950d039631",
      "name": "community",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "ce92d7f6-6d89-47ac-838a-f78da43aed88",
          "name": "/community/:id",
          "request": {
            "name": "/community/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "community",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "Duis in non tempor",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "81a11787-80eb-4269-aad1-7f0e51a40765",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"adipisicing incididunt aliqua\",\n    \"name\": \"eu irure nostrud qui\",\n    \"score\": -62816485,\n    \"imageUrl\": \"labore dolore in veniam ut\",\n    \"quadrant\": \"incididunt fugiat magna esse consequat\",\n    \"sector\": \"tempor sed nostrud\",\n    \"ward\": \"id consequat voluptate aute elit\",\n    \"population\": -10514806,\n    \"dwellings\": -11014758,\n    \"usedForRenting\": \"occaecat Ut\",\n    \"area\": \"Duis eiusmod do irure ea\",\n    \"density\": \"cupidatat Duis laboris eu\",\n    \"averageIncome\": 76023453,\n    \"lowIncome\": \"e\",\n    \"immigrants\": \"Ut nulla\",\n    \"elevation\": -26978129,\n    \"established\": 40272285,\n    \"description\": \"aliquip nisi\",\n    \"latitude\": \"incididunt culpa reprehenderit sed\",\n    \"longitude\": \"proident\",\n    \"city\": {\n      \"name\": \"labor\"\n    },\n    \"communityFeatureToCommunity\": [\n      {\n        \"communityFeature\": {\n          \"name\": \"qui id cillum sunt in\"\n        }\n      },\n      {\n        \"communityFeature\": {\n          \"name\": \"do ad aute ipsum\"\n        }\n      }\n    ]\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "38048ab5-135f-4c61-be77-f23ec35cf3b6",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dd48f46d-db7a-4f68-8825-b691742717f3",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/community/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/community/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/community/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"score\":{\"type\":[\"integer\",\"null\"]},\"imageUrl\":{\"type\":[\"string\",\"null\"]},\"quadrant\":{\"type\":[\"string\",\"null\"]},\"sector\":{\"type\":[\"string\",\"null\"]},\"ward\":{\"type\":[\"string\",\"null\"]},\"population\":{\"type\":[\"integer\",\"null\"]},\"dwellings\":{\"type\":[\"integer\",\"null\"]},\"usedForRenting\":{\"type\":[\"string\",\"null\"]},\"area\":{\"type\":[\"string\",\"null\"]},\"density\":{\"type\":[\"string\",\"null\"]},\"averageIncome\":{\"type\":[\"integer\",\"null\"]},\"lowIncome\":{\"type\":[\"string\",\"null\"]},\"immigrants\":{\"type\":[\"string\",\"null\"]},\"elevation\":{\"type\":[\"integer\",\"null\"]},\"established\":{\"type\":[\"integer\",\"null\"]},\"description\":{\"type\":[\"string\",\"null\"]},\"latitude\":{\"type\":\"string\"},\"longitude\":{\"type\":\"string\"},\"city\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]},\"communityFeatureToCommunity\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"communityFeature\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]}},\"required\":[\"communityFeature\"]}}},\"required\":[\"id\",\"name\",\"score\",\"imageUrl\",\"quadrant\",\"sector\",\"ward\",\"population\",\"dwellings\",\"usedForRenting\",\"area\",\"density\",\"averageIncome\",\"lowIncome\",\"immigrants\",\"elevation\",\"established\",\"description\",\"latitude\",\"longitude\",\"city\",\"communityFeatureToCommunity\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/community/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "717c9336-ce1e-4262-a775-dcdd4dbae1a9",
          "name": "/community/list",
          "request": {
            "name": "/community/list",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "community",
                "list"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "limit",
                  "value": "10"
                },
                {
                  "disabled": true,
                  "key": "orderBy",
                  "value": "createdAt-desc"
                },
                {
                  "disabled": true,
                  "key": "cursor",
                  "value": "abqdj6xe8puto1j83soz3bml"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Community name 1\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Community name 1\"\n        ]\n      ]\n    ],\n    [\n      \"gt\",\n      \"area\",\n      3\n    ],\n    [\n      \"lt\",\n      \"population\",\n      2000\n    ],\n    [\n      \"eq\",\n      \"quadrant\",\n      \"NW\"\n    ]\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "1f3f3b0e-c020-4a26-aa88-95a74db617bc",
              "name": "Responds with an array of community objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
              "originalRequest": {
                "url": {
                  "path": [
                    "community",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "createdAt-desc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Community name 1\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Community name 1\"\n        ]\n      ]\n    ],\n    [\n      \"gt\",\n      \"area\",\n      3\n    ],\n    [\n      \"lt\",\n      \"population\",\n      2000\n    ],\n    [\n      \"eq\",\n      \"quadrant\",\n      \"NW\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"aute esse\",\n      \"name\": \"in tempor sint magna\",\n      \"score\": -52664436.008880466,\n      \"imageUrl\": \"in voluptate consequat aliqua\",\n      \"quadrant\": \"veniam\",\n      \"sector\": \"tempo\",\n      \"ward\": \"eu sunt sint\",\n      \"population\": -1925211.3785039037,\n      \"dwellings\": 9311490.434622362,\n      \"usedForRenting\": \"ut ut in nostrud\",\n      \"area\": \"incididunt voluptate\",\n      \"density\": \"reprehenderit non\",\n      \"averageIncome\": -96988402.14672849,\n      \"lowIncome\": \"aute nulla ad cupidatat ut\",\n      \"immigrants\": \"ipsum occaecat id pariatur\",\n      \"elevation\": -68194223.68444812,\n      \"established\": 16412516.178267151,\n      \"description\": \"exercitation n\",\n      \"latitude\": \"sunt ad aliqua elit\",\n      \"longitude\": \"in sit nulla veniam\",\n      \"cityId\": \"velit ad\",\n      \"createdAt\": \"consectetur inci\",\n      \"updatedAt\": \"velit culpa qui in\"\n    },\n    {\n      \"id\": \"dolor adipisicing est\",\n      \"name\": \"nisi id pariatur incididunt\",\n      \"score\": -92088923.26779461,\n      \"imageUrl\": \"Duis irure\",\n      \"quadrant\": \"Lorem aliquip\",\n      \"sector\": \"nostrud irure tempor magna\",\n      \"ward\": \"Lorem ut velit dolor\",\n      \"population\": -75420291.37061186,\n      \"dwellings\": -59161043.012512326,\n      \"usedForRenting\": \"eu Duis voluptate ea\",\n      \"area\": \"eiusmod\",\n      \"density\": \"cillum deserunt ullamco\",\n      \"averageIncome\": -60937681.99852567,\n      \"lowIncome\": \"irure in\",\n      \"immigrants\": \"deserunt eiusmod qui\",\n      \"elevation\": -88768256.5728937,\n      \"established\": 83105556.5902273,\n      \"description\": \"nisi do\",\n      \"latitude\": \"aute esse irure\",\n      \"longitude\": \"dolore occaecat\",\n      \"cityId\": \"ut laborum dolore et proident\",\n      \"createdAt\": \"anim sit ipsum\",\n      \"updatedAt\": \"ipsum nisi in\"\n    }\n  ]\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "54f14c76-965f-44e0-bad3-e4d5bef69436",
              "name": "Responds with a bad request error object",
              "originalRequest": {
                "url": {
                  "path": [
                    "community",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "createdAt-desc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Community name 1\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Community name 1\"\n        ]\n      ]\n    ],\n    [\n      \"gt\",\n      \"area\",\n      3\n    ],\n    [\n      \"lt\",\n      \"population\",\n      2000\n    ],\n    [\n      \"eq\",\n      \"quadrant\",\n      \"NW\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2f39fb54-fd13-4a55-b263-893b2e20d2b3",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/community/list - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/community/list - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/community/list - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"score\":{\"type\":[\"number\",\"null\"]},\"imageUrl\":{\"type\":[\"string\",\"null\"],\"maxLength\":256},\"quadrant\":{\"type\":[\"string\",\"null\"],\"maxLength\":32},\"sector\":{\"type\":[\"string\",\"null\"],\"maxLength\":128},\"ward\":{\"type\":[\"string\",\"null\"],\"maxLength\":64},\"population\":{\"type\":[\"number\",\"null\"]},\"dwellings\":{\"type\":[\"number\",\"null\"]},\"usedForRenting\":{\"type\":[\"string\",\"null\"]},\"area\":{\"type\":[\"string\",\"null\"]},\"density\":{\"type\":[\"string\",\"null\"]},\"averageIncome\":{\"type\":[\"number\",\"null\"]},\"lowIncome\":{\"type\":[\"string\",\"null\"]},\"immigrants\":{\"type\":[\"string\",\"null\"]},\"elevation\":{\"type\":[\"number\",\"null\"]},\"established\":{\"type\":[\"number\",\"null\"]},\"description\":{\"type\":[\"string\",\"null\"]},\"latitude\":{\"type\":\"string\"},\"longitude\":{\"type\":\"string\"},\"cityId\":{\"type\":\"string\",\"maxLength\":128},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"score\",\"imageUrl\",\"quadrant\",\"sector\",\"ward\",\"population\",\"dwellings\",\"usedForRenting\",\"area\",\"density\",\"averageIncome\",\"lowIncome\",\"immigrants\",\"elevation\",\"established\",\"description\",\"latitude\",\"longitude\",\"cityId\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/community/list - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "12e3037f-2ab3-4781-b7e4-90a433a04d01",
          "name": "/community/create",
          "request": {
            "name": "/community/create",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "community",
                "create"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Community name\",\n  \"cityId\": \"a5ug1fdwkkc4byl1uw9d7cqo\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "158c0efa-265b-4910-af10-3918a9f49147",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Community name\",\n  \"cityId\": \"a5ug1fdwkkc4byl1uw9d7cqo\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sed ut aute\"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "55bf6e87-5d99-4167-be53-ec7719ca2a0b",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Community name\",\n  \"cityId\": \"a5ug1fdwkkc4byl1uw9d7cqo\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c7d89e5c-f718-48f6-8093-d27f92f9a223",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/community/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/community/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/community/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/community/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "44acd07f-a245-4117-a4d1-4e811c48bd56",
          "name": "/community/update/:id",
          "request": {
            "name": "/community/update/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "community",
                "update",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "Duis in non tempor",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Community name\",\n  \"cityId\": \"a5ug1fdwkkc4byl1uw9d7cqo\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\",\n  \"imageUrl\": \"https://example.com/image.jpg\",\n  \"quadrant\": \"NW\",\n  \"sector\": \"SE\",\n  \"ward\": \"Ward 1\",\n  \"population\": 1000,\n  \"dwellings\": 500,\n  \"usedForRenting\": 30.45,\n  \"area\": 3.2,\n  \"density\": 10.5,\n  \"averageIncome\": 50000\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "dad3f5b7-788c-45b4-a436-be40f8ad150b",
              "name": "Responds with the id of the updated community.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Community name\",\n  \"cityId\": \"a5ug1fdwkkc4byl1uw9d7cqo\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\",\n  \"imageUrl\": \"https://example.com/image.jpg\",\n  \"quadrant\": \"NW\",\n  \"sector\": \"SE\",\n  \"ward\": \"Ward 1\",\n  \"population\": 1000,\n  \"dwellings\": 500,\n  \"usedForRenting\": 30.45,\n  \"area\": 3.2,\n  \"density\": 10.5,\n  \"averageIncome\": 50000\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sed ut aute\"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "feb741d0-aa5a-48d6-bde0-8fdc29ba636b",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Community name\",\n  \"cityId\": \"a5ug1fdwkkc4byl1uw9d7cqo\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\",\n  \"imageUrl\": \"https://example.com/image.jpg\",\n  \"quadrant\": \"NW\",\n  \"sector\": \"SE\",\n  \"ward\": \"Ward 1\",\n  \"population\": 1000,\n  \"dwellings\": 500,\n  \"usedForRenting\": 30.45,\n  \"area\": 3.2,\n  \"density\": 10.5,\n  \"averageIncome\": 50000\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3ff71d77-3def-46be-b3ea-f82bf7600701",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[PUT]::/community/update/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[PUT]::/community/update/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[PUT]::/community/update/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[PUT]::/community/update/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "3d71582a-c780-478b-a474-2270596d2b5c",
          "name": "/community/delete/:id",
          "request": {
            "name": "/community/delete/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "community",
                "delete",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "Duis in non tempor",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "db0b52c9-43c0-43dc-bed0-68aa7e5cffbd",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "84195093-c3b7-41cf-9aef-24d5dae3feaf",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "1c305563-5238-49f1-834d-beab99a64674",
              "name": "Responds with a conflict error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ace3660d-dc40-42b4-be96-643164026bf4",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[DELETE]::/community/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[DELETE]::/community/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[DELETE]::/community/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/community/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "bef2953f-ec59-4826-b49d-a7a628ff5225",
      "name": "communityFeature",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "038b9195-4ff3-4a28-93f9-7eb560fb7ba2",
          "name": "/community-feature/list",
          "request": {
            "name": "/community-feature/list",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "community-feature",
                "list"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "limit",
                  "value": "10"
                },
                {
                  "disabled": true,
                  "key": "orderBy",
                  "value": "updatedAt-asc"
                },
                {
                  "disabled": true,
                  "key": "cursor",
                  "value": "abqdj6xe8puto1j83soz3bml"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "e7afe46c-8028-481f-893f-5e79eeffd80c",
              "name": "Responds with an array of communityFeature objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
              "originalRequest": {
                "url": {
                  "path": [
                    "community-feature",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "updatedAt-asc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"mollit adipisicing in\",\n      \"name\": \"ullamco nostrud ea\",\n      \"order\": -2556487.8001251817,\n      \"createdAt\": \"minim\",\n      \"updatedAt\": \"nostrud fugiat officia\"\n    },\n    {\n      \"id\": \"amet enim\",\n      \"name\": \"ex quis\",\n      \"order\": -99635132.47752136,\n      \"createdAt\": \"ad in\",\n      \"updatedAt\": \"v\"\n    }\n  ]\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "362eb210-996c-48c3-84f4-73913d1ca55d",
              "name": "Responds with a bad request error object",
              "originalRequest": {
                "url": {
                  "path": [
                    "community-feature",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "updatedAt-asc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8857ee2c-8d32-4586-9010-f94bcf293da8",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/community-feature/list - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/community-feature/list - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/community-feature/list - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"order\":{\"type\":\"number\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"order\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/community-feature/list - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "fd5d2a08-61c6-4d3e-bc8d-a22b6d153d2e",
          "name": "/community-feature/create",
          "request": {
            "name": "/community-feature/create",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "community-feature",
                "create"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "bda00497-c818-4ff3-9539-9d5d187336eb",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community-feature",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sed ut aute\"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "6046d657-647d-445d-b44b-9c997a787ee4",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community-feature",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "302c91ac-f839-4ba5-8d58-52acc54721c6",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/community-feature/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/community-feature/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/community-feature/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/community-feature/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "554e831f-fb1e-4b55-ab2a-07e8e0269a82",
          "name": "/community-feature/update/:id",
          "request": {
            "name": "/community-feature/update/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "community-feature",
                "update",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "Duis in non tempor",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "e62ec568-f280-4168-889c-65cb6c927c5c",
              "name": "Responds with the id of the updated communityFeature.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community-feature",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sed ut aute\"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "9de6cbd8-cc99-4607-854e-cc0f0ecddd48",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community-feature",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cbf4382d-ebf1-48de-9f14-24e79f18d2f1",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[PUT]::/community-feature/update/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[PUT]::/community-feature/update/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[PUT]::/community-feature/update/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[PUT]::/community-feature/update/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "56b4c72c-139a-4610-b403-b586faaf58d9",
          "name": "/community-feature/delete/:id",
          "request": {
            "name": "/community-feature/delete/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "community-feature",
                "delete",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "Duis in non tempor",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "eb3154be-f1f4-48f1-9250-079cd4a3483c",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community-feature",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "a71ec5cd-44db-4eb6-b444-3a3d5e732429",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community-feature",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "3ba8e026-64a2-48a7-ac8a-0ff1e61cdabd",
              "name": "Responds with a conflict error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community-feature",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d3714530-65cd-486a-81c8-ac8324fd2409",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[DELETE]::/community-feature/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[DELETE]::/community-feature/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[DELETE]::/community-feature/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/community-feature/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "a46102fb-742a-4806-9963-6034bd2eec6f",
      "name": "communityFeatureToCommunity",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "a195c17a-06a5-4c8d-aeb3-3a37a028a73f",
          "name": "/community-feature-to-community/features-by-item/:itemId",
          "request": {
            "name": "/community-feature-to-community/features-by-item/:itemId",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "community-feature-to-community",
                "features-by-item",
                ":itemId"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "Duis in non tempor",
                  "key": "itemId"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "91851171-54a5-4b21-9c75-9e54afd74151",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community-feature-to-community",
                    "features-by-item",
                    ":itemId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "itemId"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"communityFeatureId\": \"laboris pariatur\",\n      \"communityFeature\": {\n        \"name\": \"enim ea anim\"\n      }\n    },\n    {\n      \"communityFeatureId\": \"consequat in officia\",\n      \"communityFeature\": {\n        \"name\": \"mollit ut irure sunt et\"\n      }\n    }\n  ]\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "21e3a72f-8686-4105-8a18-b272f08ba3c2",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community-feature-to-community",
                    "features-by-item",
                    ":itemId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "itemId"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0193ef82-6aae-4f6e-9653-8c060aab3cb2",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/community-feature-to-community/features-by-item/:itemId - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/community-feature-to-community/features-by-item/:itemId - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/community-feature-to-community/features-by-item/:itemId - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"communityFeatureId\":{\"type\":\"string\"},\"communityFeature\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]}},\"required\":[\"communityFeatureId\",\"communityFeature\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/community-feature-to-community/features-by-item/:itemId - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "66e6af5f-84ee-4a97-b437-0d261f841a1d",
          "name": "/community-feature-to-community/create",
          "request": {
            "name": "/community-feature-to-community/create",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "community-feature-to-community",
                "create"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"featureId\": \"kse7hpwwu3rj6ook4g90nvzs\",\n  \"itemId\": \"a5ug1fdwkkc4byl1uw9d7cqo\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "2549e896-24c7-48d2-94cc-2ba393b3196f",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community-feature-to-community",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"featureId\": \"kse7hpwwu3rj6ook4g90nvzs\",\n  \"itemId\": \"a5ug1fdwkkc4byl1uw9d7cqo\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "d8adc402-41c4-41ee-8a65-4ef87574fcf5",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community-feature-to-community",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"featureId\": \"kse7hpwwu3rj6ook4g90nvzs\",\n  \"itemId\": \"a5ug1fdwkkc4byl1uw9d7cqo\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ad7e0a5c-9be5-4ed7-9c1b-a2b430b13eee",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/community-feature-to-community/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/community-feature-to-community/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/community-feature-to-community/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/community-feature-to-community/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "8b1145ae-298b-42bf-9958-62c7e62ed0fe",
          "name": "/community-feature-to-community/delete/:featureId/:itemId",
          "request": {
            "name": "/community-feature-to-community/delete/:featureId/:itemId",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "community-feature-to-community",
                "delete",
                ":featureId",
                ":itemId"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "Duis in non tempor",
                  "key": "featureId"
                },
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "Duis in non tempor",
                  "key": "itemId"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "c90ab50e-498b-4e3f-b1c5-c8db1b28b201",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community-feature-to-community",
                    "delete",
                    ":featureId",
                    ":itemId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "featureId"
                    },
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "itemId"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "ffc12441-2fc0-4dd2-81e2-a4c2e0aff697",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community-feature-to-community",
                    "delete",
                    ":featureId",
                    ":itemId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "featureId"
                    },
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "itemId"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cbe97953-11fb-4746-9522-cd19febe0b6d",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[DELETE]::/community-feature-to-community/delete/:featureId/:itemId - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[DELETE]::/community-feature-to-community/delete/:featureId/:itemId - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[DELETE]::/community-feature-to-community/delete/:featureId/:itemId - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/community-feature-to-community/delete/:featureId/:itemId - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "ea18fb43-6e2b-49d3-887a-0ea21695fc3a",
      "name": "feature",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "3d53c0fc-8c4b-4207-aaf7-42c9001a701c",
          "name": "/feature/list",
          "request": {
            "name": "/feature/list",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "feature",
                "list"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "limit",
                  "value": "10"
                },
                {
                  "disabled": true,
                  "key": "orderBy",
                  "value": "updatedAt-asc"
                },
                {
                  "disabled": true,
                  "key": "cursor",
                  "value": "abqdj6xe8puto1j83soz3bml"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "4fceb15f-5537-4055-aa34-f282199153b6",
              "name": "Responds with an array of feature objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
              "originalRequest": {
                "url": {
                  "path": [
                    "feature",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "updatedAt-asc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"mollit adipisicing in\",\n      \"name\": \"ullamco nostrud ea\",\n      \"order\": -2556487.8001251817,\n      \"createdAt\": \"minim\",\n      \"updatedAt\": \"nostrud fugiat officia\"\n    },\n    {\n      \"id\": \"amet enim\",\n      \"name\": \"ex quis\",\n      \"order\": -99635132.47752136,\n      \"createdAt\": \"ad in\",\n      \"updatedAt\": \"v\"\n    }\n  ]\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "b3bd9fe0-94a1-40ef-9728-80de92697f01",
              "name": "Responds with a bad request error object",
              "originalRequest": {
                "url": {
                  "path": [
                    "feature",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "updatedAt-asc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "48545a63-227a-4280-91a1-e14bfa4059cc",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/feature/list - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/feature/list - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/feature/list - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"order\":{\"type\":\"number\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"order\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/feature/list - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "d41aa9aa-6871-4198-b144-98e9b05ae3ee",
          "name": "/feature/create",
          "request": {
            "name": "/feature/create",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "feature",
                "create"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "3e67776c-986c-4135-94a5-b139329e9a55",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "feature",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sed ut aute\"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "aa450455-1eee-49bb-9e67-6b00eb329724",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "feature",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "af2143d2-e7e4-464e-b87c-c4f1f6be5933",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/feature/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/feature/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/feature/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/feature/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "6b3086d6-ba2e-4a4a-afc0-b25b50a702ba",
          "name": "/feature/update/:id",
          "request": {
            "name": "/feature/update/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "feature",
                "update",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "Duis in non tempor",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "d083011c-cb23-42ef-b6d9-aa7238a03c2c",
              "name": "Responds with the id of the updated feature.",
              "originalRequest": {
                "url": {
                  "path": [
                    "feature",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sed ut aute\"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "83d2de9b-ea05-411e-9131-10f496427875",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "feature",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "54065b09-fcd0-41c7-93a6-281d5e1a95e6",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[PUT]::/feature/update/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[PUT]::/feature/update/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[PUT]::/feature/update/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[PUT]::/feature/update/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "b63007a2-4d48-4cbd-ba4c-ec9656ffda48",
          "name": "/feature/delete/:id",
          "request": {
            "name": "/feature/delete/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "feature",
                "delete",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "Duis in non tempor",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "c03b9810-cc29-427d-9179-964df2cad870",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "feature",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "b3273cab-a394-4fbc-9a51-b1bdd3c45ebe",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "feature",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "8b582157-e547-43ff-9e69-5a76db8855d6",
              "name": "Responds with a conflict error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "feature",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4bac07f5-6937-4c2c-9788-9f6336635cd4",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[DELETE]::/feature/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[DELETE]::/feature/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[DELETE]::/feature/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/feature/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "07cbdb4e-e438-4311-8eab-34108e40af26",
      "name": "featureToProperty",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "fd316118-66ea-4e2b-90ba-4ffb5ed3004d",
          "name": "/feature-to-property/features-by-item/:itemId",
          "request": {
            "name": "/feature-to-property/features-by-item/:itemId",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "feature-to-property",
                "features-by-item",
                ":itemId"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "Duis in non tempor",
                  "key": "itemId"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "2f2384bd-70fb-4b0e-ae1a-e7a2a62c7505",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "feature-to-property",
                    "features-by-item",
                    ":itemId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "itemId"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"featureId\": \"veniam consequat pariatur in\",\n      \"feature\": {\n        \"name\": \"ad in laborum\"\n      }\n    },\n    {\n      \"featureId\": \"laboris quis\",\n      \"feature\": {\n        \"name\": \"eu irure occaecat\"\n      }\n    }\n  ]\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "46156115-6ed7-408a-9133-144a4abc83ad",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "feature-to-property",
                    "features-by-item",
                    ":itemId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "itemId"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "be5be7c5-e762-46f0-9ae9-18483e6b92fa",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/feature-to-property/features-by-item/:itemId - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/feature-to-property/features-by-item/:itemId - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/feature-to-property/features-by-item/:itemId - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"featureId\":{\"type\":\"string\"},\"feature\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]}},\"required\":[\"featureId\",\"feature\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/feature-to-property/features-by-item/:itemId - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "ae71e97a-d4ed-455c-9966-98b142699e50",
          "name": "/feature-to-property/create",
          "request": {
            "name": "/feature-to-property/create",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "feature-to-property",
                "create"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"featureId\": \"kse7hpwwu3rj6ook4g90nvzs\",\n  \"itemId\": \"a5ug1fdwkkc4byl1uw9d7cqo\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "0ffb792d-ffea-4cb6-b134-43fd42e5305e",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "feature-to-property",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"featureId\": \"kse7hpwwu3rj6ook4g90nvzs\",\n  \"itemId\": \"a5ug1fdwkkc4byl1uw9d7cqo\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "4749b7a9-cfee-496d-8269-fefd1e60c852",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "feature-to-property",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"featureId\": \"kse7hpwwu3rj6ook4g90nvzs\",\n  \"itemId\": \"a5ug1fdwkkc4byl1uw9d7cqo\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5c986394-23c1-444e-b196-d374b770019d",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/feature-to-property/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/feature-to-property/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/feature-to-property/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/feature-to-property/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "c26ebed9-0c7e-4cf7-a850-0aaf1940ebe1",
          "name": "/feature-to-property/delete/:featureId/:itemId",
          "request": {
            "name": "/feature-to-property/delete/:featureId/:itemId",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "feature-to-property",
                "delete",
                ":featureId",
                ":itemId"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "Duis in non tempor",
                  "key": "featureId"
                },
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "Duis in non tempor",
                  "key": "itemId"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "e9085953-6151-4beb-b7ab-a2324327d11c",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "feature-to-property",
                    "delete",
                    ":featureId",
                    ":itemId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "featureId"
                    },
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "itemId"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "d3957213-6adf-491d-90f4-7ceb72b90c91",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "feature-to-property",
                    "delete",
                    ":featureId",
                    ":itemId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "featureId"
                    },
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "itemId"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f596639f-fcec-4c9d-a84d-4e3059e5abe0",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[DELETE]::/feature-to-property/delete/:featureId/:itemId - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[DELETE]::/feature-to-property/delete/:featureId/:itemId - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[DELETE]::/feature-to-property/delete/:featureId/:itemId - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/feature-to-property/delete/:featureId/:itemId - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "332611f8-beef-46cb-bba1-a590af20ea25",
      "name": "floorPlan",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "c6a0cacb-3388-4593-b1f8-3341d4f508fa",
          "name": "/floor-plan/list",
          "request": {
            "name": "/floor-plan/list",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "floor-plan",
                "list"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "limit",
                  "value": "10"
                },
                {
                  "disabled": true,
                  "key": "orderBy",
                  "value": "order-desc"
                },
                {
                  "disabled": true,
                  "key": "cursor",
                  "value": "abqdj6xe8puto1j83soz3bml"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        \"eq\",\n        \"name\",\n        \"Main floor\"\n      ],\n      [\n        \"eq\",\n        \"name\",\n        \"Second floor\"\n      ]\n    ],\n    [\n      \"eq\",\n      \"propertyId\",\n      \"atgl5rbiijouz9695d01vpne\"\n    ]\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "344da0ed-73b2-4fe3-91c8-d8cccf1c789c",
              "name": "Responds with an array of floorPlan objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
              "originalRequest": {
                "url": {
                  "path": [
                    "floor-plan",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "order-desc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        \"eq\",\n        \"name\",\n        \"Main floor\"\n      ],\n      [\n        \"eq\",\n        \"name\",\n        \"Second floor\"\n      ]\n    ],\n    [\n      \"eq\",\n      \"propertyId\",\n      \"atgl5rbiijouz9695d01vpne\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"Ut officia ex deserunt nulla\",\n      \"name\": \"et magna fugiat sed aliquip\",\n      \"propertyId\": \"mollit quis exercitation labor\",\n      \"order\": -61893952.842044175,\n      \"createdAt\": \"mollit Duis nisi commodo\",\n      \"updatedAt\": \"adipisicing nostrud sint ea\"\n    },\n    {\n      \"id\": \"deserunt qui Excepteur\",\n      \"name\": \"labore do occaecat reprehenderit\",\n      \"propertyId\": \"enim nulla in dolore\",\n      \"order\": 80655331.4569864,\n      \"createdAt\": \"ex aliquip dolor elit\",\n      \"updatedAt\": \"fugiat culpa ut enim\"\n    }\n  ]\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "06718849-0a4a-48aa-9630-98aa829de865",
              "name": "Responds with a bad request error object",
              "originalRequest": {
                "url": {
                  "path": [
                    "floor-plan",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "order-desc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        \"eq\",\n        \"name\",\n        \"Main floor\"\n      ],\n      [\n        \"eq\",\n        \"name\",\n        \"Second floor\"\n      ]\n    ],\n    [\n      \"eq\",\n      \"propertyId\",\n      \"atgl5rbiijouz9695d01vpne\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "07fb11de-6f3d-4ca7-bfd8-36004337e0e2",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/floor-plan/list - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/floor-plan/list - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/floor-plan/list - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"propertyId\":{\"type\":\"string\",\"maxLength\":128},\"order\":{\"type\":\"number\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"propertyId\",\"order\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/floor-plan/list - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "32b24ada-8933-414c-b5b1-9810456521a5",
          "name": "/floor-plan/create",
          "request": {
            "name": "/floor-plan/create",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "floor-plan",
                "create"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Floor Plan 1\",\n  \"propertyId\": \"atgl5rbiijouz9695d01vpne\",\n  \"order\": 0\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "0bb4260c-40dd-4c45-be18-8c8cf90ed16d",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "floor-plan",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Floor Plan 1\",\n  \"propertyId\": \"atgl5rbiijouz9695d01vpne\",\n  \"order\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sed ut aute\"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "1e587820-587e-41a7-b23e-f9ba5848e3cf",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "floor-plan",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Floor Plan 1\",\n  \"propertyId\": \"atgl5rbiijouz9695d01vpne\",\n  \"order\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e99bf268-ec00-406f-8e76-236826e64bde",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/floor-plan/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/floor-plan/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/floor-plan/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/floor-plan/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "b6d2d71a-470d-4c7b-9314-45208eea5dbb",
          "name": "/floor-plan/update/:id",
          "request": {
            "name": "/floor-plan/update/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "floor-plan",
                "update",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "Duis in non tempor",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Floor Plan 2\",\n  \"order\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "6cba6b10-be10-422e-b740-9e9a2ead67e2",
              "name": "Responds with the id of the updated floorPlan.",
              "originalRequest": {
                "url": {
                  "path": [
                    "floor-plan",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Floor Plan 2\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sed ut aute\"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "a2d5db6e-47c8-4163-b542-82e6939ad6bc",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "floor-plan",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Floor Plan 2\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9fc0683d-da93-49b5-90bb-8ac055190cee",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[PUT]::/floor-plan/update/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[PUT]::/floor-plan/update/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[PUT]::/floor-plan/update/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[PUT]::/floor-plan/update/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "74f903e9-0721-4edf-bb98-75a2fbc32e22",
          "name": "/floor-plan/delete/:id",
          "request": {
            "name": "/floor-plan/delete/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "floor-plan",
                "delete",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "Duis in non tempor",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "4385ed01-8220-48b8-886e-fd4ebfb43f75",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "floor-plan",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "12b177e5-8e66-4189-9cab-dba831476c05",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "floor-plan",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "873c0f99-f94b-41b5-b935-54b14b20e947",
              "name": "Responds with a conflict error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "floor-plan",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f954b315-563f-4d83-a682-142bc955cc77",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[DELETE]::/floor-plan/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[DELETE]::/floor-plan/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[DELETE]::/floor-plan/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/floor-plan/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "a903e8b8-005a-4dc1-a422-2cdd09639c17",
      "name": "media",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "f00987ef-0310-44c8-b9ac-0408ea1f1c7c",
          "name": "/media/list",
          "request": {
            "name": "/media/list",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "media",
                "list"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "limit",
                  "value": "10"
                },
                {
                  "disabled": true,
                  "key": "orderBy",
                  "value": "propertyId-desc"
                },
                {
                  "disabled": true,
                  "key": "cursor",
                  "value": "abqdj6xe8puto1j83soz3bml"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"assetId\",\n          \"a344xpp1\"\n        ],\n        [\n          \"eq\",\n          \"assetId\",\n          \"a344xpp2\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"mediaTypeId\",\n      \"a27vslbjwoyszaqrxw6082aa\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-23T00:00:00.000Z\",\n      \"2024-02-12T00:00:00.000Z\"\n    ]\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "5ed2d17b-c413-4bc6-a53c-c2fc5b3c20cc",
              "name": "Responds with an array of media objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
              "originalRequest": {
                "url": {
                  "path": [
                    "media",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "propertyId-desc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"assetId\",\n          \"a344xpp1\"\n        ],\n        [\n          \"eq\",\n          \"assetId\",\n          \"a344xpp2\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"mediaTypeId\",\n      \"a27vslbjwoyszaqrxw6082aa\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-23T00:00:00.000Z\",\n      \"2024-02-12T00:00:00.000Z\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"officia\",\n      \"assetId\": \"dolore\",\n      \"mediaTypeId\": \"do\",\n      \"propertyId\": \"Ut magna aute sit\",\n      \"order\": 54245234.77600253,\n      \"createdAt\": \"elit labore dolore\",\n      \"updatedAt\": \"labore ex cillum occaecat\"\n    },\n    {\n      \"id\": \"incididunt non\",\n      \"assetId\": \"sunt dolore reprehenderit\",\n      \"mediaTypeId\": \"cillum\",\n      \"propertyId\": \"ut est irure\",\n      \"order\": 21067927.87786001,\n      \"createdAt\": \"minim dolore sed exercitation\",\n      \"updatedAt\": \"sunt aliquip\"\n    }\n  ]\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "c8e7c3ff-4d07-48b4-ae54-086e93f0cab4",
              "name": "Responds with a bad request error object",
              "originalRequest": {
                "url": {
                  "path": [
                    "media",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "propertyId-desc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"assetId\",\n          \"a344xpp1\"\n        ],\n        [\n          \"eq\",\n          \"assetId\",\n          \"a344xpp2\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"mediaTypeId\",\n      \"a27vslbjwoyszaqrxw6082aa\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-23T00:00:00.000Z\",\n      \"2024-02-12T00:00:00.000Z\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6e433c28-3997-4625-9b0e-537cdf1ca392",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/media/list - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/media/list - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/media/list - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"assetId\":{\"type\":\"string\",\"maxLength\":256},\"mediaTypeId\":{\"type\":\"string\",\"maxLength\":128},\"propertyId\":{\"type\":\"string\",\"maxLength\":128},\"order\":{\"type\":\"number\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"assetId\",\"mediaTypeId\",\"propertyId\",\"order\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/media/list - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "0c460c40-641d-4ce7-9384-cac5566e1ed8",
          "name": "/media/create",
          "request": {
            "name": "/media/create",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "media",
                "create"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"assetId\": \"a344xpp1\",\n  \"mediaTypeId\": \"a27vslbjwoyszaqrxw6082aa\",\n  \"propertyId\": \"a1i6zw4lep7o2qrc5hdxytmv\",\n  \"order\": 0\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "7e38e42a-5f33-4611-ac39-7131333cd7c1",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "media",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"assetId\": \"a344xpp1\",\n  \"mediaTypeId\": \"a27vslbjwoyszaqrxw6082aa\",\n  \"propertyId\": \"a1i6zw4lep7o2qrc5hdxytmv\",\n  \"order\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sed ut aute\"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "aee00cad-be1e-420b-b4c0-e22d20e98338",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "media",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"assetId\": \"a344xpp1\",\n  \"mediaTypeId\": \"a27vslbjwoyszaqrxw6082aa\",\n  \"propertyId\": \"a1i6zw4lep7o2qrc5hdxytmv\",\n  \"order\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c759b19f-3443-478f-9f73-565c13731afe",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/media/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/media/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/media/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/media/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "c7171488-330b-4576-8aa2-2db387a1ae1d",
          "name": "/media/update/:id",
          "request": {
            "name": "/media/update/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "media",
                "update",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "Duis in non tempor",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"order\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "2316cb54-48ab-4592-92b1-b05037d7e911",
              "name": "Responds with the id of the updated media.",
              "originalRequest": {
                "url": {
                  "path": [
                    "media",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sed ut aute\"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "ecd20ba3-8234-43aa-9045-6434ac9bc1f6",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "media",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "348b4b7c-dfc4-41ba-aad1-4da4370ba1b1",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[PUT]::/media/update/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[PUT]::/media/update/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[PUT]::/media/update/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[PUT]::/media/update/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "44b154d2-eb93-4f8f-9312-131aaaa7def9",
          "name": "/media/delete/:id",
          "request": {
            "name": "/media/delete/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "media",
                "delete",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "Duis in non tempor",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "e5533cf0-5879-41d3-bb94-d470ecbe8cbe",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "media",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "b2e1d8a0-88ba-4149-a020-f936a461cac1",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "media",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "2885e405-7edf-473a-afbf-1699b90b9b6d",
              "name": "Responds with a conflict error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "media",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a85c02c7-5473-41d9-9e2a-3f72b04d512b",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[DELETE]::/media/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[DELETE]::/media/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[DELETE]::/media/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/media/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "0fbe6313-4bbd-42bd-9392-e9db1ea5412e",
      "name": "mediaType",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "a5bec1dd-8632-4c5e-99cf-6cd4af4dd938",
          "name": "/media-type/list",
          "request": {
            "name": "/media-type/list",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "media-type",
                "list"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "limit",
                  "value": "10"
                },
                {
                  "disabled": true,
                  "key": "orderBy",
                  "value": "name-desc"
                },
                {
                  "disabled": true,
                  "key": "cursor",
                  "value": "abqdj6xe8puto1j83soz3bml"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"video\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"image\"\n        ]\n      ]\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-23T00:00:00.000Z\",\n      \"2024-02-12T00:00:00.000Z\"\n    ]\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "6b2b5fda-0f9e-4118-bd0d-e0aadf4826aa",
              "name": "Responds with an array of mediaType objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
              "originalRequest": {
                "url": {
                  "path": [
                    "media-type",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "name-desc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"video\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"image\"\n        ]\n      ]\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-23T00:00:00.000Z\",\n      \"2024-02-12T00:00:00.000Z\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"non magna consectetur\",\n      \"name\": \"dolor\",\n      \"createdAt\": \"ea pariatur consectetur\",\n      \"updatedAt\": \"\"\n    },\n    {\n      \"id\": \"aute deserunt reprehenderit\",\n      \"name\": \"aute nulla\",\n      \"createdAt\": \"fugiat et eu commodo\",\n      \"updatedAt\": \"nisi ut\"\n    }\n  ]\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "9cde9110-d3ee-42ce-941e-e0db40d6d2f4",
              "name": "Responds with a bad request error object",
              "originalRequest": {
                "url": {
                  "path": [
                    "media-type",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "name-desc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"video\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"image\"\n        ]\n      ]\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-23T00:00:00.000Z\",\n      \"2024-02-12T00:00:00.000Z\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3157590f-f1ef-4b45-97a1-eaca65043cfd",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/media-type/list - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/media-type/list - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/media-type/list - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/media-type/list - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "896f7569-f503-4b6f-8c5e-dff5bd5e99fa",
          "name": "/media-type/create",
          "request": {
            "name": "/media-type/create",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "media-type",
                "create"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"image\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "29b73948-bcae-4ac0-8076-925102ef5875",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "media-type",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"image\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sed ut aute\"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "7ad98386-8cfc-4cfc-bb38-dcb8093d77ae",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "media-type",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"image\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5d30b371-9e4f-40e9-83b5-68a528502a45",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/media-type/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/media-type/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/media-type/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/media-type/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "599e7140-a371-4953-9979-5922b6ed9619",
          "name": "/media-type/update/:id",
          "request": {
            "name": "/media-type/update/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "media-type",
                "update",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "Duis in non tempor",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"video\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "d3941aec-dd04-472e-b7fc-57d03c74a5c5",
              "name": "Responds with the id of the updated mediaType.",
              "originalRequest": {
                "url": {
                  "path": [
                    "media-type",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"video\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sed ut aute\"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "2dbe7462-fdff-4dfd-816b-6133ed2d127e",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "media-type",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"video\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c5e83ed8-4ac2-48c8-8406-d1d0487e4ea7",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[PUT]::/media-type/update/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[PUT]::/media-type/update/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[PUT]::/media-type/update/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[PUT]::/media-type/update/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "2686d887-c5e4-402d-8193-df8ae88c2031",
          "name": "/media-type/delete/:id",
          "request": {
            "name": "/media-type/delete/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "media-type",
                "delete",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "Duis in non tempor",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "e03fcb36-8fa2-4d27-aac6-dd608b119cf6",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "media-type",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "3337dc0d-8278-4584-91d2-80eb00b04483",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "media-type",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "640a36bd-b912-4dce-9339-b7ca2601684c",
              "name": "Responds with a conflict error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "media-type",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abb798ae-8aca-4d94-88cd-7f54149aa375",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[DELETE]::/media-type/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[DELETE]::/media-type/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[DELETE]::/media-type/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/media-type/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "ea8df1f2-49e3-492d-888d-ee21c693e9ce",
      "name": "parking",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "4f1f35d0-f607-42af-aeb6-beafb89d3f83",
          "name": "/parking/parkings-by-property/:itemId",
          "request": {
            "name": "/parking/parkings-by-property/:itemId",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "parking",
                "parkings-by-property",
                ":itemId"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "Duis in non tempor",
                  "key": "itemId"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "18d5dfc5-961f-44a0-a69c-562b5b384fae",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "parking",
                    "parkings-by-property",
                    ":itemId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "itemId"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"sunt in\",\n      \"name\": \"aute Lorem officia amet\",\n      \"fee\": -12502245,\n      \"feeInterval\": \"qui fugiat id velit\",\n      \"order\": -84104398\n    },\n    {\n      \"id\": \"cupidatat ex sed\",\n      \"name\": \"officia aliquip\",\n      \"fee\": -9891861,\n      \"feeInterval\": \"in ex pariatur aliqua\",\n      \"order\": 31547043\n    }\n  ]\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "19388950-6b49-4f18-8fc4-d5a85537199c",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "parking",
                    "parkings-by-property",
                    ":itemId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "itemId"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5bd8bad7-8712-49d2-af8d-b59170270604",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/parking/parkings-by-property/:itemId - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/parking/parkings-by-property/:itemId - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/parking/parkings-by-property/:itemId - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"fee\":{\"type\":[\"integer\",\"null\"]},\"feeInterval\":{\"type\":[\"string\",\"null\"]},\"order\":{\"type\":\"integer\"}},\"required\":[\"id\",\"name\",\"fee\",\"feeInterval\",\"order\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/parking/parkings-by-property/:itemId - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "b4c35144-cd2d-406a-891c-03a19f84cd84",
          "name": "/parking/list",
          "request": {
            "name": "/parking/list",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "parking",
                "list"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "limit",
                  "value": "10"
                },
                {
                  "disabled": true,
                  "key": "orderBy",
                  "value": "createdAt-asc"
                },
                {
                  "disabled": true,
                  "key": "cursor",
                  "value": "abqdj6xe8puto1j83soz3bml"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Outdoor\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Covered\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"eq\",\n      \"fee\",\n      100\n    ],\n    [\n      \"eq\",\n      \"feeInterval\",\n      \"monthly\"\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "bcacbf1d-8022-4c6e-b099-8c2ea591b548",
              "name": "Responds with an array of parking objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
              "originalRequest": {
                "url": {
                  "path": [
                    "parking",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "createdAt-asc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Outdoor\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Covered\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"eq\",\n      \"fee\",\n      100\n    ],\n    [\n      \"eq\",\n      \"feeInterval\",\n      \"monthly\"\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"est reprehenderit\",\n      \"name\": \"laboris anim eiusmod adipisicing nisi\",\n      \"propertyId\": \"proident occaecat sed tempor\",\n      \"fee\": 54658684.71303189,\n      \"feeInterval\": \"amet sit exercitation proident\",\n      \"order\": -91220335.28156953,\n      \"createdAt\": \"est reprehenderit\",\n      \"updatedAt\": \"et veniam nulla\"\n    },\n    {\n      \"id\": \"nisi anim exercitation\",\n      \"name\": \"nos\",\n      \"propertyId\": \"ex\",\n      \"fee\": -88197713.95447993,\n      \"feeInterval\": \"commodo\",\n      \"order\": -44672176.36938643,\n      \"createdAt\": \"mollit eu\",\n      \"updatedAt\": \"sed adipisicing sunt\"\n    }\n  ]\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "4c7b238f-cfcc-4317-8a56-a326f7ca24d9",
              "name": "Responds with a bad request error object",
              "originalRequest": {
                "url": {
                  "path": [
                    "parking",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "createdAt-asc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Outdoor\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Covered\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"eq\",\n      \"fee\",\n      100\n    ],\n    [\n      \"eq\",\n      \"feeInterval\",\n      \"monthly\"\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3ee3ceab-11a5-4128-b3e1-dc75f4ee49f7",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/parking/list - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/parking/list - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/parking/list - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"propertyId\":{\"type\":\"string\",\"maxLength\":128},\"fee\":{\"type\":[\"number\",\"null\"]},\"feeInterval\":{\"type\":[\"string\",\"null\"],\"maxLength\":128},\"order\":{\"type\":\"number\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"propertyId\",\"fee\",\"feeInterval\",\"order\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/parking/list - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "4f48acd6-a72e-402d-82be-95844c91ef53",
          "name": "/parking/create",
          "request": {
            "name": "/parking/create",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "parking",
                "create"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Covered\",\n  \"propertyId\": \"a5ug1fdwkkc4byl1uw9d7cqo\",\n  \"fee\": 100,\n  \"feeInterval\": \"monthly\",\n  \"order\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "1b1ce737-1765-4594-81a8-f2faf1ad6438",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "parking",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Covered\",\n  \"propertyId\": \"a5ug1fdwkkc4byl1uw9d7cqo\",\n  \"fee\": 100,\n  \"feeInterval\": \"monthly\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sed ut aute\"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "e09ed366-131a-492b-8567-566716e7859f",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "parking",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Covered\",\n  \"propertyId\": \"a5ug1fdwkkc4byl1uw9d7cqo\",\n  \"fee\": 100,\n  \"feeInterval\": \"monthly\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bfa1f729-dd2e-4f74-8808-f82dd07f3d85",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/parking/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/parking/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/parking/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/parking/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "1dd846db-ceb3-4d83-96cd-d56216996234",
          "name": "/parking/update/:id",
          "request": {
            "name": "/parking/update/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "parking",
                "update",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "Duis in non tempor",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Covered\",\n  \"fee\": 100,\n  \"feeInterval\": \"monthly\",\n  \"order\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "e6fcd726-5996-451b-9a75-33b8eb57f4e0",
              "name": "Responds with the id of the updated parking.",
              "originalRequest": {
                "url": {
                  "path": [
                    "parking",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Covered\",\n  \"fee\": 100,\n  \"feeInterval\": \"monthly\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sed ut aute\"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "409d366e-f1c8-471d-b541-f73dae4e9ac4",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "parking",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Covered\",\n  \"fee\": 100,\n  \"feeInterval\": \"monthly\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "655a8a70-889c-40df-8ed3-22b87b3288c0",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[PUT]::/parking/update/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[PUT]::/parking/update/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[PUT]::/parking/update/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[PUT]::/parking/update/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "efcbfa3c-b2c5-4697-a846-77f8221c5ebc",
          "name": "/parking/delete/:id",
          "request": {
            "name": "/parking/delete/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "parking",
                "delete",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "Duis in non tempor",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "a2917755-b554-4a90-8bda-13531bddda9a",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "parking",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "469e6809-d03c-4285-83f7-6b49ac7e4d7e",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "parking",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "56a2dd01-92b8-4441-b981-84b7bcad84ba",
              "name": "Responds with a conflict error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "parking",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "950c61c8-11fa-4929-bc58-c7c9faaa11d0",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[DELETE]::/parking/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[DELETE]::/parking/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[DELETE]::/parking/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/parking/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "233ea7fd-e40e-412c-bfcd-ddc5a3b1bff1",
      "name": "property",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "c8078c11-0ff1-4311-8446-308872b3f079",
          "name": "/property/:id",
          "request": {
            "name": "/property/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "property",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "Duis in non tempor",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "4d4e4c4a-ee47-4fe3-a8f6-602707542666",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "property",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"mollit non inc\",\n    \"listingId\": 54951870.63037461,\n    \"name\": \"reprehenderit aliquip ipsum\",\n    \"address\": \"in voluptate irure enim\",\n    \"latitude\": \"anim sit\",\n    \"longitude\": \"ut cupidatat\",\n    \"yearBuilt\": -71869920,\n    \"descriptionTitle\": \"nisi Lorem\",\n    \"descriptionSubtitle\": \"laborum dolore aliqua do\",\n    \"descriptionText\": \"tempor in aliqua\",\n    \"smoking\": true,\n    \"cats\": true,\n    \"dogs\": false,\n    \"petsNegotiable\": false,\n    \"petsFee\": -55789853,\n    \"petsFeeInterval\": \"elit in\",\n    \"published\": false,\n    \"customerRanking\": 95116346.51272404,\n    \"paidSearchRanking\": true,\n    \"city\": {\n      \"name\": \"consequat nostrud\"\n    },\n    \"featureToProperty\": [\n      {\n        \"feature\": {\n          \"name\": \"sunt\"\n        }\n      },\n      {\n        \"feature\": {\n          \"name\": \"irure laboris non cupidatat\"\n        }\n      }\n    ],\n    \"buildingFeatureToProperty\": [\n      {\n        \"buildingFeature\": {\n          \"name\": \"et ipsum\"\n        }\n      },\n      {\n        \"buildingFeature\": {\n          \"name\": \"amet laborum ipsum do\"\n        }\n      }\n    ],\n    \"community\": {\n      \"name\": \"Ut ex est\",\n      \"score\": 79660981,\n      \"imageUrl\": \"minim exercitation sed Excepteur\",\n      \"quadrant\": \"mollit\",\n      \"sector\": \"aute consectetur\",\n      \"ward\": \"est Ut eu qui exercitation\",\n      \"population\": -80117366,\n      \"dwellings\": 57826463,\n      \"usedForRenting\": -25501652.02225308,\n      \"area\": -61290352.889132336,\n      \"density\": -77645802.6849406,\n      \"averageIncome\": -79506267,\n      \"lowIncome\": -14177252.4367048,\n      \"immigrants\": 31607475.176269382,\n      \"elevation\": -6937740,\n      \"established\": -32599437,\n      \"description\": \"laborum voluptate\",\n      \"latitude\": -88889336.17937927,\n      \"longitude\": -61967863.382395014,\n      \"communityFeatureToCommunity\": [\n        {\n          \"communityFeature\": {\n            \"name\": \"veniam est nostrud elit\"\n          }\n        },\n        {\n          \"communityFeature\": {\n            \"name\": \"dolore amet\"\n          }\n        }\n      ]\n    },\n    \"medias\": [\n      {\n        \"assetId\": \"tempor\",\n        \"order\": 3052380.787685573\n      },\n      {\n        \"assetId\": \"ut ad non\",\n        \"order\": 88716182.34758237\n      }\n    ],\n    \"parkings\": [\n      {\n        \"name\": \"ut cillum\",\n        \"fee\": 38115563.73379883,\n        \"feeInterval\": \"et occaecat irure qui\"\n      },\n      {\n        \"name\": \"officia\",\n        \"fee\": 59290617.49577907,\n        \"feeInterval\": \"nisi incididunt labore eu\"\n      }\n    ],\n    \"typeProp\": {\n      \"name\": \"n\"\n    },\n    \"floorPlans\": [\n      {\n        \"id\": \"conseq\",\n        \"name\": \"consequat\",\n        \"order\": -80092634.49097005,\n        \"units\": [\n          {\n            \"id\": \"ullamco pari\",\n            \"name\": \"culpa dolor\",\n            \"rent\": 5757763.060579628,\n            \"deposit\": -10553824.42233026,\n            \"available\": true,\n            \"immediate\": true,\n            \"availableDate\": \"nisi\",\n            \"shortterm\": false,\n            \"longterm\": false,\n            \"unitNumber\": \"culpa mollit in sunt\",\n            \"unitName\": {},\n            \"surface\": 99248390,\n            \"furnished\": true,\n            \"heat\": true,\n            \"water\": false,\n            \"electricity\": true,\n            \"internet\": false,\n            \"television\": false,\n            \"order\": 5713381,\n            \"published\": false,\n            \"bedroom\": {\n              \"name\": \"in aute enim magna\"\n            },\n            \"bathroom\": {\n              \"name\": \"quis\"\n            }\n          },\n          {\n            \"id\": \"quis\",\n            \"name\": \"cupidatat\",\n            \"rent\": 714739.2332040817,\n            \"deposit\": -66517278.05300292,\n            \"available\": true,\n            \"immediate\": false,\n            \"availableDate\": \"nulla sint laboris\",\n            \"shortterm\": true,\n            \"longterm\": false,\n            \"unitNumber\": \"tempor irure adipisicing labore\",\n            \"unitName\": {},\n            \"surface\": -81913716,\n            \"furnished\": true,\n            \"heat\": false,\n            \"water\": false,\n            \"electricity\": false,\n            \"internet\": false,\n            \"television\": true,\n            \"order\": 8870314,\n            \"published\": false,\n            \"bedroom\": {\n              \"name\": \"mollit voluptate exercitation\"\n            },\n            \"bathroom\": {\n              \"name\": \"nostrud magna et\"\n            }\n          }\n        ]\n      },\n      {\n        \"id\": \"laborum proident dolore Excepteur\",\n        \"name\": \"qui\",\n        \"order\": -92225332.88385373,\n        \"units\": [\n          {\n            \"id\": \"v\",\n            \"name\": \"dolore nostrud eiusmo\",\n            \"rent\": 15533036.200120658,\n            \"deposit\": 7771622.593679965,\n            \"available\": true,\n            \"immediate\": false,\n            \"availableDate\": \"labore eu anim aliqua in\",\n            \"shortterm\": true,\n            \"longterm\": true,\n            \"unitNumber\": \"dolor et sint\",\n            \"unitName\": {},\n            \"surface\": -98537366,\n            \"furnished\": true,\n            \"heat\": false,\n            \"water\": true,\n            \"electricity\": true,\n            \"internet\": false,\n            \"television\": false,\n            \"order\": 89861980,\n            \"published\": false,\n            \"bedroom\": {\n              \"name\": \"et deserunt sint voluptate\"\n            },\n            \"bathroom\": {\n              \"name\": \"culpa cupidatat voluptate\"\n            }\n          },\n          {\n            \"id\": \"consequat mollit nul\",\n            \"name\": \"voluptate occaecat sit Ut\",\n            \"rent\": 93072260.92592496,\n            \"deposit\": 15578630.86562477,\n            \"available\": false,\n            \"immediate\": false,\n            \"availableDate\": \"incididunt aliquip\",\n            \"shortterm\": false,\n            \"longterm\": true,\n            \"unitNumber\": \"dolor\",\n            \"unitName\": {},\n            \"surface\": -91275121,\n            \"furnished\": false,\n            \"heat\": true,\n            \"water\": true,\n            \"electricity\": false,\n            \"internet\": false,\n            \"television\": true,\n            \"order\": -94085257,\n            \"published\": true,\n            \"bedroom\": {\n              \"name\": \"magna Lorem\"\n            },\n            \"bathroom\": {\n              \"name\": \"sed tempor qui\"\n            }\n          }\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "0bc23faf-29bb-49e0-9f29-ef9a6c6228fe",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "property",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a16edc5b-f012-42a0-a754-69fa5791b0a8",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/property/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/property/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/property/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"listingId\":{\"type\":\"number\"},\"name\":{\"type\":\"string\"},\"address\":{\"type\":\"string\"},\"latitude\":{\"type\":\"string\"},\"longitude\":{\"type\":\"string\"},\"yearBuilt\":{\"type\":[\"integer\",\"null\"]},\"descriptionTitle\":{\"type\":[\"string\",\"null\"]},\"descriptionSubtitle\":{\"type\":[\"string\",\"null\"]},\"descriptionText\":{\"type\":[\"string\",\"null\"]},\"smoking\":{\"type\":\"boolean\"},\"cats\":{\"type\":\"boolean\"},\"dogs\":{\"type\":\"boolean\"},\"petsNegotiable\":{\"type\":\"boolean\"},\"petsFee\":{\"type\":[\"integer\",\"null\"]},\"petsFeeInterval\":{\"type\":[\"string\",\"null\"]},\"published\":{\"type\":\"boolean\"},\"customerRanking\":{\"type\":\"number\"},\"paidSearchRanking\":{\"type\":\"boolean\"},\"city\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]},\"featureToProperty\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"feature\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]}},\"required\":[\"feature\"]}},\"buildingFeatureToProperty\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"buildingFeature\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]}},\"required\":[\"buildingFeature\"]}},\"community\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"score\":{\"type\":[\"integer\",\"null\"]},\"imageUrl\":{\"type\":[\"string\",\"null\"]},\"quadrant\":{\"type\":[\"string\",\"null\"]},\"sector\":{\"type\":[\"string\",\"null\"]},\"ward\":{\"type\":[\"string\",\"null\"]},\"population\":{\"type\":[\"integer\",\"null\"]},\"dwellings\":{\"type\":[\"integer\",\"null\"]},\"usedForRenting\":{\"type\":[\"number\",\"null\"]},\"area\":{\"type\":[\"number\",\"null\"]},\"density\":{\"type\":[\"number\",\"null\"]},\"averageIncome\":{\"type\":[\"integer\",\"null\"]},\"lowIncome\":{\"type\":[\"number\",\"null\"]},\"immigrants\":{\"type\":[\"number\",\"null\"]},\"elevation\":{\"type\":[\"integer\",\"null\"]},\"established\":{\"type\":[\"integer\",\"null\"]},\"description\":{\"type\":[\"string\",\"null\"]},\"latitude\":{\"type\":\"number\"},\"longitude\":{\"type\":\"number\"},\"communityFeatureToCommunity\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"communityFeature\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]}},\"required\":[\"communityFeature\"]}}},\"required\":[\"name\",\"score\",\"imageUrl\",\"quadrant\",\"sector\",\"ward\",\"population\",\"dwellings\",\"usedForRenting\",\"area\",\"density\",\"averageIncome\",\"lowIncome\",\"immigrants\",\"elevation\",\"established\",\"description\",\"latitude\",\"longitude\",\"communityFeatureToCommunity\"]},\"medias\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"assetId\":{\"type\":\"string\"},\"order\":{\"type\":\"number\"}},\"required\":[\"assetId\",\"order\"]}},\"parkings\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"fee\":{\"type\":\"number\"},\"feeInterval\":{\"type\":\"string\"}},\"required\":[\"name\",\"fee\",\"feeInterval\"]}},\"typeProp\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]},\"floorPlans\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"order\":{\"type\":\"number\"},\"units\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"rent\":{\"type\":\"number\"},\"deposit\":{\"type\":[\"number\",\"null\"]},\"available\":{\"type\":\"boolean\"},\"immediate\":{\"type\":\"boolean\"},\"availableDate\":{\"type\":[\"string\",\"null\"]},\"shortterm\":{\"type\":\"boolean\"},\"longterm\":{\"type\":\"boolean\"},\"unitNumber\":{\"type\":[\"string\",\"null\"]},\"unitName\":{\"type\":[null,\"null\"]},\"surface\":{\"type\":\"integer\"},\"furnished\":{\"type\":\"boolean\"},\"heat\":{\"type\":\"boolean\"},\"water\":{\"type\":\"boolean\"},\"electricity\":{\"type\":\"boolean\"},\"internet\":{\"type\":\"boolean\"},\"television\":{\"type\":\"boolean\"},\"order\":{\"type\":\"integer\"},\"published\":{\"type\":\"boolean\"},\"bedroom\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]},\"bathroom\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]}},\"required\":[\"id\",\"name\",\"rent\",\"deposit\",\"available\",\"immediate\",\"availableDate\",\"shortterm\",\"longterm\",\"unitNumber\",\"unitName\",\"surface\",\"furnished\",\"heat\",\"water\",\"electricity\",\"internet\",\"television\",\"order\",\"published\",\"bedroom\",\"bathroom\"]}}},\"required\":[\"id\",\"name\",\"order\",\"units\"]}}},\"required\":[\"id\",\"listingId\",\"name\",\"address\",\"latitude\",\"longitude\",\"yearBuilt\",\"descriptionTitle\",\"descriptionSubtitle\",\"descriptionText\",\"smoking\",\"cats\",\"dogs\",\"petsNegotiable\",\"petsFee\",\"petsFeeInterval\",\"published\",\"customerRanking\",\"paidSearchRanking\",\"city\",\"featureToProperty\",\"buildingFeatureToProperty\",\"community\",\"medias\",\"parkings\",\"typeProp\",\"floorPlans\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/property/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "2f3a998a-8c3c-41ee-8caa-fc47adca0db1",
          "name": "/property/list",
          "request": {
            "name": "/property/list",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "property",
                "list"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "limit",
                  "value": "10"
                },
                {
                  "disabled": true,
                  "key": "orderBy",
                  "value": "address-asc"
                },
                {
                  "disabled": true,
                  "key": "cursor",
                  "value": "abqdj6xe8puto1j83soz3bml"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"communityId\",\n          \"rbkazahh8zi1l3hb6nmb1b63\"\n        ],\n        [\n          \"eq\",\n          \"communityId\",\n          \"vwag6tfsb614te8wvzi1q5xt\"\n        ]\n      ]\n    ],\n    [\n      \"gt\",\n      \"yearBuilt\",\n      2010\n    ],\n    [\n      \"eq\",\n      \"cityId\",\n      \"e7o6u69iu9bv1vp00s3a9gbj\"\n    ],\n    [\n      \"eq\",\n      \"smoking\",\n      0\n    ],\n    [\n      \"eq\",\n      \"cats\",\n      1\n    ],\n    [\n      \"eq\",\n      \"dogs\",\n      1\n    ]\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "98cba049-856e-4f5a-9076-50d427b029e0",
              "name": "Responds with an array of property objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
              "originalRequest": {
                "url": {
                  "path": [
                    "property",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "address-asc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"communityId\",\n          \"rbkazahh8zi1l3hb6nmb1b63\"\n        ],\n        [\n          \"eq\",\n          \"communityId\",\n          \"vwag6tfsb614te8wvzi1q5xt\"\n        ]\n      ]\n    ],\n    [\n      \"gt\",\n      \"yearBuilt\",\n      2010\n    ],\n    [\n      \"eq\",\n      \"cityId\",\n      \"e7o6u69iu9bv1vp00s3a9gbj\"\n    ],\n    [\n      \"eq\",\n      \"smoking\",\n      0\n    ],\n    [\n      \"eq\",\n      \"cats\",\n      1\n    ],\n    [\n      \"eq\",\n      \"dogs\",\n      1\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"ad quis sit aliqua in\",\n      \"listingId\": -62624147.63921016,\n      \"name\": \"id\",\n      \"address\": \"sint\",\n      \"latitude\": \"Duis\",\n      \"longitude\": \"officia cupidatat culp\",\n      \"yearBuilt\": -49850251.015879855,\n      \"descriptionTitle\": \"labore cillum\",\n      \"descriptionSubtitle\": \"dolore aliqua Ut exercitation do\",\n      \"descriptionText\": \"voluptate ut Lorem\",\n      \"typePropId\": \"irure amet exercitation consectetur\",\n      \"communityId\": \"deserunt minim\",\n      \"cityId\": \"ad nulla culpa\",\n      \"smoking\": true,\n      \"cats\": true,\n      \"dogs\": false,\n      \"petsNegotiable\": true,\n      \"petsFee\": -96171400.74294901,\n      \"petsFeeInterval\": \"tempor laboris\",\n      \"published\": true,\n      \"customerRanking\": 90179269.44567877,\n      \"paidSearchRanking\": true,\n      \"createdAt\": \"magna enim c\",\n      \"updatedAt\": \"consequat aute id aliquip\"\n    },\n    {\n      \"id\": \"Lorem Duis fugiat deserunt Excepteur\",\n      \"listingId\": -21706882.42842482,\n      \"name\": \"Lorem commodo est\",\n      \"address\": \"sunt commodo dolore\",\n      \"latitude\": \"sint laboris Lorem fugiat\",\n      \"longitude\": \"eiusmod cupidatat magna voluptate\",\n      \"yearBuilt\": 88187084.20387918,\n      \"descriptionTitle\": \"enim reprehenderit\",\n      \"descriptionSubtitle\": \"Ut al\",\n      \"descriptionText\": \"aliqua incididunt ut\",\n      \"typePropId\": \"nostrud ullamco\",\n      \"communityId\": \"commodo nostrud\",\n      \"cityId\": \"cillum culpa ad\",\n      \"smoking\": true,\n      \"cats\": false,\n      \"dogs\": true,\n      \"petsNegotiable\": true,\n      \"petsFee\": -56565432.97601053,\n      \"petsFeeInterval\": \"reprehenderit id ut fugiat\",\n      \"published\": false,\n      \"customerRanking\": -20300818.166441604,\n      \"paidSearchRanking\": true,\n      \"createdAt\": \"dolor ali\",\n      \"updatedAt\": \"cupidatat mollit\"\n    }\n  ]\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "6150e1bc-b543-4a92-b825-198c4b4b318b",
              "name": "Responds with a bad request error object",
              "originalRequest": {
                "url": {
                  "path": [
                    "property",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "address-asc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"communityId\",\n          \"rbkazahh8zi1l3hb6nmb1b63\"\n        ],\n        [\n          \"eq\",\n          \"communityId\",\n          \"vwag6tfsb614te8wvzi1q5xt\"\n        ]\n      ]\n    ],\n    [\n      \"gt\",\n      \"yearBuilt\",\n      2010\n    ],\n    [\n      \"eq\",\n      \"cityId\",\n      \"e7o6u69iu9bv1vp00s3a9gbj\"\n    ],\n    [\n      \"eq\",\n      \"smoking\",\n      0\n    ],\n    [\n      \"eq\",\n      \"cats\",\n      1\n    ],\n    [\n      \"eq\",\n      \"dogs\",\n      1\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a0ad4268-d50f-49b6-8691-abc952f62efc",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/property/list - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/property/list - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/property/list - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"listingId\":{\"type\":\"number\"},\"name\":{\"type\":\"string\",\"maxLength\":256},\"address\":{\"type\":\"string\",\"maxLength\":256},\"latitude\":{\"type\":\"string\"},\"longitude\":{\"type\":\"string\"},\"yearBuilt\":{\"type\":[\"number\",\"null\"]},\"descriptionTitle\":{\"type\":[\"string\",\"null\"],\"maxLength\":256},\"descriptionSubtitle\":{\"type\":[\"string\",\"null\"],\"maxLength\":256},\"descriptionText\":{\"type\":[\"string\",\"null\"]},\"typePropId\":{\"type\":\"string\",\"maxLength\":128},\"communityId\":{\"type\":[\"string\",\"null\"],\"maxLength\":128},\"cityId\":{\"type\":\"string\",\"maxLength\":128},\"smoking\":{\"type\":\"boolean\"},\"cats\":{\"type\":\"boolean\"},\"dogs\":{\"type\":\"boolean\"},\"petsNegotiable\":{\"type\":\"boolean\"},\"petsFee\":{\"type\":[\"number\",\"null\"]},\"petsFeeInterval\":{\"type\":[\"string\",\"null\"],\"maxLength\":128},\"published\":{\"type\":\"boolean\"},\"customerRanking\":{\"type\":\"number\"},\"paidSearchRanking\":{\"type\":\"boolean\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"listingId\",\"name\",\"address\",\"latitude\",\"longitude\",\"yearBuilt\",\"descriptionTitle\",\"descriptionSubtitle\",\"descriptionText\",\"typePropId\",\"communityId\",\"cityId\",\"smoking\",\"cats\",\"dogs\",\"petsNegotiable\",\"petsFee\",\"petsFeeInterval\",\"published\",\"customerRanking\",\"paidSearchRanking\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/property/list - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "458e8e98-2865-4139-924c-72558533b01e",
          "name": "/property/create",
          "request": {
            "name": "/property/create",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "property",
                "create"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Property name\",\n  \"address\": \"123 Main St, Calgary, AB T2P 1J9\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\",\n  \"yearBuilt\": 2020,\n  \"descriptionTitle\": \"Property description title\",\n  \"descriptionSubtitle\": \"Property description subtitle\",\n  \"descriptionText\": \"Property description text\",\n  \"typePropId\": \"a5ug1fdwkkc4byl1uw9d7cqo\",\n  \"communityId\": \"a5ug1fdwkkc4byl1uw9d7cqo\",\n  \"cityId\": \"a5ug1fdwkkc4byl1uw9d7cqo\",\n  \"smoking\": false,\n  \"cats\": true,\n  \"dogs\": false,\n  \"petsNegotiable\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "0c20882d-42da-4b76-a865-ce10fc2fb21b",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "property",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Property name\",\n  \"address\": \"123 Main St, Calgary, AB T2P 1J9\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\",\n  \"yearBuilt\": 2020,\n  \"descriptionTitle\": \"Property description title\",\n  \"descriptionSubtitle\": \"Property description subtitle\",\n  \"descriptionText\": \"Property description text\",\n  \"typePropId\": \"a5ug1fdwkkc4byl1uw9d7cqo\",\n  \"communityId\": \"a5ug1fdwkkc4byl1uw9d7cqo\",\n  \"cityId\": \"a5ug1fdwkkc4byl1uw9d7cqo\",\n  \"smoking\": false,\n  \"cats\": true,\n  \"dogs\": false,\n  \"petsNegotiable\": true\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sed ut aute\"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "6cbd6760-1cb0-46d9-a0b5-56a8118cba07",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "property",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Property name\",\n  \"address\": \"123 Main St, Calgary, AB T2P 1J9\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\",\n  \"yearBuilt\": 2020,\n  \"descriptionTitle\": \"Property description title\",\n  \"descriptionSubtitle\": \"Property description subtitle\",\n  \"descriptionText\": \"Property description text\",\n  \"typePropId\": \"a5ug1fdwkkc4byl1uw9d7cqo\",\n  \"communityId\": \"a5ug1fdwkkc4byl1uw9d7cqo\",\n  \"cityId\": \"a5ug1fdwkkc4byl1uw9d7cqo\",\n  \"smoking\": false,\n  \"cats\": true,\n  \"dogs\": false,\n  \"petsNegotiable\": true\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "41135be9-8873-4c0b-a742-a31e5ba79e35",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/property/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/property/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/property/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/property/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "39d36a15-57c6-4750-8abc-f3b457394da8",
          "name": "/property/update/:id",
          "request": {
            "name": "/property/update/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "property",
                "update",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "Duis in non tempor",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Property name\",\n  \"address\": \"123 Main St, Calgary, AB T2P 1J9\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\",\n  \"yearBuilt\": 2020,\n  \"descriptionTitle\": \"Property description title\",\n  \"descriptionSubtitle\": \"Property description subtitle\",\n  \"descriptionText\": \"Property description text\",\n  \"smoking\": true,\n  \"cats\": true,\n  \"dogs\": false,\n  \"petsNegotiable\": true,\n  \"petsFee\": 100\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "4983348d-5897-41ff-9075-625cf2d5ab7a",
              "name": "Responds with the id of the updated property.",
              "originalRequest": {
                "url": {
                  "path": [
                    "property",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Property name\",\n  \"address\": \"123 Main St, Calgary, AB T2P 1J9\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\",\n  \"yearBuilt\": 2020,\n  \"descriptionTitle\": \"Property description title\",\n  \"descriptionSubtitle\": \"Property description subtitle\",\n  \"descriptionText\": \"Property description text\",\n  \"smoking\": true,\n  \"cats\": true,\n  \"dogs\": false,\n  \"petsNegotiable\": true,\n  \"petsFee\": 100\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sed ut aute\"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "06c41f93-9367-44af-aea2-1bd06e2a19f6",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "property",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Property name\",\n  \"address\": \"123 Main St, Calgary, AB T2P 1J9\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\",\n  \"yearBuilt\": 2020,\n  \"descriptionTitle\": \"Property description title\",\n  \"descriptionSubtitle\": \"Property description subtitle\",\n  \"descriptionText\": \"Property description text\",\n  \"smoking\": true,\n  \"cats\": true,\n  \"dogs\": false,\n  \"petsNegotiable\": true,\n  \"petsFee\": 100\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cffa4291-d510-497d-bc9c-7a2395ba7a5d",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[PUT]::/property/update/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[PUT]::/property/update/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[PUT]::/property/update/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[PUT]::/property/update/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "826877e6-de91-4adf-9be9-8f6c04511e7b",
          "name": "/property/delete/:id",
          "request": {
            "name": "/property/delete/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "property",
                "delete",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "Duis in non tempor",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "c5f88cc2-7e87-4fbd-8f71-4f53549ba07e",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "property",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "8fefd718-aaa7-4be0-963d-2cf4d6ca3ff1",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "property",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "a9f8f389-8624-45f3-86fd-efd264a24dd0",
              "name": "Responds with a conflict error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "property",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "85aec11b-af83-42ea-b251-20f9b77363b6",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[DELETE]::/property/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[DELETE]::/property/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[DELETE]::/property/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/property/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "30859f6e-9349-4215-8259-75931b46e992",
      "name": "region",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "05a9b0f1-3bec-4fac-a7a5-25ab50223c66",
          "name": "/region/:id",
          "request": {
            "name": "/region/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "region",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "Duis in non tempor",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "051580cb-ed0d-45a7-974d-dd6b0b13a2bd",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "region",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"et ut\",\n    \"name\": \"laboris minim sunt Excepteur aute\",\n    \"administrativeName\": \"Duis anim sit irure\",\n    \"cities\": [\n      {\n        \"id\": \"veniam cupidatat in Duis\",\n        \"name\": \"qui nulla esse incididunt laboris\"\n      },\n      {\n        \"id\": \"cupidatat minim id\",\n        \"name\": \"aute velit exercitation incididunt\"\n      }\n    ]\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "1ee1b2f1-2b76-4f86-aa45-8bd9d4eef1ca",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "region",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "933f2908-3457-4de4-af0f-dc7e0ad1eaaf",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/region/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/region/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/region/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"administrativeName\":{\"type\":\"string\"},\"cities\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\"]}}},\"required\":[\"id\",\"name\",\"administrativeName\",\"cities\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/region/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "238cc081-2929-4abd-9ed2-1960a12dc225",
          "name": "/region/list",
          "request": {
            "name": "/region/list",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "region",
                "list"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "limit",
                  "value": "10"
                },
                {
                  "disabled": true,
                  "key": "orderBy",
                  "value": "name-desc"
                },
                {
                  "disabled": true,
                  "key": "cursor",
                  "value": "abqdj6xe8puto1j83soz3bml"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Alberta\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Manitoba\"\n        ]\n      ]\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-23T00:00:00.000Z\",\n      \"2024-02-12T00:00:00.000Z\"\n    ]\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "d76cb5e3-87c9-4297-beb7-365154b8d20b",
              "name": "Responds with an array of region objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
              "originalRequest": {
                "url": {
                  "path": [
                    "region",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "name-desc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Alberta\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Manitoba\"\n        ]\n      ]\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-23T00:00:00.000Z\",\n      \"2024-02-12T00:00:00.000Z\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"ut esse sunt\",\n      \"name\": \"qui cillum amet\",\n      \"administrativeName\": \"culpa irure in pariatur\",\n      \"createdAt\": \"sit cillum non\",\n      \"updatedAt\": \"irure amet do\"\n    },\n    {\n      \"id\": \"occaecat\",\n      \"name\": \"ullamco officia\",\n      \"administrativeName\": \"irure culpa\",\n      \"createdAt\": \"et sit\",\n      \"updatedAt\": \"occaecat sint eiusmod in\"\n    }\n  ]\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "dc77df01-02ff-40d1-8a51-f92eaf73bca2",
              "name": "Responds with a bad request error object",
              "originalRequest": {
                "url": {
                  "path": [
                    "region",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "name-desc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Alberta\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Manitoba\"\n        ]\n      ]\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-23T00:00:00.000Z\",\n      \"2024-02-12T00:00:00.000Z\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e576b202-f22c-4756-8da5-9d8a07c215d0",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/region/list - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/region/list - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/region/list - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"administrativeName\":{\"type\":\"string\",\"maxLength\":256},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"administrativeName\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/region/list - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "afe0ff68-3599-4cf8-842e-0dad40426b3b",
          "name": "/region/create",
          "request": {
            "name": "/region/create",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "region",
                "create"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Ontario\",\n  \"administrativeName\": \"Province\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "856c55fb-4c49-46e9-a9bb-72522b0fa249",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "region",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Ontario\",\n  \"administrativeName\": \"Province\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sed ut aute\"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "8aba8338-3f08-48ce-8924-6c68ed5387c2",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "region",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Ontario\",\n  \"administrativeName\": \"Province\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5964e965-6306-4aa7-90cb-dd7255118c2c",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/region/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/region/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/region/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/region/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "05a926a6-6d7d-46b4-a349-fb3422c6b5d6",
          "name": "/region/update/:id",
          "request": {
            "name": "/region/update/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "region",
                "update",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "Duis in non tempor",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"British Columbia\",\n  \"administrativeName\": \"Province\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "87d0bbfb-8e5a-4171-af13-d146c1644157",
              "name": "Responds with the id of the updated region.",
              "originalRequest": {
                "url": {
                  "path": [
                    "region",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"British Columbia\",\n  \"administrativeName\": \"Province\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sed ut aute\"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "f3897fd9-a187-48e3-8f3e-ed2bdbfd43d9",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "region",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"British Columbia\",\n  \"administrativeName\": \"Province\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f094f674-9dc7-450c-a758-cf7be040dcd7",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[PUT]::/region/update/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[PUT]::/region/update/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[PUT]::/region/update/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[PUT]::/region/update/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "682c9c8d-add3-4334-bc1a-41ac2515fcad",
          "name": "/region/delete/:id",
          "request": {
            "name": "/region/delete/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "region",
                "delete",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "Duis in non tempor",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "5e0625f0-d630-4bfc-8783-c262d6d77129",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "region",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "6d992e8c-5ed9-441c-bbf3-cb1b850e88a3",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "region",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "6b6e373a-3605-4d79-9974-4c59bfbd9ba0",
              "name": "Responds with a conflict error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "region",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "60a53e48-4001-4867-9e68-068c8088859b",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[DELETE]::/region/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[DELETE]::/region/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[DELETE]::/region/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/region/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "f13da4b1-b755-402c-9c5d-5fc66d2a45e4",
      "name": "typeProp",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "ccb58abd-5a60-42e7-b63f-13c0a58a1372",
          "name": "/type-prop/list",
          "request": {
            "name": "/type-prop/list",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "type-prop",
                "list"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "limit",
                  "value": "10"
                },
                {
                  "disabled": true,
                  "key": "orderBy",
                  "value": "updatedAt-asc"
                },
                {
                  "disabled": true,
                  "key": "cursor",
                  "value": "abqdj6xe8puto1j83soz3bml"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "7fc54601-330e-4e23-88fd-cbd26033b50e",
              "name": "Responds with an array of typeProp objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
              "originalRequest": {
                "url": {
                  "path": [
                    "type-prop",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "updatedAt-asc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"mollit adipisicing in\",\n      \"name\": \"ullamco nostrud ea\",\n      \"order\": -2556487.8001251817,\n      \"createdAt\": \"minim\",\n      \"updatedAt\": \"nostrud fugiat officia\"\n    },\n    {\n      \"id\": \"amet enim\",\n      \"name\": \"ex quis\",\n      \"order\": -99635132.47752136,\n      \"createdAt\": \"ad in\",\n      \"updatedAt\": \"v\"\n    }\n  ]\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "5891785a-df6c-4bb5-ab07-d6167f7835bf",
              "name": "Responds with a bad request error object",
              "originalRequest": {
                "url": {
                  "path": [
                    "type-prop",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "updatedAt-asc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "703d7f1e-a857-4720-8aa3-00e9c5bdb240",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/type-prop/list - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/type-prop/list - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/type-prop/list - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"order\":{\"type\":\"number\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"order\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/type-prop/list - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "ed7169e7-faea-4e58-be50-b457d8e6fd6f",
          "name": "/type-prop/create",
          "request": {
            "name": "/type-prop/create",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "type-prop",
                "create"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "572d6cc0-70ec-4625-a6b3-c15b3cd5ce20",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "type-prop",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sed ut aute\"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "e2b516c6-23cd-44c5-adeb-c97799dcd9b9",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "type-prop",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6b3617f3-afc8-456e-9492-852e48071406",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/type-prop/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/type-prop/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/type-prop/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/type-prop/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "09cd17b7-d54e-483f-8a2c-c9250f1f522f",
          "name": "/type-prop/update/:id",
          "request": {
            "name": "/type-prop/update/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "type-prop",
                "update",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "Duis in non tempor",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "590d567e-389b-403a-a516-fcc85bad40ca",
              "name": "Responds with the id of the updated typeProp.",
              "originalRequest": {
                "url": {
                  "path": [
                    "type-prop",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sed ut aute\"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "aea934b9-e7a2-45af-9c13-b480a16dfbf1",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "type-prop",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"1.5\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dd221946-ecce-4708-b721-d1914137dd2f",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[PUT]::/type-prop/update/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[PUT]::/type-prop/update/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[PUT]::/type-prop/update/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[PUT]::/type-prop/update/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "fb3dd7dc-0c29-4755-9f93-beeba0084fd3",
          "name": "/type-prop/delete/:id",
          "request": {
            "name": "/type-prop/delete/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "type-prop",
                "delete",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "Duis in non tempor",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "8d89df9a-8dfb-47c2-be4f-4f4e26be0882",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "type-prop",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "7765bcc3-2bda-47dd-9209-b321fddad118",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "type-prop",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "2b30270e-9fa0-43b3-82b7-7dd462fa935e",
              "name": "Responds with a conflict error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "type-prop",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "acf080bd-267c-443c-8738-3be9d2474468",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[DELETE]::/type-prop/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[DELETE]::/type-prop/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[DELETE]::/type-prop/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/type-prop/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "532a8e7f-cdb7-4c18-bf3e-fd441e7e9e70",
      "name": "unit",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "1ed1651d-c8c4-4132-a696-f6e51f726a04",
          "name": "/unit/:id",
          "request": {
            "name": "/unit/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "unit",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "Duis in non tempor",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "d65100d8-94ea-46e3-bc09-e14ee3380894",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "unit",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"consectetur sint\",\n    \"propertyId\": \"proident consequat aliqua elit\",\n    \"floorPlanId\": \"nulla adipisicing n\",\n    \"name\": \"anim\",\n    \"rent\": 333148,\n    \"deposit\": 90022980,\n    \"available\": false,\n    \"immediate\": true,\n    \"availableDate\": \"Lorem veniam Ut\",\n    \"shortterm\": true,\n    \"longterm\": true,\n    \"unitNumber\": \"adipisicing officia \",\n    \"unitName\": \"Duis aliquip\",\n    \"surface\": -86509559,\n    \"furnished\": false,\n    \"heat\": false,\n    \"water\": true,\n    \"electricity\": true,\n    \"internet\": true,\n    \"television\": false,\n    \"order\": -20943016,\n    \"published\": false,\n    \"bedroom\": {\n      \"name\": \"in nulla veniam sint\"\n    },\n    \"bathroom\": {\n      \"name\": \"pariatur mollit\"\n    }\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "240ac17f-373e-4031-be16-e4806af60bb6",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "unit",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4c5dfd2c-55e6-4035-bc11-79acf47e915a",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/unit/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/unit/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/unit/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"propertyId\":{\"type\":\"string\"},\"floorPlanId\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"rent\":{\"type\":\"integer\"},\"deposit\":{\"type\":[\"integer\",\"null\"]},\"available\":{\"type\":\"boolean\"},\"immediate\":{\"type\":\"boolean\"},\"availableDate\":{\"type\":[\"string\",\"null\"]},\"shortterm\":{\"type\":\"boolean\"},\"longterm\":{\"type\":\"boolean\"},\"unitNumber\":{\"type\":[\"string\",\"null\"]},\"unitName\":{\"type\":[\"string\",\"null\"]},\"surface\":{\"type\":\"integer\"},\"furnished\":{\"type\":\"boolean\"},\"heat\":{\"type\":\"boolean\"},\"water\":{\"type\":\"boolean\"},\"electricity\":{\"type\":\"boolean\"},\"internet\":{\"type\":\"boolean\"},\"television\":{\"type\":\"boolean\"},\"order\":{\"type\":\"integer\"},\"published\":{\"type\":\"boolean\"},\"bedroom\":{\"type\":[\"object\",\"null\"],\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]},\"bathroom\":{\"type\":[\"object\",\"null\"],\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]}},\"required\":[\"id\",\"propertyId\",\"floorPlanId\",\"name\",\"rent\",\"deposit\",\"available\",\"immediate\",\"availableDate\",\"shortterm\",\"longterm\",\"unitNumber\",\"unitName\",\"surface\",\"furnished\",\"heat\",\"water\",\"electricity\",\"internet\",\"television\",\"order\",\"published\",\"bedroom\",\"bathroom\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/unit/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "4d6c53e0-e906-4511-b7dd-8880cc949957",
          "name": "/unit/list",
          "request": {
            "name": "/unit/list",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "unit",
                "list"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "limit",
                  "value": "10"
                },
                {
                  "disabled": true,
                  "key": "orderBy",
                  "value": "deposit-desc"
                },
                {
                  "disabled": true,
                  "key": "cursor",
                  "value": "abqdj6xe8puto1j83soz3bml"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"bedroomId\",\n          \"ztie6w95a0ia39zssos2p4bx\"\n        ],\n        [\n          \"eq\",\n          \"bedroomId\",\n          \"kcfw2qhwnky96aeeov73aaze\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"bathroomId\",\n      \"rtfvftapzbzz6czz73ss09jf\"\n    ],\n    [\n      \"eq\",\n      \"longterm\",\n      1\n    ],\n    [\n      \"between\",\n      \"surface\",\n      700,\n      1000\n    ],\n    [\n      \"eq\",\n      \"furnished\",\n      1\n    ],\n    [\n      \"eq\",\n      \"heat\",\n      1\n    ],\n    [\n      \"eq\",\n      \"water\",\n      1\n    ],\n    [\n      \"eq\",\n      \"electricity\",\n      1\n    ]\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "8bfbd799-6b9a-49fb-928b-64423f006e87",
              "name": "Responds with an array of unit objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
              "originalRequest": {
                "url": {
                  "path": [
                    "unit",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "deposit-desc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"bedroomId\",\n          \"ztie6w95a0ia39zssos2p4bx\"\n        ],\n        [\n          \"eq\",\n          \"bedroomId\",\n          \"kcfw2qhwnky96aeeov73aaze\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"bathroomId\",\n      \"rtfvftapzbzz6czz73ss09jf\"\n    ],\n    [\n      \"eq\",\n      \"longterm\",\n      1\n    ],\n    [\n      \"between\",\n      \"surface\",\n      700,\n      1000\n    ],\n    [\n      \"eq\",\n      \"furnished\",\n      1\n    ],\n    [\n      \"eq\",\n      \"heat\",\n      1\n    ],\n    [\n      \"eq\",\n      \"water\",\n      1\n    ],\n    [\n      \"eq\",\n      \"electricity\",\n      1\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"ea offi\",\n      \"name\": \"est nulla exercitation\",\n      \"propertyId\": \"cillum dolor dolore aliqua\",\n      \"floorPlanId\": \"Duis ut\",\n      \"rent\": 8939002.127505839,\n      \"deposit\": 42245729.575885385,\n      \"available\": true,\n      \"immediate\": true,\n      \"availableDate\": \"tempor nostrud officia\",\n      \"shortterm\": false,\n      \"longterm\": false,\n      \"unitNumber\": \"est dolore\",\n      \"unitName\": \"elit al\",\n      \"surface\": -62994286.19667813,\n      \"furnished\": true,\n      \"bedroomId\": \"ad sit\",\n      \"bathroomId\": \"commodo occaecat id\",\n      \"heat\": false,\n      \"water\": false,\n      \"electricity\": false,\n      \"internet\": true,\n      \"television\": true,\n      \"order\": -21632899.858630955,\n      \"published\": true,\n      \"createdAt\": \"ea Ut sint Lorem velit\",\n      \"updatedAt\": \"Ut cillum id irure Excepteur\"\n    },\n    {\n      \"id\": \"magna ullamco proident\",\n      \"name\": \"sint exercitation enim\",\n      \"propertyId\": \"laboris cupidatat\",\n      \"floorPlanId\": \"ex in sint labore\",\n      \"rent\": -60848600.731676236,\n      \"deposit\": -97596221.07177672,\n      \"available\": true,\n      \"immediate\": false,\n      \"availableDate\": \"Duis deserunt id\",\n      \"shortterm\": false,\n      \"longterm\": false,\n      \"unitNumber\": \"dolore minim exercitation non cillum\",\n      \"unitName\": \"esse in occaecat\",\n      \"surface\": 37807322.98066419,\n      \"furnished\": true,\n      \"bedroomId\": \"amet labore et\",\n      \"bathroomId\": \"ad\",\n      \"heat\": false,\n      \"water\": true,\n      \"electricity\": true,\n      \"internet\": false,\n      \"television\": false,\n      \"order\": 54805563.367693424,\n      \"published\": false,\n      \"createdAt\": \"in amet dolor dolor\",\n      \"updatedAt\": \"Excepteur voluptate\"\n    }\n  ]\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "e71a47ce-cd66-4b15-99dd-db51d302ecf8",
              "name": "Responds with a bad request error object",
              "originalRequest": {
                "url": {
                  "path": [
                    "unit",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "deposit-desc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"bedroomId\",\n          \"ztie6w95a0ia39zssos2p4bx\"\n        ],\n        [\n          \"eq\",\n          \"bedroomId\",\n          \"kcfw2qhwnky96aeeov73aaze\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"bathroomId\",\n      \"rtfvftapzbzz6czz73ss09jf\"\n    ],\n    [\n      \"eq\",\n      \"longterm\",\n      1\n    ],\n    [\n      \"between\",\n      \"surface\",\n      700,\n      1000\n    ],\n    [\n      \"eq\",\n      \"furnished\",\n      1\n    ],\n    [\n      \"eq\",\n      \"heat\",\n      1\n    ],\n    [\n      \"eq\",\n      \"water\",\n      1\n    ],\n    [\n      \"eq\",\n      \"electricity\",\n      1\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "54e52c07-6e7c-4169-9a85-5f063f099ab1",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/unit/list - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/unit/list - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/unit/list - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"propertyId\":{\"type\":\"string\",\"maxLength\":128},\"floorPlanId\":{\"type\":\"string\",\"maxLength\":128},\"rent\":{\"type\":\"number\"},\"deposit\":{\"type\":[\"number\",\"null\"]},\"available\":{\"type\":\"boolean\"},\"immediate\":{\"type\":\"boolean\"},\"availableDate\":{\"type\":[\"string\",\"null\"]},\"shortterm\":{\"type\":\"boolean\"},\"longterm\":{\"type\":\"boolean\"},\"unitNumber\":{\"type\":[\"string\",\"null\"],\"maxLength\":128},\"unitName\":{\"type\":[\"string\",\"null\"],\"maxLength\":128},\"surface\":{\"type\":\"number\"},\"furnished\":{\"type\":\"boolean\"},\"bedroomId\":{\"type\":[\"string\",\"null\"],\"maxLength\":128},\"bathroomId\":{\"type\":[\"string\",\"null\"],\"maxLength\":128},\"heat\":{\"type\":\"boolean\"},\"water\":{\"type\":\"boolean\"},\"electricity\":{\"type\":\"boolean\"},\"internet\":{\"type\":\"boolean\"},\"television\":{\"type\":\"boolean\"},\"order\":{\"type\":\"number\"},\"published\":{\"type\":\"boolean\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"propertyId\",\"floorPlanId\",\"rent\",\"deposit\",\"available\",\"immediate\",\"availableDate\",\"shortterm\",\"longterm\",\"unitNumber\",\"unitName\",\"surface\",\"furnished\",\"bedroomId\",\"bathroomId\",\"heat\",\"water\",\"electricity\",\"internet\",\"television\",\"order\",\"published\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/unit/list - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "5e3665a3-431e-4855-a11f-a691ad7a3260",
          "name": "/unit/create",
          "request": {
            "name": "/unit/create",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "unit",
                "create"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"propertyId\": \"a5ug1fdwkkc4byl1uw9d7cqo\",\n  \"floorPlanId\": \"pkzhabeowrf5q2gj0gtl1657\",\n  \"name\": \"Unit name\",\n  \"rent\": 1000,\n  \"deposit\": 1000,\n  \"shortterm\": true,\n  \"longterm\": true,\n  \"unitNumber\": \"101\",\n  \"unitName\": \"101\",\n  \"surface\": 1000,\n  \"furnished\": true,\n  \"heat\": true,\n  \"water\": true,\n  \"electricity\": true,\n  \"internet\": true,\n  \"television\": true,\n  \"order\": 1,\n  \"bedroomId\": \"ztie6w95a0ia39zssos2p4bx\",\n  \"bathroomId\": \"rtfvftapzbzz6czz73ss09jf\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "b7487284-643f-422e-9f84-1164a99ceff4",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "unit",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"propertyId\": \"a5ug1fdwkkc4byl1uw9d7cqo\",\n  \"floorPlanId\": \"pkzhabeowrf5q2gj0gtl1657\",\n  \"name\": \"Unit name\",\n  \"rent\": 1000,\n  \"deposit\": 1000,\n  \"shortterm\": true,\n  \"longterm\": true,\n  \"unitNumber\": \"101\",\n  \"unitName\": \"101\",\n  \"surface\": 1000,\n  \"furnished\": true,\n  \"heat\": true,\n  \"water\": true,\n  \"electricity\": true,\n  \"internet\": true,\n  \"television\": true,\n  \"order\": 1,\n  \"bedroomId\": \"ztie6w95a0ia39zssos2p4bx\",\n  \"bathroomId\": \"rtfvftapzbzz6czz73ss09jf\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sed ut aute\"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "481114db-735c-4407-a481-dcf67cfaf76b",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "unit",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"propertyId\": \"a5ug1fdwkkc4byl1uw9d7cqo\",\n  \"floorPlanId\": \"pkzhabeowrf5q2gj0gtl1657\",\n  \"name\": \"Unit name\",\n  \"rent\": 1000,\n  \"deposit\": 1000,\n  \"shortterm\": true,\n  \"longterm\": true,\n  \"unitNumber\": \"101\",\n  \"unitName\": \"101\",\n  \"surface\": 1000,\n  \"furnished\": true,\n  \"heat\": true,\n  \"water\": true,\n  \"electricity\": true,\n  \"internet\": true,\n  \"television\": true,\n  \"order\": 1,\n  \"bedroomId\": \"ztie6w95a0ia39zssos2p4bx\",\n  \"bathroomId\": \"rtfvftapzbzz6czz73ss09jf\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c1283cbd-66ba-45e8-b13d-05134a81bb49",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/unit/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/unit/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/unit/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/unit/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "916959f2-3509-4a15-a79a-6a49dfb1ebfb",
          "name": "/unit/update/:id",
          "request": {
            "name": "/unit/update/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "unit",
                "update",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "Duis in non tempor",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"rent\": 1500,\n  \"deposit\": 1500,\n  \"shortterm\": false,\n  \"longterm\": true,\n  \"order\": 0,\n  \"published\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "040eabe2-8291-41a9-ae3b-8d6278a5b8b4",
              "name": "Responds with the id of the updated unit.",
              "originalRequest": {
                "url": {
                  "path": [
                    "unit",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"rent\": 1500,\n  \"deposit\": 1500,\n  \"shortterm\": false,\n  \"longterm\": true,\n  \"order\": 0,\n  \"published\": true\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"sed ut aute\"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "147ae0f3-0753-42c4-af09-33753de1bf87",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "unit",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"rent\": 1500,\n  \"deposit\": 1500,\n  \"shortterm\": false,\n  \"longterm\": true,\n  \"order\": 0,\n  \"published\": true\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7ee860d5-c6d5-47a8-abdc-5d50cce18514",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[PUT]::/unit/update/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[PUT]::/unit/update/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[PUT]::/unit/update/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[PUT]::/unit/update/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "32b300d6-6fb7-40ae-9f06-b857fdc9d501",
          "name": "/unit/delete/:id",
          "request": {
            "name": "/unit/delete/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "unit",
                "delete",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "Duis in non tempor",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "5f417d5d-9653-4e55-b276-82590ce00c01",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "unit",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "66d80f49-5cb5-4f1f-9c20-81179de61bbf",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "unit",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "a9693953-74db-4fea-a55e-8ddffbfcf56e",
              "name": "Responds with a conflict error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "unit",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "Duis in non tempor",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"ullamco ex anim\",\n    \"issues\": [\n      {\n        \"message\": \"tempor consectetur elit\",\n        \"path\": [\n          \"in dolor aliquip\",\n          \"consequat anim aliquip dolor\"\n        ]\n      },\n      {\n        \"message\": \"laborum anim magna\",\n        \"path\": [\n          \"dolor\",\n          \"cupidatat cillum commodo\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d28cd068-bc44-47d6-bacf-f1c85485bb06",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[DELETE]::/unit/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[DELETE]::/unit/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[DELETE]::/unit/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/unit/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "/",
      "key": "baseUrl"
    }
  ],
  "info": {
    "_postman_id": "a5d315e1-f0db-417d-858f-01cda164ef80",
    "name": "Real Estate API Demo",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "",
      "type": "text/plain"
    }
  }
}