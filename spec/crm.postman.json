{
  "_": {
    "postman_id": "39ca12c5-98c9-415b-bc96-0844f545832b"
  },
  "item": [
    {
      "id": "ca6062f9-5512-4369-963d-c1aac05540fe",
      "name": "home",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "bba367b9-e9a0-4b96-9db8-1a3c72e70e6f",
          "name": "/",
          "request": {
            "name": "/",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                ""
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "67ae797e-a0d5-4f3c-aaea-6b2549831127",
              "name": "Responds with a message",
              "originalRequest": {
                "url": {
                  "path": [
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"message\": \"n\"\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "58727348-c33c-4161-8372-baa7f7cbc5d6",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/ - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/ - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/ - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"message\":{\"type\":\"string\"}},\"required\":[\"message\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/ - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "d6491a68-7ddc-44de-a159-647967992215",
      "name": "search",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "5bdc088c-594e-4d9a-b473-c5cce5f174bf",
          "name": "/search",
          "request": {
            "name": "/search",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "search"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "limit",
                  "value": "10"
                },
                {
                  "disabled": true,
                  "key": "cursor",
                  "value": "abqdj6xe8puto1j83soz3bml"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"and\": [\n    [\n      \"between\",\n      \"rent\",\n      1000,\n      2000\n    ],\n    [\n      \"like\",\n      \"address\",\n      \"Crescent\"\n    ],\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"smoking\",\n          1\n        ],\n        [\n          \"eq\",\n          \"cats\",\n          1\n        ],\n        [\n          \"eq\",\n          \"dogs\",\n          1\n        ]\n      ]\n    ],\n    [\n      \"aroundLatLng\",\n      50.9573828,\n      -114.084153,\n      1000\n    ]\n  ],\n  \"fields\": [\n    \"listingId\",\n    \"propertyId\",\n    \"rent\",\n    \"immediate\",\n    \"imageId\",\n    \"smoking\",\n    \"cats\",\n    \"dogs\"\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "039bb71d-a831-4d6a-abb9-60c2b44ae273",
              "name": "Responds with an array of property unit objects. If no filters are used, all property units are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
              "originalRequest": {
                "url": {
                  "path": [
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"between\",\n      \"rent\",\n      1000,\n      2000\n    ],\n    [\n      \"like\",\n      \"address\",\n      \"Crescent\"\n    ],\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"smoking\",\n          1\n        ],\n        [\n          \"eq\",\n          \"cats\",\n          1\n        ],\n        [\n          \"eq\",\n          \"dogs\",\n          1\n        ]\n      ]\n    ],\n    [\n      \"aroundLatLng\",\n      50.9573828,\n      -114.084153,\n      1000\n    ]\n  ],\n  \"fields\": [\n    \"listingId\",\n    \"propertyId\",\n    \"rent\",\n    \"immediate\",\n    \"imageId\",\n    \"smoking\",\n    \"cats\",\n    \"dogs\"\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"anim aliqua velit sit\",\n      \"propertyId\": \"pari\",\n      \"rent\": 6361466.295899555,\n      \"immediate\": 74868469.37535375,\n      \"availableDate\": \"minim deserunt exercitation ad reprehenderit\",\n      \"shortterm\": 35285798.30097672,\n      \"longterm\": -26318051.02688846,\n      \"furnished\": 2814581.1346354783,\n      \"heat\": 90148321.17841789,\n      \"water\": -34644713.07498611,\n      \"electricity\": 71585886.10217679,\n      \"internet\": 11444734.564914867,\n      \"television\": -84693413.57159203,\n      \"bedroom\": \"do tempor adipis\",\n      \"bathroom\": \"cillum mollit velit magna dolore\",\n      \"listingId\": -87511211.20545653,\n      \"address\": \"reprehenderit com\",\n      \"community\": \"ut sint laborum commodo mollit\",\n      \"type\": \"esse n\",\n      \"smoking\": 25394480.82333204,\n      \"cats\": -99087123.76578772,\n      \"dogs\": -76990469.26296318,\n      \"parking\": \"fugiat est\",\n      \"feature\": \"amet\",\n      \"imageId\": \"ut amet aliquip occaecat Excepteur\",\n      \"latitude\": \"Lorem\",\n      \"longitude\": \"laboris tempor\"\n    },\n    {\n      \"id\": \"sint esse nulla\",\n      \"propertyId\": \"in officia\",\n      \"rent\": -86901854.29391013,\n      \"immediate\": -38154468.00153248,\n      \"availableDate\": \"Ut ex aliquip\",\n      \"shortterm\": -98217538.84580956,\n      \"longterm\": 52048314.85812327,\n      \"furnished\": -4157356.677581787,\n      \"heat\": 64138104.55228934,\n      \"water\": -77377679.05646273,\n      \"electricity\": -79364399.7797834,\n      \"internet\": 74616574.82660332,\n      \"television\": -41453471.183852166,\n      \"bedroom\": \"aliquip labore\",\n      \"bathroom\": \"minim dolore\",\n      \"listingId\": 49028209.71521029,\n      \"address\": \"ut est\",\n      \"community\": \"consectetur dolor\",\n      \"type\": \"do\",\n      \"smoking\": 83538796.8327336,\n      \"cats\": -40370189.15985393,\n      \"dogs\": -24315038.1065778,\n      \"parking\": \"in adipisicing ut\",\n      \"feature\": \"ipsum Excepteur pariatur\",\n      \"imageId\": \"dolo\",\n      \"latitude\": \"officia aute veniam sunt\",\n      \"longitude\": \"ad \"\n    }\n  ]\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "cca3ec16-54bf-47ae-9065-468e78d96332",
              "name": "Responds with a bad request error object",
              "originalRequest": {
                "url": {
                  "path": [
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"between\",\n      \"rent\",\n      1000,\n      2000\n    ],\n    [\n      \"like\",\n      \"address\",\n      \"Crescent\"\n    ],\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"smoking\",\n          1\n        ],\n        [\n          \"eq\",\n          \"cats\",\n          1\n        ],\n        [\n          \"eq\",\n          \"dogs\",\n          1\n        ]\n      ]\n    ],\n    [\n      \"aroundLatLng\",\n      50.9573828,\n      -114.084153,\n      1000\n    ]\n  ],\n  \"fields\": [\n    \"listingId\",\n    \"propertyId\",\n    \"rent\",\n    \"immediate\",\n    \"imageId\",\n    \"smoking\",\n    \"cats\",\n    \"dogs\"\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2dae3647-0607-4b0a-ac52-7e323fb4a01f",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/search - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/search - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/search - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"propertyId\":{\"type\":\"string\"},\"rent\":{\"type\":\"number\"},\"immediate\":{\"type\":\"number\"},\"availableDate\":{\"type\":\"string\"},\"shortterm\":{\"type\":\"number\"},\"longterm\":{\"type\":\"number\"},\"furnished\":{\"type\":\"number\"},\"heat\":{\"type\":\"number\"},\"water\":{\"type\":\"number\"},\"electricity\":{\"type\":\"number\"},\"internet\":{\"type\":\"number\"},\"television\":{\"type\":\"number\"},\"bedroom\":{\"type\":\"string\"},\"bathroom\":{\"type\":\"string\"},\"listingId\":{\"type\":\"number\"},\"address\":{\"type\":\"string\"},\"community\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"},\"smoking\":{\"type\":\"number\"},\"cats\":{\"type\":\"number\"},\"dogs\":{\"type\":\"number\"},\"parking\":{\"type\":\"string\"},\"feature\":{\"type\":\"string\"},\"imageId\":{\"type\":\"string\"},\"latitude\":{\"type\":\"string\"},\"longitude\":{\"type\":\"string\"}},\"required\":[\"id\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/search - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "2d026866-7e26-4664-90cb-4f89cd26e150",
      "name": "bathroom",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "4418e15e-79b6-48ca-a0a4-8e648f1a91bb",
          "name": "/bathroom/list",
          "request": {
            "name": "/bathroom/list",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "bathroom",
                "list"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "limit",
                  "value": "10"
                },
                {
                  "disabled": true,
                  "key": "orderBy",
                  "value": "name-asc"
                },
                {
                  "disabled": true,
                  "key": "cursor",
                  "value": "abqdj6xe8puto1j83soz3bml"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "18e359a0-f45c-412f-86e7-a4c44dafec8e",
              "name": "Responds with an array of bathroom objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
              "originalRequest": {
                "url": {
                  "path": [
                    "bathroom",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "name-asc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"fugiat voluptate exer\",\n      \"name\": \"enim non sunt\",\n      \"order\": 72605381.4225435,\n      \"createdAt\": \"do tempor ut\",\n      \"updatedAt\": \"quis sint exercitation proident\"\n    },\n    {\n      \"id\": \"minim eu tempor mollit est\",\n      \"name\": \"labore nostrud ipsum\",\n      \"order\": 70491024.52151135,\n      \"createdAt\": \"irure commodo Excepteur dolore\",\n      \"updatedAt\": \"ea ad tempor exercitation\"\n    }\n  ]\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "24a3357d-7f82-4967-93a7-36946d4dfa65",
              "name": "Responds with a bad request error object",
              "originalRequest": {
                "url": {
                  "path": [
                    "bathroom",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "name-asc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6e7c7ca6-7865-461d-b0eb-5147f246d7ff",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/bathroom/list - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/bathroom/list - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/bathroom/list - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"order\":{\"type\":\"number\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"order\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/bathroom/list - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "b0bcf63b-e533-4f64-94a8-c7c88069107f",
          "name": "/bathroom/create",
          "request": {
            "name": "/bathroom/create",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "bathroom",
                "create"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "49cd23d9-c98b-40bd-a7a9-92577462d2f9",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "bathroom",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"quis \"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "6f047498-ab05-41a9-9626-d1490f895c3e",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "bathroom",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a5cf5eb4-2e70-46cf-9710-21a633e2e897",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/bathroom/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/bathroom/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/bathroom/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/bathroom/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "ff44726d-2d1f-45c3-808d-865b116f1b98",
          "name": "/bathroom/update/:id",
          "request": {
            "name": "/bathroom/update/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "bathroom",
                "update",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "qae4cp7xnotk3wh26dkpp7y7",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"order\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "360f79ee-930b-4a7d-b760-848622a1e891",
              "name": "Responds with the id of the updated bathroom.",
              "originalRequest": {
                "url": {
                  "path": [
                    "bathroom",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "qae4cp7xnotk3wh26dkpp7y7",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"quis \"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "b5722717-5700-4f2b-a62a-70458780b606",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "bathroom",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "qae4cp7xnotk3wh26dkpp7y7",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fee3eae7-1022-4b94-be53-62bef32bf766",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[PUT]::/bathroom/update/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[PUT]::/bathroom/update/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[PUT]::/bathroom/update/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[PUT]::/bathroom/update/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "4a9e29db-86f7-40d0-911e-bcd9ccaae2e0",
          "name": "/bathroom/delete/:id",
          "request": {
            "name": "/bathroom/delete/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "bathroom",
                "delete",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "qae4cp7xnotk3wh26dkpp7y7",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "7bce8579-1485-45ae-8dc3-5de54b868243",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "bathroom",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "qae4cp7xnotk3wh26dkpp7y7",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "a78c9581-4bf3-432c-97e6-bd87255555f7",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "bathroom",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "qae4cp7xnotk3wh26dkpp7y7",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "351935e2-0ef3-463e-b3b0-ed9f9c6e9948",
              "name": "Responds with a conflict error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "bathroom",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "qae4cp7xnotk3wh26dkpp7y7",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ca29dec4-d2c3-4925-bf79-309e755a8502",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[DELETE]::/bathroom/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[DELETE]::/bathroom/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[DELETE]::/bathroom/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/bathroom/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "69d65d6e-ab51-4afd-bd68-b20888d4bea3",
      "name": "bedroom",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "ca83a7ab-9ce7-43c5-b157-678b6e8b5d19",
          "name": "/bedroom/list",
          "request": {
            "name": "/bedroom/list",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "bedroom",
                "list"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "limit",
                  "value": "10"
                },
                {
                  "disabled": true,
                  "key": "orderBy",
                  "value": "name-asc"
                },
                {
                  "disabled": true,
                  "key": "cursor",
                  "value": "abqdj6xe8puto1j83soz3bml"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "9b9b2f20-4a32-4ab3-9784-73ea337794ca",
              "name": "Responds with an array of bedroom objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
              "originalRequest": {
                "url": {
                  "path": [
                    "bedroom",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "name-asc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"fugiat voluptate exer\",\n      \"name\": \"enim non sunt\",\n      \"order\": 72605381.4225435,\n      \"createdAt\": \"do tempor ut\",\n      \"updatedAt\": \"quis sint exercitation proident\"\n    },\n    {\n      \"id\": \"minim eu tempor mollit est\",\n      \"name\": \"labore nostrud ipsum\",\n      \"order\": 70491024.52151135,\n      \"createdAt\": \"irure commodo Excepteur dolore\",\n      \"updatedAt\": \"ea ad tempor exercitation\"\n    }\n  ]\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "917daf20-677d-4d4c-94b8-37a8e600637e",
              "name": "Responds with a bad request error object",
              "originalRequest": {
                "url": {
                  "path": [
                    "bedroom",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "name-asc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f3c220a9-4f5b-48d6-9dfe-8d107c0456da",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/bedroom/list - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/bedroom/list - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/bedroom/list - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"order\":{\"type\":\"number\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"order\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/bedroom/list - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "8f988d49-a667-46e5-a0f1-626f445e89e7",
          "name": "/bedroom/create",
          "request": {
            "name": "/bedroom/create",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "bedroom",
                "create"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "8c507ea6-ce11-4553-ab3a-bb986e7a79ff",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "bedroom",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"quis \"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "989dee17-0e67-44ad-bc5f-720f98f83436",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "bedroom",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d3f1abba-a02b-4e7a-a795-1e5de51b2435",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/bedroom/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/bedroom/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/bedroom/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/bedroom/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "33650df2-a6c9-480c-854f-3ed0b3421c43",
          "name": "/bedroom/update/:id",
          "request": {
            "name": "/bedroom/update/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "bedroom",
                "update",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "zjggk1ve17r7jmpq8dtmbjyw",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"order\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "70c404ec-becf-479e-a0d6-b75e7dba9ea9",
              "name": "Responds with the id of the updated bedroom.",
              "originalRequest": {
                "url": {
                  "path": [
                    "bedroom",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "zjggk1ve17r7jmpq8dtmbjyw",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"quis \"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "62fcc4c1-52fd-44ed-90d6-56e6557fa8bd",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "bedroom",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "zjggk1ve17r7jmpq8dtmbjyw",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b41c2e34-da73-4f29-831c-abc40f54a3d6",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[PUT]::/bedroom/update/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[PUT]::/bedroom/update/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[PUT]::/bedroom/update/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[PUT]::/bedroom/update/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "84c03921-633a-424b-9040-63f2ef573143",
          "name": "/bedroom/delete/:id",
          "request": {
            "name": "/bedroom/delete/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "bedroom",
                "delete",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "zjggk1ve17r7jmpq8dtmbjyw",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "b4572afa-61cb-4e8e-9f28-9d7d0008e0eb",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "bedroom",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "zjggk1ve17r7jmpq8dtmbjyw",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "775003ca-13aa-4937-880e-4da7cc12ba81",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "bedroom",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "zjggk1ve17r7jmpq8dtmbjyw",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "495dc3ac-3035-4f02-9aa5-6fe95ebee81a",
              "name": "Responds with a conflict error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "bedroom",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "zjggk1ve17r7jmpq8dtmbjyw",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e33eabb1-362b-4a91-8601-3efe2221b6fc",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[DELETE]::/bedroom/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[DELETE]::/bedroom/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[DELETE]::/bedroom/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/bedroom/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "645041c1-feef-46dd-a294-f5ffdbef229d",
      "name": "buildingFeature",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "40b3639d-5041-4694-9ef3-dace44b6eda8",
          "name": "/building-feature/list",
          "request": {
            "name": "/building-feature/list",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "building-feature",
                "list"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "limit",
                  "value": "10"
                },
                {
                  "disabled": true,
                  "key": "orderBy",
                  "value": "name-asc"
                },
                {
                  "disabled": true,
                  "key": "cursor",
                  "value": "abqdj6xe8puto1j83soz3bml"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "737a968c-7073-4cec-ac56-1421e5f717e0",
              "name": "Responds with an array of buildingFeature objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
              "originalRequest": {
                "url": {
                  "path": [
                    "building-feature",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "name-asc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"fugiat voluptate exer\",\n      \"name\": \"enim non sunt\",\n      \"order\": 72605381.4225435,\n      \"createdAt\": \"do tempor ut\",\n      \"updatedAt\": \"quis sint exercitation proident\"\n    },\n    {\n      \"id\": \"minim eu tempor mollit est\",\n      \"name\": \"labore nostrud ipsum\",\n      \"order\": 70491024.52151135,\n      \"createdAt\": \"irure commodo Excepteur dolore\",\n      \"updatedAt\": \"ea ad tempor exercitation\"\n    }\n  ]\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "133d4ebe-18a1-4bff-994a-408bdafff840",
              "name": "Responds with a bad request error object",
              "originalRequest": {
                "url": {
                  "path": [
                    "building-feature",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "name-asc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "becbae7d-494a-4dbf-b595-3237660854d2",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/building-feature/list - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/building-feature/list - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/building-feature/list - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"order\":{\"type\":\"number\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"order\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/building-feature/list - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "2c3214d8-1d51-4938-8a75-1a1bdfc3467f",
          "name": "/building-feature/create",
          "request": {
            "name": "/building-feature/create",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "building-feature",
                "create"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "18b2800a-afe4-45a4-925d-5d17be85bc4f",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "building-feature",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"quis \"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "cdacd60c-0934-413e-b116-f5be2cb7e086",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "building-feature",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3b45f22a-a69a-4d0e-a6f8-77d08b06496b",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/building-feature/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/building-feature/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/building-feature/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/building-feature/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "ac67e285-f82d-4f13-9e7f-f3ccf7ef3272",
          "name": "/building-feature/update/:id",
          "request": {
            "name": "/building-feature/update/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "building-feature",
                "update",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "zsm6fam0k05blkaeoit8x09a",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"order\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "7910cd5e-4780-4f73-bdb8-b4d3f2eb7fcb",
              "name": "Responds with the id of the updated buildingFeature.",
              "originalRequest": {
                "url": {
                  "path": [
                    "building-feature",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "zsm6fam0k05blkaeoit8x09a",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"quis \"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "8975985d-fe76-427f-bb67-241cec5028fd",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "building-feature",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "zsm6fam0k05blkaeoit8x09a",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4640b989-d4f8-426c-a25a-de15b3f90401",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[PUT]::/building-feature/update/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[PUT]::/building-feature/update/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[PUT]::/building-feature/update/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[PUT]::/building-feature/update/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "240e74e5-d4d8-4e40-9800-e83dfb31a0bd",
          "name": "/building-feature/delete/:id",
          "request": {
            "name": "/building-feature/delete/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "building-feature",
                "delete",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "zsm6fam0k05blkaeoit8x09a",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "2d19834c-ad97-4622-83d4-4d5a4d44013a",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "building-feature",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "zsm6fam0k05blkaeoit8x09a",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "2af8e042-32d8-4460-901e-7efc1607f149",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "building-feature",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "zsm6fam0k05blkaeoit8x09a",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "9711bb95-33e2-4ef9-873e-86f536813966",
              "name": "Responds with a conflict error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "building-feature",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "zsm6fam0k05blkaeoit8x09a",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "54dbcfae-b5f8-47c5-ab7d-2967b6f1cff1",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[DELETE]::/building-feature/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[DELETE]::/building-feature/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[DELETE]::/building-feature/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/building-feature/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "16d3e86e-3100-4d00-b7e0-bf26ed707598",
      "name": "buildingFeatureToProperty",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "cf7d677a-a0e4-40ad-b82a-7354cc183016",
          "name": "/building-feature-to-property/features-by-item/:itemId",
          "request": {
            "name": "/building-feature-to-property/features-by-item/:itemId",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "building-feature-to-property",
                "features-by-item",
                ":itemId"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "hdsyi7gw3n77jrngcck1x33y",
                  "key": "itemId"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "b6b4f046-fd3c-4c5c-b526-ebf43790f80c",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "building-feature-to-property",
                    "features-by-item",
                    ":itemId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "hdsyi7gw3n77jrngcck1x33y",
                      "key": "itemId"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"buildingFeatureId\": \"deserunt id esse\",\n      \"buildingFeature\": {\n        \"name\": \"ut ex culpa\"\n      }\n    },\n    {\n      \"buildingFeatureId\": \"ut cupidatat deserunt laborum\",\n      \"buildingFeature\": {\n        \"name\": \"pariatur nulla sunt magna\"\n      }\n    }\n  ]\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "3b521d53-b32e-462d-a62f-7d9888eb39f0",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "building-feature-to-property",
                    "features-by-item",
                    ":itemId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "hdsyi7gw3n77jrngcck1x33y",
                      "key": "itemId"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f3ced3df-275f-438e-9489-6b21d0bac133",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/building-feature-to-property/features-by-item/:itemId - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/building-feature-to-property/features-by-item/:itemId - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/building-feature-to-property/features-by-item/:itemId - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"buildingFeatureId\":{\"type\":\"string\"},\"buildingFeature\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]}},\"required\":[\"buildingFeatureId\",\"buildingFeature\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/building-feature-to-property/features-by-item/:itemId - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "06e04543-7919-4ea2-b4cd-162a8ddc364b",
          "name": "/building-feature-to-property/create",
          "request": {
            "name": "/building-feature-to-property/create",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "building-feature-to-property",
                "create"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"featureId\": \"zsm6fam0k05blkaeoit8x09a\",\n  \"itemId\": \"hdsyi7gw3n77jrngcck1x33y\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "9329a734-c9e5-4861-a3ff-d541d2661b8f",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "building-feature-to-property",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"featureId\": \"zsm6fam0k05blkaeoit8x09a\",\n  \"itemId\": \"hdsyi7gw3n77jrngcck1x33y\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "3308ad9f-1695-402e-9007-ecdebda06f2d",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "building-feature-to-property",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"featureId\": \"zsm6fam0k05blkaeoit8x09a\",\n  \"itemId\": \"hdsyi7gw3n77jrngcck1x33y\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "54fbc71f-ea87-4e33-a678-21d58e0d7636",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/building-feature-to-property/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/building-feature-to-property/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/building-feature-to-property/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/building-feature-to-property/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "dc58c636-49af-4c3c-87c6-3e4178be4c8a",
          "name": "/building-feature-to-property/delete/:featureId/:itemId",
          "request": {
            "name": "/building-feature-to-property/delete/:featureId/:itemId",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "building-feature-to-property",
                "delete",
                ":featureId",
                ":itemId"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "zsm6fam0k05blkaeoit8x09a",
                  "key": "featureId"
                },
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "hdsyi7gw3n77jrngcck1x33y",
                  "key": "itemId"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "41c7c25b-5323-4392-b94e-367bfd2af52a",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "building-feature-to-property",
                    "delete",
                    ":featureId",
                    ":itemId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "zsm6fam0k05blkaeoit8x09a",
                      "key": "featureId"
                    },
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "hdsyi7gw3n77jrngcck1x33y",
                      "key": "itemId"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "fef52db1-5bad-4799-a5cb-bc73a1135325",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "building-feature-to-property",
                    "delete",
                    ":featureId",
                    ":itemId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "zsm6fam0k05blkaeoit8x09a",
                      "key": "featureId"
                    },
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "hdsyi7gw3n77jrngcck1x33y",
                      "key": "itemId"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1d9abe71-465c-41f8-a074-02d6781689a0",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[DELETE]::/building-feature-to-property/delete/:featureId/:itemId - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[DELETE]::/building-feature-to-property/delete/:featureId/:itemId - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[DELETE]::/building-feature-to-property/delete/:featureId/:itemId - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/building-feature-to-property/delete/:featureId/:itemId - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "12daade9-7551-492b-9703-d3c46400005f",
      "name": "city",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "f1c36814-f753-479e-a034-9a1e981209b8",
          "name": "/city/list",
          "request": {
            "name": "/city/list",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "city",
                "list"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "limit",
                  "value": "10"
                },
                {
                  "disabled": true,
                  "key": "orderBy",
                  "value": "updatedAt-desc"
                },
                {
                  "disabled": true,
                  "key": "cursor",
                  "value": "abqdj6xe8puto1j83soz3bml"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Toronto\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Ottawa\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Mississauga\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"regionId\",\n      \"kj3nrb5rv094v8ns5ptz1jhc\"\n    ]\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "b56b5627-8f96-4d00-b2fe-fdd4d6b75874",
              "name": "Responds with an array of city objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
              "originalRequest": {
                "url": {
                  "path": [
                    "city",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "updatedAt-desc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Toronto\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Ottawa\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Mississauga\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"regionId\",\n      \"kj3nrb5rv094v8ns5ptz1jhc\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"Ut est ea laborum\",\n      \"name\": \"anim\",\n      \"latitude\": \"amet in\",\n      \"longitude\": \"cupidatat amet\",\n      \"regionId\": \"magna amet Excepteur sunt\",\n      \"createdAt\": \"minim exercitation\",\n      \"updatedAt\": \"ut do consectetur\"\n    },\n    {\n      \"id\": \"Duis eiusmod pariatur id\",\n      \"name\": \"reprehenderit esse\",\n      \"latitude\": \"enim adipisicing\",\n      \"longitude\": \"dolore dolore laboris dolor\",\n      \"regionId\": \"in laboris ad cillum\",\n      \"createdAt\": \"sunt do et\",\n      \"updatedAt\": \"officia nostrud labore\"\n    }\n  ]\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "60d62cd9-ab28-43d6-a114-58558b230b30",
              "name": "Responds with a bad request error object",
              "originalRequest": {
                "url": {
                  "path": [
                    "city",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "updatedAt-desc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Toronto\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Ottawa\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Mississauga\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"regionId\",\n      \"kj3nrb5rv094v8ns5ptz1jhc\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "92b93fd0-db97-4cb2-beed-ff1c4945abcc",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/city/list - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/city/list - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/city/list - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"latitude\":{\"type\":\"string\"},\"longitude\":{\"type\":\"string\"},\"regionId\":{\"type\":\"string\",\"maxLength\":128},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"latitude\",\"longitude\",\"regionId\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/city/list - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "aa8e1471-b678-4211-87a4-7eb8b36dca60",
          "name": "/city/create",
          "request": {
            "name": "/city/create",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "city",
                "create"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Toronto\",\n  \"regionId\": \"kj3nrb5rv094v8ns5ptz1jhc\",\n  \"latitude\": \"43.741667\",\n  \"longitude\": \"-79.373333\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "5731a8fd-7bed-42c7-af31-e8c0678e2352",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "city",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Toronto\",\n  \"regionId\": \"kj3nrb5rv094v8ns5ptz1jhc\",\n  \"latitude\": \"43.741667\",\n  \"longitude\": \"-79.373333\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"quis \"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "5feea0ae-afbe-4f4c-b36d-de6ce198cc18",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "city",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Toronto\",\n  \"regionId\": \"kj3nrb5rv094v8ns5ptz1jhc\",\n  \"latitude\": \"43.741667\",\n  \"longitude\": \"-79.373333\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "76dd8575-754a-4ff2-a62f-09305ccabd22",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/city/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/city/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/city/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/city/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "b43233d7-27c4-4cdb-aeef-5a6fbe4d2c0e",
          "name": "/city/update/:id",
          "request": {
            "name": "/city/update/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "city",
                "update",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "dl7r7ezrt909p6bmct6avl9l",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"latitude\": \"49.2827\",\n  \"longitude\": \"-123.1207\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "92235301-5f8c-4761-8f75-b0e3797cc31f",
              "name": "Responds with the id of the updated city.",
              "originalRequest": {
                "url": {
                  "path": [
                    "city",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "dl7r7ezrt909p6bmct6avl9l",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"latitude\": \"49.2827\",\n  \"longitude\": \"-123.1207\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"quis \"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "e64dded2-6995-4a50-b524-fd7ee272b0fb",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "city",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "dl7r7ezrt909p6bmct6avl9l",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"latitude\": \"49.2827\",\n  \"longitude\": \"-123.1207\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "318a4781-8baa-4141-bf69-904949086731",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[PUT]::/city/update/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[PUT]::/city/update/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[PUT]::/city/update/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[PUT]::/city/update/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "d023a9eb-59d6-424d-ad35-e01283a2fda5",
          "name": "/city/delete/:id",
          "request": {
            "name": "/city/delete/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "city",
                "delete",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "dl7r7ezrt909p6bmct6avl9l",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "934408db-d57e-4946-9151-2cc222c4f240",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "city",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "dl7r7ezrt909p6bmct6avl9l",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "479f8dd1-d51b-4262-bfdf-d03dff7a6e22",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "city",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "dl7r7ezrt909p6bmct6avl9l",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "a33859af-0eec-4bd8-b371-8db8c382dfec",
              "name": "Responds with a conflict error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "city",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "dl7r7ezrt909p6bmct6avl9l",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6155b240-b2a7-4229-b501-86c7e6f2cffe",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[DELETE]::/city/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[DELETE]::/city/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[DELETE]::/city/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/city/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "5320a064-e25f-4a5f-9949-d220ca3f8ae7",
      "name": "community",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "03d9e016-62f1-4d71-8f51-ce5041a20195",
          "name": "/community/:id",
          "request": {
            "name": "/community/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "community",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "icj3bimn4dg5v1yeu7i2frzq",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "f9f80138-0630-4295-9ace-09c0f9acba5b",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "icj3bimn4dg5v1yeu7i2frzq",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"of\",\n    \"name\": \"dolor voluptate incididunt\",\n    \"score\": -87395455,\n    \"imageUrl\": \"laborum in eiusmod occaecat\",\n    \"quadrant\": \"elit adipisicing nostrud\",\n    \"sector\": \"sit elit\",\n    \"ward\": \"qui dolore Lorem anim\",\n    \"population\": 59880686,\n    \"dwellings\": -40366317,\n    \"usedForRenting\": \"dolore consectetur\",\n    \"area\": \"dolore sint minim\",\n    \"density\": \"anim d\",\n    \"averageIncome\": -8172505,\n    \"lowIncome\": \"sit in ea\",\n    \"immigrants\": \"ex commodo culpa\",\n    \"elevation\": -59016186,\n    \"established\": -23293133,\n    \"description\": \"ex quis reprehenderit\",\n    \"latitude\": \"dolor in\",\n    \"longitude\": \"in commodo consequat\",\n    \"city\": {\n      \"name\": \"reprehenderit ve\"\n    },\n    \"communityFeatureToCommunity\": [\n      {\n        \"communityFeature\": {\n          \"name\": \"exercitation consectetur ut\"\n        }\n      },\n      {\n        \"communityFeature\": {\n          \"name\": \"fugiat laboris ad\"\n        }\n      }\n    ]\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "26f13cb3-8a99-42f9-bbe8-90f3393b53e0",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "icj3bimn4dg5v1yeu7i2frzq",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a6336f97-bbf5-4220-8fb0-ceea53931c18",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/community/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/community/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/community/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"score\":{\"type\":[\"integer\",\"null\"]},\"imageUrl\":{\"type\":[\"string\",\"null\"]},\"quadrant\":{\"type\":[\"string\",\"null\"]},\"sector\":{\"type\":[\"string\",\"null\"]},\"ward\":{\"type\":[\"string\",\"null\"]},\"population\":{\"type\":[\"integer\",\"null\"]},\"dwellings\":{\"type\":[\"integer\",\"null\"]},\"usedForRenting\":{\"type\":[\"string\",\"null\"]},\"area\":{\"type\":[\"string\",\"null\"]},\"density\":{\"type\":[\"string\",\"null\"]},\"averageIncome\":{\"type\":[\"integer\",\"null\"]},\"lowIncome\":{\"type\":[\"string\",\"null\"]},\"immigrants\":{\"type\":[\"string\",\"null\"]},\"elevation\":{\"type\":[\"integer\",\"null\"]},\"established\":{\"type\":[\"integer\",\"null\"]},\"description\":{\"type\":[\"string\",\"null\"]},\"latitude\":{\"type\":\"string\"},\"longitude\":{\"type\":\"string\"},\"city\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]},\"communityFeatureToCommunity\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"communityFeature\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]}},\"required\":[\"communityFeature\"]}}},\"required\":[\"id\",\"name\",\"score\",\"imageUrl\",\"quadrant\",\"sector\",\"ward\",\"population\",\"dwellings\",\"usedForRenting\",\"area\",\"density\",\"averageIncome\",\"lowIncome\",\"immigrants\",\"elevation\",\"established\",\"description\",\"latitude\",\"longitude\",\"city\",\"communityFeatureToCommunity\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/community/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "f5da9697-0126-4aef-88a5-9bacfc38d94d",
          "name": "/community/list",
          "request": {
            "name": "/community/list",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "community",
                "list"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "limit",
                  "value": "10"
                },
                {
                  "disabled": true,
                  "key": "orderBy",
                  "value": "cityId-desc"
                },
                {
                  "disabled": true,
                  "key": "cursor",
                  "value": "abqdj6xe8puto1j83soz3bml"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Community name 1\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Community name 1\"\n        ]\n      ]\n    ],\n    [\n      \"gt\",\n      \"area\",\n      3\n    ],\n    [\n      \"lt\",\n      \"population\",\n      2000\n    ],\n    [\n      \"eq\",\n      \"quadrant\",\n      \"NW\"\n    ]\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "930f30c0-69c5-41a9-bd97-0886cb265894",
              "name": "Responds with an array of community objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
              "originalRequest": {
                "url": {
                  "path": [
                    "community",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "cityId-desc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Community name 1\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Community name 1\"\n        ]\n      ]\n    ],\n    [\n      \"gt\",\n      \"area\",\n      3\n    ],\n    [\n      \"lt\",\n      \"population\",\n      2000\n    ],\n    [\n      \"eq\",\n      \"quadrant\",\n      \"NW\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"deserunt mollit voluptate ut cupidatat\",\n      \"name\": \"et magna\",\n      \"score\": 96869320.5665195,\n      \"imageUrl\": \"ut\",\n      \"quadrant\": \"velit\",\n      \"sector\": \"ut dolore aute\",\n      \"ward\": \"minim sit\",\n      \"population\": 34668441.28353217,\n      \"dwellings\": -58032017.929756165,\n      \"usedForRenting\": \"deserunt occaecat\",\n      \"area\": \"in est consectetur incididunt nisi\",\n      \"density\": \"deserunt esse aliqua mollit\",\n      \"averageIncome\": -90154260.50791185,\n      \"lowIncome\": \"eiusmod irure ut\",\n      \"immigrants\": \"i\",\n      \"elevation\": 13364069.30764617,\n      \"established\": 7742406.659931108,\n      \"description\": \"sint voluptate fugiat\",\n      \"latitude\": \"labore officia nisi Ut ex\",\n      \"longitude\": \"sit \",\n      \"cityId\": \"ad\",\n      \"createdAt\": \"n\",\n      \"updatedAt\": \"in\"\n    },\n    {\n      \"id\": \"fugiat enim in in\",\n      \"name\": \"dolor\",\n      \"score\": 38847560.239883125,\n      \"imageUrl\": \"amet ullamco fugiat\",\n      \"quadrant\": \"amet deserunt\",\n      \"sector\": \"nulla id ut aliqua Ut\",\n      \"ward\": \"quis pariatur\",\n      \"population\": -33421064.23163624,\n      \"dwellings\": 51287331.130336344,\n      \"usedForRenting\": \"do\",\n      \"area\": \"enim amet\",\n      \"density\": \"sunt\",\n      \"averageIncome\": -24269848.778046787,\n      \"lowIncome\": \"Excepteur aute Lorem cupidatat enim\",\n      \"immigrants\": \"ip\",\n      \"elevation\": -25842840.849233806,\n      \"established\": 24579786.605515122,\n      \"description\": \"deserunt est dolor voluptate\",\n      \"latitude\": \"sint aute\",\n      \"longitude\": \"Lorem sint\",\n      \"cityId\": \"nulla in Lorem\",\n      \"createdAt\": \"voluptate\",\n      \"updatedAt\": \"eu aliquip\"\n    }\n  ]\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "eeffe2a2-cac7-4df1-86c6-38ef37d7a375",
              "name": "Responds with a bad request error object",
              "originalRequest": {
                "url": {
                  "path": [
                    "community",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "cityId-desc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Community name 1\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Community name 1\"\n        ]\n      ]\n    ],\n    [\n      \"gt\",\n      \"area\",\n      3\n    ],\n    [\n      \"lt\",\n      \"population\",\n      2000\n    ],\n    [\n      \"eq\",\n      \"quadrant\",\n      \"NW\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9167bcfd-f4a6-4fbc-815a-c1428ca1496e",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/community/list - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/community/list - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/community/list - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"score\":{\"type\":[\"number\",\"null\"]},\"imageUrl\":{\"type\":[\"string\",\"null\"],\"maxLength\":256},\"quadrant\":{\"type\":[\"string\",\"null\"],\"maxLength\":32},\"sector\":{\"type\":[\"string\",\"null\"],\"maxLength\":128},\"ward\":{\"type\":[\"string\",\"null\"],\"maxLength\":64},\"population\":{\"type\":[\"number\",\"null\"]},\"dwellings\":{\"type\":[\"number\",\"null\"]},\"usedForRenting\":{\"type\":[\"string\",\"null\"]},\"area\":{\"type\":[\"string\",\"null\"]},\"density\":{\"type\":[\"string\",\"null\"]},\"averageIncome\":{\"type\":[\"number\",\"null\"]},\"lowIncome\":{\"type\":[\"string\",\"null\"]},\"immigrants\":{\"type\":[\"string\",\"null\"]},\"elevation\":{\"type\":[\"number\",\"null\"]},\"established\":{\"type\":[\"number\",\"null\"]},\"description\":{\"type\":[\"string\",\"null\"]},\"latitude\":{\"type\":\"string\"},\"longitude\":{\"type\":\"string\"},\"cityId\":{\"type\":\"string\",\"maxLength\":128},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"score\",\"imageUrl\",\"quadrant\",\"sector\",\"ward\",\"population\",\"dwellings\",\"usedForRenting\",\"area\",\"density\",\"averageIncome\",\"lowIncome\",\"immigrants\",\"elevation\",\"established\",\"description\",\"latitude\",\"longitude\",\"cityId\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/community/list - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "8e8b5cf5-aa25-49b0-bcdc-5525fe9feaf2",
          "name": "/community/create",
          "request": {
            "name": "/community/create",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "community",
                "create"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Community name\",\n  \"cityId\": \"dl7r7ezrt909p6bmct6avl9l\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "9cf8092d-bc94-4e2f-ba07-ed1d0f7912f6",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Community name\",\n  \"cityId\": \"dl7r7ezrt909p6bmct6avl9l\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"quis \"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "021ca864-0ff8-4ee7-a495-1e24a936ea6a",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Community name\",\n  \"cityId\": \"dl7r7ezrt909p6bmct6avl9l\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "db4a8569-f4cf-4849-b4e7-f062a8cc31b5",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/community/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/community/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/community/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/community/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "5494d375-2c3e-452d-b14c-27409e4cd342",
          "name": "/community/update/:id",
          "request": {
            "name": "/community/update/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "community",
                "update",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "icj3bimn4dg5v1yeu7i2frzq",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\",\n  \"imageUrl\": \"https://example.com/image.jpg\",\n  \"quadrant\": \"NW\",\n  \"sector\": \"SE\",\n  \"ward\": \"Ward 1\",\n  \"population\": 1000,\n  \"dwellings\": 500,\n  \"usedForRenting\": 30.45,\n  \"area\": 3.2,\n  \"density\": 10.5,\n  \"averageIncome\": 50000\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "8902ef52-10e0-4c47-9674-ad41c6916772",
              "name": "Responds with the id of the updated community.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "icj3bimn4dg5v1yeu7i2frzq",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\",\n  \"imageUrl\": \"https://example.com/image.jpg\",\n  \"quadrant\": \"NW\",\n  \"sector\": \"SE\",\n  \"ward\": \"Ward 1\",\n  \"population\": 1000,\n  \"dwellings\": 500,\n  \"usedForRenting\": 30.45,\n  \"area\": 3.2,\n  \"density\": 10.5,\n  \"averageIncome\": 50000\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"quis \"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "4eb5d198-6024-43c9-a9bb-1a69bc1b0d55",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "icj3bimn4dg5v1yeu7i2frzq",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\",\n  \"imageUrl\": \"https://example.com/image.jpg\",\n  \"quadrant\": \"NW\",\n  \"sector\": \"SE\",\n  \"ward\": \"Ward 1\",\n  \"population\": 1000,\n  \"dwellings\": 500,\n  \"usedForRenting\": 30.45,\n  \"area\": 3.2,\n  \"density\": 10.5,\n  \"averageIncome\": 50000\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c2c09016-7edf-4de9-9d41-64fb13f41b81",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[PUT]::/community/update/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[PUT]::/community/update/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[PUT]::/community/update/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[PUT]::/community/update/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "3c929034-57ac-4810-b98d-49297b43d55c",
          "name": "/community/delete/:id",
          "request": {
            "name": "/community/delete/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "community",
                "delete",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "icj3bimn4dg5v1yeu7i2frzq",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "85057b8a-6675-4d1d-a869-a7ea8ac1d9db",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "icj3bimn4dg5v1yeu7i2frzq",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "8743dcd0-a4b1-4b92-9982-d2841536f7de",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "icj3bimn4dg5v1yeu7i2frzq",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "f0d9ba56-a9f6-4841-93d5-31e0c1680d4e",
              "name": "Responds with a conflict error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "icj3bimn4dg5v1yeu7i2frzq",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1607c166-b180-493e-9930-cc0832d5cbab",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[DELETE]::/community/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[DELETE]::/community/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[DELETE]::/community/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/community/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "ff82a517-3bd4-4577-aebc-0e61be3ca7bb",
      "name": "communityFeature",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "11ba74f2-a028-4abe-a016-84817cdd7c4c",
          "name": "/community-feature/list",
          "request": {
            "name": "/community-feature/list",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "community-feature",
                "list"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "limit",
                  "value": "10"
                },
                {
                  "disabled": true,
                  "key": "orderBy",
                  "value": "name-asc"
                },
                {
                  "disabled": true,
                  "key": "cursor",
                  "value": "abqdj6xe8puto1j83soz3bml"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "d90c2da5-4196-418d-ab01-676ca2f1d70e",
              "name": "Responds with an array of communityFeature objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
              "originalRequest": {
                "url": {
                  "path": [
                    "community-feature",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "name-asc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"fugiat voluptate exer\",\n      \"name\": \"enim non sunt\",\n      \"order\": 72605381.4225435,\n      \"createdAt\": \"do tempor ut\",\n      \"updatedAt\": \"quis sint exercitation proident\"\n    },\n    {\n      \"id\": \"minim eu tempor mollit est\",\n      \"name\": \"labore nostrud ipsum\",\n      \"order\": 70491024.52151135,\n      \"createdAt\": \"irure commodo Excepteur dolore\",\n      \"updatedAt\": \"ea ad tempor exercitation\"\n    }\n  ]\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "f1236a26-b911-4d12-bc7f-1ece17e83128",
              "name": "Responds with a bad request error object",
              "originalRequest": {
                "url": {
                  "path": [
                    "community-feature",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "name-asc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "05a4574e-e17e-4388-b4cf-5317541d49d6",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/community-feature/list - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/community-feature/list - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/community-feature/list - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"order\":{\"type\":\"number\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"order\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/community-feature/list - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "a744f92a-2fe2-4765-a0c7-97f853e1b166",
          "name": "/community-feature/create",
          "request": {
            "name": "/community-feature/create",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "community-feature",
                "create"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "7d93cce3-5e04-4ed1-ae07-167d27d97102",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community-feature",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"quis \"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "980e1548-ff04-4fed-a22b-1fe2a82519d3",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community-feature",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1b15f4d3-1367-4925-8a75-c5df1a21e8dc",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/community-feature/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/community-feature/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/community-feature/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/community-feature/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "946a7172-8ce0-4da7-a2cd-7dd8dd1e7d67",
          "name": "/community-feature/update/:id",
          "request": {
            "name": "/community-feature/update/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "community-feature",
                "update",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "cwswfax9454xpaxcym2la262",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"order\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "befb9e6b-30fb-4eab-8b70-717d9e6d7302",
              "name": "Responds with the id of the updated communityFeature.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community-feature",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "cwswfax9454xpaxcym2la262",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"quis \"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "a4caea56-c7cd-4270-87c7-95e917c3e144",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community-feature",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "cwswfax9454xpaxcym2la262",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dee19fb5-926e-45f6-a6d7-afe9544db0d5",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[PUT]::/community-feature/update/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[PUT]::/community-feature/update/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[PUT]::/community-feature/update/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[PUT]::/community-feature/update/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "fce5531d-2d99-4f85-9494-87e380185bec",
          "name": "/community-feature/delete/:id",
          "request": {
            "name": "/community-feature/delete/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "community-feature",
                "delete",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "cwswfax9454xpaxcym2la262",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "7af822b8-f824-475c-bba0-2ff347c8a54d",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community-feature",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "cwswfax9454xpaxcym2la262",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "a9e54845-1a1b-4029-9563-0f8dad21b181",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community-feature",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "cwswfax9454xpaxcym2la262",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "fcbdfd56-7f5d-4448-9d1b-184919ead773",
              "name": "Responds with a conflict error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community-feature",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "cwswfax9454xpaxcym2la262",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5c1b8360-3178-4f8b-b2ae-16055a915908",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[DELETE]::/community-feature/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[DELETE]::/community-feature/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[DELETE]::/community-feature/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/community-feature/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "0c5253a6-7c4b-44af-b0e7-c780197d5944",
      "name": "communityFeatureToCommunity",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "a48535f0-4deb-4a01-9e88-0588fd55beaf",
          "name": "/community-feature-to-community/features-by-item/:itemId",
          "request": {
            "name": "/community-feature-to-community/features-by-item/:itemId",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "community-feature-to-community",
                "features-by-item",
                ":itemId"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "icj3bimn4dg5v1yeu7i2frzq",
                  "key": "itemId"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "263c2e51-c30b-41a4-9541-2830ae74a17c",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community-feature-to-community",
                    "features-by-item",
                    ":itemId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "icj3bimn4dg5v1yeu7i2frzq",
                      "key": "itemId"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"communityFeatureId\": \"magna laborum\",\n      \"communityFeature\": {\n        \"name\": \"ullamco\"\n      }\n    },\n    {\n      \"communityFeatureId\": \"est dolore proident amet ut\",\n      \"communityFeature\": {\n        \"name\": \"ut deserunt\"\n      }\n    }\n  ]\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "d80a7868-b4d0-4bc7-89ed-1c54d3352ffa",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community-feature-to-community",
                    "features-by-item",
                    ":itemId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "icj3bimn4dg5v1yeu7i2frzq",
                      "key": "itemId"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "23159dfc-556b-4ae9-9c76-f24eb7674da8",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/community-feature-to-community/features-by-item/:itemId - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/community-feature-to-community/features-by-item/:itemId - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/community-feature-to-community/features-by-item/:itemId - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"communityFeatureId\":{\"type\":\"string\"},\"communityFeature\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]}},\"required\":[\"communityFeatureId\",\"communityFeature\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/community-feature-to-community/features-by-item/:itemId - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "ea7ef79a-2075-49af-ad6d-d304df824318",
          "name": "/community-feature-to-community/create",
          "request": {
            "name": "/community-feature-to-community/create",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "community-feature-to-community",
                "create"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"featureId\": \"cwswfax9454xpaxcym2la262\",\n  \"itemId\": \"icj3bimn4dg5v1yeu7i2frzq\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "fe923d2c-6937-4f48-8ced-733ec110c618",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community-feature-to-community",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"featureId\": \"cwswfax9454xpaxcym2la262\",\n  \"itemId\": \"icj3bimn4dg5v1yeu7i2frzq\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "6c6f7629-8d36-4643-991c-f2b3a88663c8",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community-feature-to-community",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"featureId\": \"cwswfax9454xpaxcym2la262\",\n  \"itemId\": \"icj3bimn4dg5v1yeu7i2frzq\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6a48cad0-abe8-4f86-8e15-4266c8cdecec",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/community-feature-to-community/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/community-feature-to-community/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/community-feature-to-community/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/community-feature-to-community/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "2f51480e-e056-4ddb-97bf-df99a66e653c",
          "name": "/community-feature-to-community/delete/:featureId/:itemId",
          "request": {
            "name": "/community-feature-to-community/delete/:featureId/:itemId",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "community-feature-to-community",
                "delete",
                ":featureId",
                ":itemId"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "cwswfax9454xpaxcym2la262",
                  "key": "featureId"
                },
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "icj3bimn4dg5v1yeu7i2frzq",
                  "key": "itemId"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "0ce6f52a-d66c-4ccf-8623-40f8de3b72a1",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community-feature-to-community",
                    "delete",
                    ":featureId",
                    ":itemId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "cwswfax9454xpaxcym2la262",
                      "key": "featureId"
                    },
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "icj3bimn4dg5v1yeu7i2frzq",
                      "key": "itemId"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "eb54e274-a390-4faf-a104-1f41b05aff6d",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "community-feature-to-community",
                    "delete",
                    ":featureId",
                    ":itemId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "cwswfax9454xpaxcym2la262",
                      "key": "featureId"
                    },
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "icj3bimn4dg5v1yeu7i2frzq",
                      "key": "itemId"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "414d039f-3113-4b7e-9fc1-c205faa0282f",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[DELETE]::/community-feature-to-community/delete/:featureId/:itemId - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[DELETE]::/community-feature-to-community/delete/:featureId/:itemId - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[DELETE]::/community-feature-to-community/delete/:featureId/:itemId - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/community-feature-to-community/delete/:featureId/:itemId - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "b1c59764-542a-4807-93aa-77e400e8e7ff",
      "name": "feature",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "d8a76a32-ac23-4d45-846c-374876cc122b",
          "name": "/feature/list",
          "request": {
            "name": "/feature/list",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "feature",
                "list"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "limit",
                  "value": "10"
                },
                {
                  "disabled": true,
                  "key": "orderBy",
                  "value": "name-asc"
                },
                {
                  "disabled": true,
                  "key": "cursor",
                  "value": "abqdj6xe8puto1j83soz3bml"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "1da977f1-3402-48d1-95ef-c0678260e39e",
              "name": "Responds with an array of feature objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
              "originalRequest": {
                "url": {
                  "path": [
                    "feature",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "name-asc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"fugiat voluptate exer\",\n      \"name\": \"enim non sunt\",\n      \"order\": 72605381.4225435,\n      \"createdAt\": \"do tempor ut\",\n      \"updatedAt\": \"quis sint exercitation proident\"\n    },\n    {\n      \"id\": \"minim eu tempor mollit est\",\n      \"name\": \"labore nostrud ipsum\",\n      \"order\": 70491024.52151135,\n      \"createdAt\": \"irure commodo Excepteur dolore\",\n      \"updatedAt\": \"ea ad tempor exercitation\"\n    }\n  ]\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "42640910-3ec3-42c5-8513-6b2ff0bfb890",
              "name": "Responds with a bad request error object",
              "originalRequest": {
                "url": {
                  "path": [
                    "feature",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "name-asc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a056018a-e573-4b18-bd98-64efd34f42b9",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/feature/list - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/feature/list - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/feature/list - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"order\":{\"type\":\"number\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"order\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/feature/list - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "56048291-d302-45bf-9999-779571797a82",
          "name": "/feature/create",
          "request": {
            "name": "/feature/create",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "feature",
                "create"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "dc083a4a-6b91-4cf3-8ec9-1c1679dc23cf",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "feature",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"quis \"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "e8713979-0e04-4ece-85b4-5d9242d580cd",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "feature",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "86db0c55-1b0e-4435-aedc-f12a68026e12",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/feature/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/feature/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/feature/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/feature/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "62e4fadd-4e62-4937-be3a-3518df073cb9",
          "name": "/feature/update/:id",
          "request": {
            "name": "/feature/update/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "feature",
                "update",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "i53gzgu35snbfwuc94hsivb3",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"order\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "c9b67bb0-4491-4a2e-8f10-10de0c1b20f9",
              "name": "Responds with the id of the updated feature.",
              "originalRequest": {
                "url": {
                  "path": [
                    "feature",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "i53gzgu35snbfwuc94hsivb3",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"quis \"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "791ea173-f82c-41c2-bdc6-3cbd358e5d03",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "feature",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "i53gzgu35snbfwuc94hsivb3",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d83a2a07-cbbe-4697-8eeb-922b78f73672",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[PUT]::/feature/update/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[PUT]::/feature/update/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[PUT]::/feature/update/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[PUT]::/feature/update/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "a37ce9bb-5847-4444-aa34-2d853ba43ee8",
          "name": "/feature/delete/:id",
          "request": {
            "name": "/feature/delete/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "feature",
                "delete",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "i53gzgu35snbfwuc94hsivb3",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "f9f02bde-75ba-4c02-a189-3c1eaafd6d9d",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "feature",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "i53gzgu35snbfwuc94hsivb3",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "39e274ba-eb24-4136-8b7b-f07dc85967ed",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "feature",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "i53gzgu35snbfwuc94hsivb3",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "17dfd2c7-50e0-435e-8725-82e71e360326",
              "name": "Responds with a conflict error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "feature",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "i53gzgu35snbfwuc94hsivb3",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c62169d8-3b12-403c-96af-05fbcb447063",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[DELETE]::/feature/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[DELETE]::/feature/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[DELETE]::/feature/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/feature/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "06ff192e-e827-45d5-b7fd-cd1c0ab0ec5f",
      "name": "featureToProperty",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "b306f68e-472a-453f-8121-5d9227bf17ce",
          "name": "/feature-to-property/features-by-item/:itemId",
          "request": {
            "name": "/feature-to-property/features-by-item/:itemId",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "feature-to-property",
                "features-by-item",
                ":itemId"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "hdsyi7gw3n77jrngcck1x33y",
                  "key": "itemId"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "06113870-55ce-4ac8-b710-05efc205aa88",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "feature-to-property",
                    "features-by-item",
                    ":itemId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "hdsyi7gw3n77jrngcck1x33y",
                      "key": "itemId"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"featureId\": \"ullamco ea ut mollit eiusmod\",\n      \"feature\": {\n        \"name\": \"Lorem Ut ex consectetur\"\n      }\n    },\n    {\n      \"featureId\": \"magna sit\",\n      \"feature\": {\n        \"name\": \"laborum\"\n      }\n    }\n  ]\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "e4e1a05d-f974-4ead-a75f-795df8719ead",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "feature-to-property",
                    "features-by-item",
                    ":itemId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "hdsyi7gw3n77jrngcck1x33y",
                      "key": "itemId"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "22b66b59-1488-47c1-a364-570628bc3355",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/feature-to-property/features-by-item/:itemId - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/feature-to-property/features-by-item/:itemId - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/feature-to-property/features-by-item/:itemId - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"featureId\":{\"type\":\"string\"},\"feature\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]}},\"required\":[\"featureId\",\"feature\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/feature-to-property/features-by-item/:itemId - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "5a424051-4c99-486d-8b37-be755f4a265b",
          "name": "/feature-to-property/create",
          "request": {
            "name": "/feature-to-property/create",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "feature-to-property",
                "create"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"featureId\": \"i53gzgu35snbfwuc94hsivb3\",\n  \"itemId\": \"hdsyi7gw3n77jrngcck1x33y\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "5f196c67-34fd-490f-a163-f087a428bd09",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "feature-to-property",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"featureId\": \"i53gzgu35snbfwuc94hsivb3\",\n  \"itemId\": \"hdsyi7gw3n77jrngcck1x33y\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "e3213744-a850-45fb-9e70-4733862c4655",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "feature-to-property",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"featureId\": \"i53gzgu35snbfwuc94hsivb3\",\n  \"itemId\": \"hdsyi7gw3n77jrngcck1x33y\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "246a649f-c5be-43d9-9208-449026c1f1ca",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/feature-to-property/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/feature-to-property/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/feature-to-property/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/feature-to-property/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "9e371cc7-953d-449e-a783-6620c86d7022",
          "name": "/feature-to-property/delete/:featureId/:itemId",
          "request": {
            "name": "/feature-to-property/delete/:featureId/:itemId",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "feature-to-property",
                "delete",
                ":featureId",
                ":itemId"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "i53gzgu35snbfwuc94hsivb3",
                  "key": "featureId"
                },
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "hdsyi7gw3n77jrngcck1x33y",
                  "key": "itemId"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "363b6fd2-727d-4cef-8aa6-b2d24c8b5f1b",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "feature-to-property",
                    "delete",
                    ":featureId",
                    ":itemId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "i53gzgu35snbfwuc94hsivb3",
                      "key": "featureId"
                    },
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "hdsyi7gw3n77jrngcck1x33y",
                      "key": "itemId"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "5d0f2bcc-aa28-48e1-979a-ae90a9224767",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "feature-to-property",
                    "delete",
                    ":featureId",
                    ":itemId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "i53gzgu35snbfwuc94hsivb3",
                      "key": "featureId"
                    },
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "hdsyi7gw3n77jrngcck1x33y",
                      "key": "itemId"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "266d89e6-fe05-4b4b-8e7c-06ace2240eba",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[DELETE]::/feature-to-property/delete/:featureId/:itemId - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[DELETE]::/feature-to-property/delete/:featureId/:itemId - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[DELETE]::/feature-to-property/delete/:featureId/:itemId - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/feature-to-property/delete/:featureId/:itemId - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "08a784fe-1229-4aef-82bf-4ea847695591",
      "name": "floorPlan",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "6734df65-4315-4ce9-aa45-8e4eb21084c4",
          "name": "/floor-plan/list",
          "request": {
            "name": "/floor-plan/list",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "floor-plan",
                "list"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "limit",
                  "value": "10"
                },
                {
                  "disabled": true,
                  "key": "orderBy",
                  "value": "id-asc"
                },
                {
                  "disabled": true,
                  "key": "cursor",
                  "value": "abqdj6xe8puto1j83soz3bml"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Floor Plan 1\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Floor Plan 2\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"propertyId\",\n      \"hdsyi7gw3n77jrngcck1x33y\"\n    ]\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "7c6b4bdd-5a80-4694-8636-d015a26d580b",
              "name": "Responds with an array of floorPlan objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
              "originalRequest": {
                "url": {
                  "path": [
                    "floor-plan",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "id-asc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Floor Plan 1\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Floor Plan 2\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"propertyId\",\n      \"hdsyi7gw3n77jrngcck1x33y\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"consequat cupidatat\",\n      \"name\": \"dolor do\",\n      \"propertyId\": \"ea labore in\",\n      \"order\": 64156282.03096843,\n      \"createdAt\": \"laboris proident laborum minim\",\n      \"updatedAt\": \"quis\"\n    },\n    {\n      \"id\": \"ex sit et\",\n      \"name\": \"in deserunt Ut\",\n      \"propertyId\": \"nulla in Lorem commodo\",\n      \"order\": 79769194.46063504,\n      \"createdAt\": \"labore\",\n      \"updatedAt\": \"amet dolor\"\n    }\n  ]\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "e66469ad-40f2-4493-934e-1035c63c731b",
              "name": "Responds with a bad request error object",
              "originalRequest": {
                "url": {
                  "path": [
                    "floor-plan",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "id-asc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Floor Plan 1\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Floor Plan 2\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"propertyId\",\n      \"hdsyi7gw3n77jrngcck1x33y\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "493c181f-9e1c-4869-8a42-c604045fc042",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/floor-plan/list - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/floor-plan/list - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/floor-plan/list - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"propertyId\":{\"type\":\"string\",\"maxLength\":128},\"order\":{\"type\":\"number\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"propertyId\",\"order\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/floor-plan/list - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "b4d261ee-932c-44ba-b2b0-b5b1520bde4f",
          "name": "/floor-plan/create",
          "request": {
            "name": "/floor-plan/create",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "floor-plan",
                "create"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Floor Plan 1\",\n  \"propertyId\": \"hdsyi7gw3n77jrngcck1x33y\",\n  \"order\": 0\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "baad3172-8c4a-45af-a269-c21ff53d4d7e",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "floor-plan",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Floor Plan 1\",\n  \"propertyId\": \"hdsyi7gw3n77jrngcck1x33y\",\n  \"order\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"quis \"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "de8abd6a-82f8-4059-95ab-5c12aa02a774",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "floor-plan",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Floor Plan 1\",\n  \"propertyId\": \"hdsyi7gw3n77jrngcck1x33y\",\n  \"order\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "049c638d-a3d4-4e59-a284-c2e96567892d",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/floor-plan/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/floor-plan/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/floor-plan/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/floor-plan/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "4d040053-1bae-4a19-85e6-793e7d8ba532",
          "name": "/floor-plan/update/:id",
          "request": {
            "name": "/floor-plan/update/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "floor-plan",
                "update",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "fe897wto8ribvu9024zvfvxp",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Floor Plan 2\",\n  \"order\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "89fc093d-8ae6-4de8-b82b-c230535ea3a8",
              "name": "Responds with the id of the updated floorPlan.",
              "originalRequest": {
                "url": {
                  "path": [
                    "floor-plan",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "fe897wto8ribvu9024zvfvxp",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Floor Plan 2\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"quis \"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "eec72029-f266-40c7-86bf-26a486bbb43d",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "floor-plan",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "fe897wto8ribvu9024zvfvxp",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Floor Plan 2\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "39fecee7-858c-4300-a538-d555868c2beb",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[PUT]::/floor-plan/update/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[PUT]::/floor-plan/update/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[PUT]::/floor-plan/update/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[PUT]::/floor-plan/update/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "41e7af05-aef3-4d81-abeb-545f2ac61c43",
          "name": "/floor-plan/delete/:id",
          "request": {
            "name": "/floor-plan/delete/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "floor-plan",
                "delete",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "fe897wto8ribvu9024zvfvxp",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "9f65c097-d120-4148-8171-724d3bddd8a2",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "floor-plan",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "fe897wto8ribvu9024zvfvxp",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "a943ce4f-7559-4e30-91e9-6b485dea9556",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "floor-plan",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "fe897wto8ribvu9024zvfvxp",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "e579e34f-d08a-4198-b9de-e919446e376c",
              "name": "Responds with a conflict error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "floor-plan",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "fe897wto8ribvu9024zvfvxp",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "02502a37-98e6-4990-a991-1cbfa012e656",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[DELETE]::/floor-plan/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[DELETE]::/floor-plan/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[DELETE]::/floor-plan/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/floor-plan/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "6f37be2b-1bd2-4b5f-8ae3-9bea430890c1",
      "name": "media",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "00f6b9e5-117b-44c6-9f5f-b584078161e5",
          "name": "/media/list",
          "request": {
            "name": "/media/list",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "media",
                "list"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "limit",
                  "value": "10"
                },
                {
                  "disabled": true,
                  "key": "orderBy",
                  "value": "id-asc"
                },
                {
                  "disabled": true,
                  "key": "cursor",
                  "value": "abqdj6xe8puto1j83soz3bml"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"assetId\",\n          \"a344xpp1\"\n        ],\n        [\n          \"eq\",\n          \"assetId\",\n          \"a344xpp2\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"mediaTypeId\",\n      \"kaeu5o03h4ihq1zoxzb19l92\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-23T00:00:00.000Z\",\n      \"2024-02-12T00:00:00.000Z\"\n    ]\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "21f94f09-0e1f-43a1-b9bf-3119b6b2afd4",
              "name": "Responds with an array of media objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
              "originalRequest": {
                "url": {
                  "path": [
                    "media",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "id-asc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"assetId\",\n          \"a344xpp1\"\n        ],\n        [\n          \"eq\",\n          \"assetId\",\n          \"a344xpp2\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"mediaTypeId\",\n      \"kaeu5o03h4ihq1zoxzb19l92\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-23T00:00:00.000Z\",\n      \"2024-02-12T00:00:00.000Z\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"eu et minim\",\n      \"assetId\": \"commodo et\",\n      \"mediaTypeId\": \"dolor minim velit aliquip\",\n      \"propertyId\": \"esse ut in labore\",\n      \"order\": -94211785.74170548,\n      \"createdAt\": \"quis in\",\n      \"updatedAt\": \"officia enim\"\n    },\n    {\n      \"id\": \"proident Ut nost\",\n      \"assetId\": \"voluptate\",\n      \"mediaTypeId\": \"cupidatat veniam enim eu\",\n      \"propertyId\": \"mollit in ex incididunt\",\n      \"order\": 69167180.56041774,\n      \"createdAt\": \"dolore do enim commodo nulla\",\n      \"updatedAt\": \"do nulla minim\"\n    }\n  ]\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "48e87d57-f9fb-4ea7-8e63-5b39a3ef0b49",
              "name": "Responds with a bad request error object",
              "originalRequest": {
                "url": {
                  "path": [
                    "media",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "id-asc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"assetId\",\n          \"a344xpp1\"\n        ],\n        [\n          \"eq\",\n          \"assetId\",\n          \"a344xpp2\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"mediaTypeId\",\n      \"kaeu5o03h4ihq1zoxzb19l92\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-23T00:00:00.000Z\",\n      \"2024-02-12T00:00:00.000Z\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "04c84d2d-e36a-4def-b51f-c045c5dbf047",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/media/list - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/media/list - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/media/list - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"assetId\":{\"type\":\"string\",\"maxLength\":256},\"mediaTypeId\":{\"type\":\"string\",\"maxLength\":128},\"propertyId\":{\"type\":\"string\",\"maxLength\":128},\"order\":{\"type\":\"number\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"assetId\",\"mediaTypeId\",\"propertyId\",\"order\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/media/list - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "b3b47956-21dd-4709-b959-3a6d9281f262",
          "name": "/media/create",
          "request": {
            "name": "/media/create",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "media",
                "create"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"assetId\": \"a344xpp1\",\n  \"mediaTypeId\": \"kaeu5o03h4ihq1zoxzb19l92\",\n  \"propertyId\": \"hdsyi7gw3n77jrngcck1x33y\",\n  \"order\": 0\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "194cddad-8306-47df-b813-e08c6b116a48",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "media",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"assetId\": \"a344xpp1\",\n  \"mediaTypeId\": \"kaeu5o03h4ihq1zoxzb19l92\",\n  \"propertyId\": \"hdsyi7gw3n77jrngcck1x33y\",\n  \"order\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"quis \"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "a152d16e-6684-4fa1-bc62-01d580cb0df9",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "media",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"assetId\": \"a344xpp1\",\n  \"mediaTypeId\": \"kaeu5o03h4ihq1zoxzb19l92\",\n  \"propertyId\": \"hdsyi7gw3n77jrngcck1x33y\",\n  \"order\": 0\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "26deca0f-279c-4bde-9f61-32ed1d2c7f3f",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/media/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/media/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/media/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/media/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "886ba586-fed1-46fa-bf6e-56c7e14b7002",
          "name": "/media/update/:id",
          "request": {
            "name": "/media/update/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "media",
                "update",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "h8e874h63772amg892ajzbo6",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"order\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "450ba8f9-efbf-44a1-a523-617b3c32f7f0",
              "name": "Responds with the id of the updated media.",
              "originalRequest": {
                "url": {
                  "path": [
                    "media",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "h8e874h63772amg892ajzbo6",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"quis \"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "4d4a6716-cf1f-4724-a604-092f09179748",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "media",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "h8e874h63772amg892ajzbo6",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "51dd4f13-4f31-4e08-be84-d3bdd3ae4b96",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[PUT]::/media/update/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[PUT]::/media/update/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[PUT]::/media/update/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[PUT]::/media/update/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "73420113-55ea-4e8d-b49b-5a42c425f78c",
          "name": "/media/delete/:id",
          "request": {
            "name": "/media/delete/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "media",
                "delete",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "h8e874h63772amg892ajzbo6",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "d9bdfe4b-a070-4668-b09f-521ec5adb297",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "media",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "h8e874h63772amg892ajzbo6",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "e88f16c6-3412-4e2c-af15-a664906448df",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "media",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "h8e874h63772amg892ajzbo6",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "104624fc-9276-4166-925e-016be2ffae03",
              "name": "Responds with a conflict error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "media",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "h8e874h63772amg892ajzbo6",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d2e32920-6206-4e46-a723-edbd2e3d9272",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[DELETE]::/media/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[DELETE]::/media/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[DELETE]::/media/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/media/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "fad89633-b680-408c-94b2-a4d38122d0cd",
      "name": "mediaType",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "dc8c92f5-45a1-40b7-8162-76550ae0c941",
          "name": "/media-type/list",
          "request": {
            "name": "/media-type/list",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "media-type",
                "list"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "limit",
                  "value": "10"
                },
                {
                  "disabled": true,
                  "key": "orderBy",
                  "value": "id-asc"
                },
                {
                  "disabled": true,
                  "key": "cursor",
                  "value": "abqdj6xe8puto1j83soz3bml"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"video\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"image\"\n        ]\n      ]\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-23T00:00:00.000Z\",\n      \"2024-02-12T00:00:00.000Z\"\n    ]\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "097b2197-3d15-438d-a4b8-5558ce037923",
              "name": "Responds with an array of mediaType objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
              "originalRequest": {
                "url": {
                  "path": [
                    "media-type",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "id-asc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"video\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"image\"\n        ]\n      ]\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-23T00:00:00.000Z\",\n      \"2024-02-12T00:00:00.000Z\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"Duis velit minim\",\n      \"name\": \"eu\",\n      \"createdAt\": \"sed\",\n      \"updatedAt\": \"incididunt esse do\"\n    },\n    {\n      \"id\": \"occaecat laboris ut\",\n      \"name\": \"aute\",\n      \"createdAt\": \"in esse voluptate dolor\",\n      \"updatedAt\": \"incididunt Excepteur dolore\"\n    }\n  ]\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "980f7a60-9ccf-4eac-b168-4236c4718a1c",
              "name": "Responds with a bad request error object",
              "originalRequest": {
                "url": {
                  "path": [
                    "media-type",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "id-asc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"video\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"image\"\n        ]\n      ]\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-23T00:00:00.000Z\",\n      \"2024-02-12T00:00:00.000Z\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "376bf920-5549-4c9e-bd91-4a4b3d2d6c01",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/media-type/list - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/media-type/list - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/media-type/list - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/media-type/list - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "79183c3b-3234-4615-85d7-7fda132997f1",
          "name": "/media-type/create",
          "request": {
            "name": "/media-type/create",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "media-type",
                "create"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"postman test media type\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "748ba7af-2a84-4df3-add8-a786072ddc27",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "media-type",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"postman test media type\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"quis \"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "1d328c55-6079-4c00-8dbf-c2ea65efaff2",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "media-type",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"postman test media type\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "44b565e2-17a3-4c4e-9b43-80e3360a2523",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/media-type/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/media-type/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/media-type/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/media-type/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "dc9f45f1-a888-41b4-96ab-c43bc0cfb4b5",
          "name": "/media-type/update/:id",
          "request": {
            "name": "/media-type/update/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "media-type",
                "update",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "kaeu5o03h4ihq1zoxzb19l92",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"postman test media type update\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "ed65eb20-9fab-48a4-8833-58c5cdfa0030",
              "name": "Responds with the id of the updated mediaType.",
              "originalRequest": {
                "url": {
                  "path": [
                    "media-type",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "kaeu5o03h4ihq1zoxzb19l92",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"postman test media type update\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"quis \"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "aae9f44b-63a6-4696-bf24-4041b6da5344",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "media-type",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "kaeu5o03h4ihq1zoxzb19l92",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"postman test media type update\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8165c3a0-3714-4c0a-a708-de380b69ede2",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[PUT]::/media-type/update/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[PUT]::/media-type/update/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[PUT]::/media-type/update/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[PUT]::/media-type/update/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "44298fba-92f1-4f94-8378-79300571f49e",
          "name": "/media-type/delete/:id",
          "request": {
            "name": "/media-type/delete/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "media-type",
                "delete",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "kaeu5o03h4ihq1zoxzb19l92",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "a3c050c1-4e00-46fd-a048-1823cd0b52db",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "media-type",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "kaeu5o03h4ihq1zoxzb19l92",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "f10e976e-1dfb-49cc-a3e5-a84226ee065d",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "media-type",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "kaeu5o03h4ihq1zoxzb19l92",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "7efe82aa-23b9-4d53-845e-353ef0d0ee70",
              "name": "Responds with a conflict error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "media-type",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "kaeu5o03h4ihq1zoxzb19l92",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "119b5cf5-4bae-4092-8d01-32c8c7f7c548",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[DELETE]::/media-type/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[DELETE]::/media-type/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[DELETE]::/media-type/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/media-type/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "6b01f40c-f0b0-4da7-8541-6697940ad12b",
      "name": "parking",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "a088364a-9072-4fbd-83fb-3a1312808ae6",
          "name": "/parking/parkings-by-property/:itemId",
          "request": {
            "name": "/parking/parkings-by-property/:itemId",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "parking",
                "parkings-by-property",
                ":itemId"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "hdsyi7gw3n77jrngcck1x33y",
                  "key": "itemId"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "b1b1df7a-d20e-4625-b3a9-f6c05150b761",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "parking",
                    "parkings-by-property",
                    ":itemId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "hdsyi7gw3n77jrngcck1x33y",
                      "key": "itemId"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"ex culpa ullamco\",\n      \"name\": \"cupidatat occaecat\",\n      \"fee\": -56093695,\n      \"feeInterval\": \"consequat incididunt\",\n      \"order\": -33943899\n    },\n    {\n      \"id\": \"aliqua eu\",\n      \"name\": \"in exercitation do cillum\",\n      \"fee\": -93771479,\n      \"feeInterval\": \"velit\",\n      \"order\": 36055169\n    }\n  ]\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "4f216117-0ad1-4b38-b38c-4a9deb5c10ae",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "parking",
                    "parkings-by-property",
                    ":itemId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "hdsyi7gw3n77jrngcck1x33y",
                      "key": "itemId"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f3c830fc-d6ae-4986-a1ca-e0441b827ac9",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/parking/parkings-by-property/:itemId - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/parking/parkings-by-property/:itemId - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/parking/parkings-by-property/:itemId - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"fee\":{\"type\":[\"integer\",\"null\"]},\"feeInterval\":{\"type\":[\"string\",\"null\"]},\"order\":{\"type\":\"integer\"}},\"required\":[\"id\",\"name\",\"fee\",\"feeInterval\",\"order\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/parking/parkings-by-property/:itemId - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "a0b00ff8-3dc4-43d5-ba75-dc1cb1064d16",
          "name": "/parking/list",
          "request": {
            "name": "/parking/list",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "parking",
                "list"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "limit",
                  "value": "10"
                },
                {
                  "disabled": true,
                  "key": "orderBy",
                  "value": "order-asc"
                },
                {
                  "disabled": true,
                  "key": "cursor",
                  "value": "abqdj6xe8puto1j83soz3bml"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Outdoor\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Covered\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"eq\",\n      \"fee\",\n      100\n    ],\n    [\n      \"eq\",\n      \"feeInterval\",\n      \"monthly\"\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "44f5e90d-c8e9-496d-8b7c-3fa651527453",
              "name": "Responds with an array of parking objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
              "originalRequest": {
                "url": {
                  "path": [
                    "parking",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "order-asc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Outdoor\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Covered\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"eq\",\n      \"fee\",\n      100\n    ],\n    [\n      \"eq\",\n      \"feeInterval\",\n      \"monthly\"\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"do\",\n      \"name\": \"occaecat aliqua ullamco enim\",\n      \"propertyId\": \"aliqua sit\",\n      \"fee\": 12468870.443616837,\n      \"feeInterval\": \"sed pariatur\",\n      \"order\": 66822529.43350577,\n      \"createdAt\": \"magna Ut\",\n      \"updatedAt\": \"sit et Excepteur in nostrud\"\n    },\n    {\n      \"id\": \"ullamco deserunt sunt nisi\",\n      \"name\": \"ea\",\n      \"propertyId\": \"incididunt consectetur aliqua au\",\n      \"fee\": -85195963.75917393,\n      \"feeInterval\": \"in ullamco Excepteur enim\",\n      \"order\": -64419934.650263585,\n      \"createdAt\": \"do ut an\",\n      \"updatedAt\": \"dolore te\"\n    }\n  ]\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "3ffb5d02-2214-451d-b5ac-fd0dfe5f04c9",
              "name": "Responds with a bad request error object",
              "originalRequest": {
                "url": {
                  "path": [
                    "parking",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "order-asc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Outdoor\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Covered\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"eq\",\n      \"fee\",\n      100\n    ],\n    [\n      \"eq\",\n      \"feeInterval\",\n      \"monthly\"\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b1e7c384-482a-45f0-998a-97ef6743b9b6",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/parking/list - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/parking/list - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/parking/list - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"propertyId\":{\"type\":\"string\",\"maxLength\":128},\"fee\":{\"type\":[\"number\",\"null\"]},\"feeInterval\":{\"type\":[\"string\",\"null\"],\"maxLength\":128},\"order\":{\"type\":\"number\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"propertyId\",\"fee\",\"feeInterval\",\"order\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/parking/list - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "b3e0211c-225f-4c8c-b0d8-9954d12cc042",
          "name": "/parking/create",
          "request": {
            "name": "/parking/create",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "parking",
                "create"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Covered\",\n  \"propertyId\": \"hdsyi7gw3n77jrngcck1x33y\",\n  \"fee\": 100,\n  \"feeInterval\": \"monthly\",\n  \"order\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "c19df783-0139-4937-9621-5526b6a00155",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "parking",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Covered\",\n  \"propertyId\": \"hdsyi7gw3n77jrngcck1x33y\",\n  \"fee\": 100,\n  \"feeInterval\": \"monthly\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"quis \"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "982f431a-1023-455e-9fd3-dccc9585796f",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "parking",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Covered\",\n  \"propertyId\": \"hdsyi7gw3n77jrngcck1x33y\",\n  \"fee\": 100,\n  \"feeInterval\": \"monthly\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a04524a5-a8d6-4e5e-848b-0b21502ba774",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/parking/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/parking/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/parking/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/parking/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "32684cc6-370f-4437-9d44-2b47ca5e64ae",
          "name": "/parking/update/:id",
          "request": {
            "name": "/parking/update/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "parking",
                "update",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "wowhdybituf34cr8im31nr4s",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Covered\",\n  \"fee\": 100,\n  \"feeInterval\": \"monthly\",\n  \"order\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "2ace0aa5-73f5-4a89-9ac0-1405a0a761f4",
              "name": "Responds with the id of the updated parking.",
              "originalRequest": {
                "url": {
                  "path": [
                    "parking",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "wowhdybituf34cr8im31nr4s",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Covered\",\n  \"fee\": 100,\n  \"feeInterval\": \"monthly\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"quis \"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "49caf389-2398-479e-94a5-1da63e951041",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "parking",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "wowhdybituf34cr8im31nr4s",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Covered\",\n  \"fee\": 100,\n  \"feeInterval\": \"monthly\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "628234b6-f9f6-4f08-af45-9f262e9b36d4",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[PUT]::/parking/update/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[PUT]::/parking/update/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[PUT]::/parking/update/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[PUT]::/parking/update/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "316cfe5b-aa4a-4fbf-94cf-a12d950dca70",
          "name": "/parking/delete/:id",
          "request": {
            "name": "/parking/delete/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "parking",
                "delete",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "wowhdybituf34cr8im31nr4s",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "4485148b-073b-459c-9709-571c3e7444cd",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "parking",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "wowhdybituf34cr8im31nr4s",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "4a6d0134-c6ef-41e1-95e7-a0151bff875e",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "parking",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "wowhdybituf34cr8im31nr4s",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "111f553b-d27d-4099-9c65-57b137785b4c",
              "name": "Responds with a conflict error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "parking",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "wowhdybituf34cr8im31nr4s",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "22c00e5c-3a04-4444-a560-b65e85a998e9",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[DELETE]::/parking/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[DELETE]::/parking/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[DELETE]::/parking/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/parking/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "7fdad03f-a60f-4be8-a2ad-8acf1ef75e8d",
      "name": "property",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "f928a3af-d064-4038-b88b-d78e80c598b2",
          "name": "/property/:id",
          "request": {
            "name": "/property/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "property",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "hdsyi7gw3n77jrngcck1x33y",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "5957c1eb-1bb8-4bf0-ab83-1c50db27140a",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "property",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "hdsyi7gw3n77jrngcck1x33y",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"nisi aliquip\",\n    \"listingId\": -56636126.77085754,\n    \"name\": \"quis sint ut exercitation ullamco\",\n    \"address\": \"est in anim reprehenderit\",\n    \"latitude\": \"ea velit nisi\",\n    \"longitude\": \"eu commodo\",\n    \"yearBuilt\": -99821887,\n    \"descriptionTitle\": \"deserunt par\",\n    \"descriptionSubtitle\": \"ullamco fugiat aliqua\",\n    \"descriptionText\": \"occaecat in in\",\n    \"smoking\": false,\n    \"cats\": false,\n    \"dogs\": false,\n    \"petsNegotiable\": true,\n    \"petsFee\": 11066472,\n    \"petsFeeInterval\": \"minim ut ut Ut\",\n    \"published\": true,\n    \"customerRanking\": 906122.1801071316,\n    \"paidSearchRanking\": false,\n    \"city\": {\n      \"name\": \"occaecat qui Excepteur\"\n    },\n    \"featureToProperty\": [\n      {\n        \"feature\": {\n          \"name\": \"sit nostrud dolor\"\n        }\n      },\n      {\n        \"feature\": {\n          \"name\": \"ut officia ex mollit\"\n        }\n      }\n    ],\n    \"buildingFeatureToProperty\": [\n      {\n        \"buildingFeature\": {\n          \"name\": \"mollit consequat reprehenderit tempor\"\n        }\n      },\n      {\n        \"buildingFeature\": {\n          \"name\": \"incididunt\"\n        }\n      }\n    ],\n    \"community\": {\n      \"name\": \"deserunt dolor\",\n      \"score\": 78489334,\n      \"imageUrl\": \"sed in amet\",\n      \"quadrant\": \"commodo cillum proident consequat anim\",\n      \"sector\": \"esse officia eu\",\n      \"ward\": \"mollit enim et sit\",\n      \"population\": 72395851,\n      \"dwellings\": 9397379,\n      \"usedForRenting\": -98632293.42593546,\n      \"area\": -73834380.86878051,\n      \"density\": 37866831.47271824,\n      \"averageIncome\": -47369287,\n      \"lowIncome\": 22300588.98690541,\n      \"immigrants\": 35105555.88960731,\n      \"elevation\": 51064733,\n      \"established\": 92396530,\n      \"description\": \"in quis\",\n      \"latitude\": -6755267.145149842,\n      \"longitude\": 92652209.5004136,\n      \"communityFeatureToCommunity\": [\n        {\n          \"communityFeature\": {\n            \"name\": \"e\"\n          }\n        },\n        {\n          \"communityFeature\": {\n            \"name\": \"ea fugiat\"\n          }\n        }\n      ]\n    },\n    \"medias\": [\n      {\n        \"assetId\": \"aliquip do\",\n        \"order\": -21177028.82819286\n      },\n      {\n        \"assetId\": \"commodo elit aute officia\",\n        \"order\": -42814751.432553776\n      }\n    ],\n    \"parkings\": [\n      {\n        \"name\": \"reprehenderit nulla est\",\n        \"fee\": -90607571.98949715,\n        \"feeInterval\": \"nostrud in sunt Duis\"\n      },\n      {\n        \"name\": \"dolor quis\",\n        \"fee\": -946453.9763865471,\n        \"feeInterval\": \"sit magna exercitation Duis\"\n      }\n    ],\n    \"typeProp\": {\n      \"name\": \"consequat reprehenderit\"\n    },\n    \"floorPlans\": [\n      {\n        \"id\": \"esse cul\",\n        \"name\": \"ut velit exercitation\",\n        \"order\": 59934273.40820676,\n        \"units\": [\n          {\n            \"id\": \"officia\",\n            \"name\": \"dolor\",\n            \"rent\": 3276817.922908172,\n            \"deposit\": 26476113.306680694,\n            \"available\": true,\n            \"immediate\": false,\n            \"availableDate\": \"quis Ut\",\n            \"shortterm\": false,\n            \"longterm\": true,\n            \"unitNumber\": \"eiusmod exercitation non irure\",\n            \"unitName\": \"eu ut nostrud\",\n            \"surface\": 91657405,\n            \"furnished\": true,\n            \"heat\": false,\n            \"water\": false,\n            \"electricity\": true,\n            \"internet\": true,\n            \"television\": true,\n            \"order\": -31792742,\n            \"published\": true,\n            \"bedroom\": {\n              \"name\": \"exercitation\"\n            },\n            \"bathroom\": {\n              \"name\": \"m\"\n            }\n          },\n          {\n            \"id\": \"sunt commodo nulla dolor\",\n            \"name\": \"cu\",\n            \"rent\": 84813637.83510539,\n            \"deposit\": -98203409.03985727,\n            \"available\": true,\n            \"immediate\": true,\n            \"availableDate\": \"Excepteur cillum mollit\",\n            \"shortterm\": false,\n            \"longterm\": false,\n            \"unitNumber\": \"cupidatat proident deserunt\",\n            \"unitName\": \"qui sit exercita\",\n            \"surface\": 51036619,\n            \"furnished\": false,\n            \"heat\": false,\n            \"water\": false,\n            \"electricity\": true,\n            \"internet\": false,\n            \"television\": true,\n            \"order\": 79283327,\n            \"published\": false,\n            \"bedroom\": {\n              \"name\": \"in\"\n            },\n            \"bathroom\": {\n              \"name\": \"commodo proident ad\"\n            }\n          }\n        ]\n      },\n      {\n        \"id\": \"anim irure\",\n        \"name\": \"consequat ut elit\",\n        \"order\": -71918298.94317286,\n        \"units\": [\n          {\n            \"id\": \"voluptate officia qui quis\",\n            \"name\": \"sunt nostrud\",\n            \"rent\": -7411950.134137109,\n            \"deposit\": -87198987.8462089,\n            \"available\": false,\n            \"immediate\": true,\n            \"availableDate\": \"commodo id sed ullamco\",\n            \"shortterm\": false,\n            \"longterm\": true,\n            \"unitNumber\": \"adipisicing enim est sunt\",\n            \"unitName\": \"nulla sit enim reprehenderit\",\n            \"surface\": -9739922,\n            \"furnished\": false,\n            \"heat\": true,\n            \"water\": false,\n            \"electricity\": false,\n            \"internet\": true,\n            \"television\": true,\n            \"order\": 30588223,\n            \"published\": false,\n            \"bedroom\": {\n              \"name\": \"cupidatat labore ad in sed\"\n            },\n            \"bathroom\": {\n              \"name\": \"eiusmod\"\n            }\n          },\n          {\n            \"id\": \"anim\",\n            \"name\": \"amet sit in ipsum\",\n            \"rent\": -7271785.721433103,\n            \"deposit\": -24817590.55582677,\n            \"available\": false,\n            \"immediate\": false,\n            \"availableDate\": \"dolor\",\n            \"shortterm\": true,\n            \"longterm\": false,\n            \"unitNumber\": \"Excepteur non\",\n            \"unitName\": \"occaecat laborum cillum nisi\",\n            \"surface\": 81010495,\n            \"furnished\": true,\n            \"heat\": true,\n            \"water\": true,\n            \"electricity\": true,\n            \"internet\": true,\n            \"television\": false,\n            \"order\": 89839408,\n            \"published\": false,\n            \"bedroom\": {\n              \"name\": \"dolor do\"\n            },\n            \"bathroom\": {\n              \"name\": \"proident Excepteur commodo\"\n            }\n          }\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "4cab4e46-12de-4296-8d80-e62799a04fb0",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "property",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "hdsyi7gw3n77jrngcck1x33y",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "331c8618-49d3-4f27-abc7-891394206373",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/property/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/property/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/property/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"listingId\":{\"type\":\"number\"},\"name\":{\"type\":\"string\"},\"address\":{\"type\":\"string\"},\"latitude\":{\"type\":\"string\"},\"longitude\":{\"type\":\"string\"},\"yearBuilt\":{\"type\":[\"integer\",\"null\"]},\"descriptionTitle\":{\"type\":[\"string\",\"null\"]},\"descriptionSubtitle\":{\"type\":[\"string\",\"null\"]},\"descriptionText\":{\"type\":[\"string\",\"null\"]},\"smoking\":{\"type\":\"boolean\"},\"cats\":{\"type\":\"boolean\"},\"dogs\":{\"type\":\"boolean\"},\"petsNegotiable\":{\"type\":\"boolean\"},\"petsFee\":{\"type\":[\"integer\",\"null\"]},\"petsFeeInterval\":{\"type\":[\"string\",\"null\"]},\"published\":{\"type\":\"boolean\"},\"customerRanking\":{\"type\":\"number\"},\"paidSearchRanking\":{\"type\":\"boolean\"},\"city\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]},\"featureToProperty\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"feature\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]}},\"required\":[\"feature\"]}},\"buildingFeatureToProperty\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"buildingFeature\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]}},\"required\":[\"buildingFeature\"]}},\"community\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"score\":{\"type\":[\"integer\",\"null\"]},\"imageUrl\":{\"type\":[\"string\",\"null\"]},\"quadrant\":{\"type\":[\"string\",\"null\"]},\"sector\":{\"type\":[\"string\",\"null\"]},\"ward\":{\"type\":[\"string\",\"null\"]},\"population\":{\"type\":[\"integer\",\"null\"]},\"dwellings\":{\"type\":[\"integer\",\"null\"]},\"usedForRenting\":{\"type\":[\"number\",\"null\"]},\"area\":{\"type\":[\"number\",\"null\"]},\"density\":{\"type\":[\"number\",\"null\"]},\"averageIncome\":{\"type\":[\"integer\",\"null\"]},\"lowIncome\":{\"type\":[\"number\",\"null\"]},\"immigrants\":{\"type\":[\"number\",\"null\"]},\"elevation\":{\"type\":[\"integer\",\"null\"]},\"established\":{\"type\":[\"integer\",\"null\"]},\"description\":{\"type\":[\"string\",\"null\"]},\"latitude\":{\"type\":\"number\"},\"longitude\":{\"type\":\"number\"},\"communityFeatureToCommunity\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"communityFeature\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]}},\"required\":[\"communityFeature\"]}}},\"required\":[\"name\",\"score\",\"imageUrl\",\"quadrant\",\"sector\",\"ward\",\"population\",\"dwellings\",\"usedForRenting\",\"area\",\"density\",\"averageIncome\",\"lowIncome\",\"immigrants\",\"elevation\",\"established\",\"description\",\"latitude\",\"longitude\",\"communityFeatureToCommunity\"]},\"medias\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"assetId\":{\"type\":\"string\"},\"order\":{\"type\":\"number\"}},\"required\":[\"assetId\",\"order\"]}},\"parkings\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"fee\":{\"type\":\"number\"},\"feeInterval\":{\"type\":\"string\"}},\"required\":[\"name\",\"fee\",\"feeInterval\"]}},\"typeProp\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]},\"floorPlans\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"order\":{\"type\":\"number\"},\"units\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"rent\":{\"type\":\"number\"},\"deposit\":{\"type\":[\"number\",\"null\"]},\"available\":{\"type\":\"boolean\"},\"immediate\":{\"type\":\"boolean\"},\"availableDate\":{\"type\":[\"string\",\"null\"]},\"shortterm\":{\"type\":\"boolean\"},\"longterm\":{\"type\":\"boolean\"},\"unitNumber\":{\"type\":[\"string\",\"null\"]},\"unitName\":{\"type\":[\"string\",\"null\"]},\"surface\":{\"type\":\"integer\"},\"furnished\":{\"type\":\"boolean\"},\"heat\":{\"type\":\"boolean\"},\"water\":{\"type\":\"boolean\"},\"electricity\":{\"type\":\"boolean\"},\"internet\":{\"type\":\"boolean\"},\"television\":{\"type\":\"boolean\"},\"order\":{\"type\":\"integer\"},\"published\":{\"type\":\"boolean\"},\"bedroom\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]},\"bathroom\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]}},\"required\":[\"id\",\"name\",\"rent\",\"deposit\",\"available\",\"immediate\",\"availableDate\",\"shortterm\",\"longterm\",\"unitNumber\",\"unitName\",\"surface\",\"furnished\",\"heat\",\"water\",\"electricity\",\"internet\",\"television\",\"order\",\"published\",\"bedroom\",\"bathroom\"]}}},\"required\":[\"id\",\"name\",\"order\",\"units\"]}}},\"required\":[\"id\",\"listingId\",\"name\",\"address\",\"latitude\",\"longitude\",\"yearBuilt\",\"descriptionTitle\",\"descriptionSubtitle\",\"descriptionText\",\"smoking\",\"cats\",\"dogs\",\"petsNegotiable\",\"petsFee\",\"petsFeeInterval\",\"published\",\"customerRanking\",\"paidSearchRanking\",\"city\",\"featureToProperty\",\"buildingFeatureToProperty\",\"community\",\"medias\",\"parkings\",\"typeProp\",\"floorPlans\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/property/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "8c168384-f314-4da1-b399-757aeb15594a",
          "name": "/property/list",
          "request": {
            "name": "/property/list",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "property",
                "list"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "limit",
                  "value": "10"
                },
                {
                  "disabled": true,
                  "key": "orderBy",
                  "value": "listingId-asc"
                },
                {
                  "disabled": true,
                  "key": "cursor",
                  "value": "abqdj6xe8puto1j83soz3bml"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"gt\",\n          \"yearBuilt\",\n          2010\n        ],\n        [\n          \"lt\",\n          \"yearBuilt\",\n          2020\n        ]\n      ]\n    ],\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"cats\",\n          1\n        ],\n        [\n          \"eq\",\n          \"dogs\",\n          1\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"communityId\",\n      \"icj3bimn4dg5v1yeu7i2frzq\"\n    ],\n    [\n      \"eq\",\n      \"cityId\",\n      \"dl7r7ezrt909p6bmct6avl9l\"\n    ],\n    [\n      \"eq\",\n      \"smoking\",\n      0\n    ]\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "294c2038-0f64-40b7-9971-fd4205a203c4",
              "name": "Responds with an array of property objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
              "originalRequest": {
                "url": {
                  "path": [
                    "property",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "listingId-asc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"gt\",\n          \"yearBuilt\",\n          2010\n        ],\n        [\n          \"lt\",\n          \"yearBuilt\",\n          2020\n        ]\n      ]\n    ],\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"cats\",\n          1\n        ],\n        [\n          \"eq\",\n          \"dogs\",\n          1\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"communityId\",\n      \"icj3bimn4dg5v1yeu7i2frzq\"\n    ],\n    [\n      \"eq\",\n      \"cityId\",\n      \"dl7r7ezrt909p6bmct6avl9l\"\n    ],\n    [\n      \"eq\",\n      \"smoking\",\n      0\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"est\",\n      \"listingId\": 11075440.943762034,\n      \"name\": \"sit ut\",\n      \"address\": \"aute nulla non\",\n      \"latitude\": \"reprehenderit in labore ea\",\n      \"longitude\": \"aliquip p\",\n      \"yearBuilt\": 94344786.69993407,\n      \"descriptionTitle\": \"Lorem proident tempor consectetur\",\n      \"descriptionSubtitle\": \"Ut non qui nulla\",\n      \"descriptionText\": \"sit\",\n      \"typePropId\": \"dolore ut ut\",\n      \"communityId\": \"in non U\",\n      \"cityId\": \"velit est dolor\",\n      \"smoking\": false,\n      \"cats\": false,\n      \"dogs\": true,\n      \"petsNegotiable\": true,\n      \"petsFee\": 101332.77000793815,\n      \"petsFeeInterval\": \"labore ex\",\n      \"published\": false,\n      \"customerRanking\": -30400112.01214847,\n      \"paidSearchRanking\": false,\n      \"createdAt\": \"dolore ullamco nisi in Duis\",\n      \"updatedAt\": \"reprehenderit tempor labore\"\n    },\n    {\n      \"id\": \"magna Ut\",\n      \"listingId\": 66214586.55947679,\n      \"name\": \"laborum\",\n      \"address\": \"exercitation consequat in\",\n      \"latitude\": \"ut cillum\",\n      \"longitude\": \"veniam officia dolore pariatur proident\",\n      \"yearBuilt\": 28698377.199939877,\n      \"descriptionTitle\": \"enim labore nostrud laboris\",\n      \"descriptionSubtitle\": \"amet magna ipsum\",\n      \"descriptionText\": \"enim consectetur labore\",\n      \"typePropId\": \"velit\",\n      \"communityId\": \"irure laboris reprehenderit\",\n      \"cityId\": \"et laboris reprehenderit ullamco sunt\",\n      \"smoking\": true,\n      \"cats\": false,\n      \"dogs\": true,\n      \"petsNegotiable\": false,\n      \"petsFee\": -49461883.435870126,\n      \"petsFeeInterval\": \"deserunt ullamco consectetur et Excepteur\",\n      \"published\": false,\n      \"customerRanking\": 53525677.607067645,\n      \"paidSearchRanking\": false,\n      \"createdAt\": \"ad in dolore cillum\",\n      \"updatedAt\": \"officia\"\n    }\n  ]\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "ac57ee7b-0c98-4873-a221-b681832e9299",
              "name": "Responds with a bad request error object",
              "originalRequest": {
                "url": {
                  "path": [
                    "property",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "listingId-asc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"gt\",\n          \"yearBuilt\",\n          2010\n        ],\n        [\n          \"lt\",\n          \"yearBuilt\",\n          2020\n        ]\n      ]\n    ],\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"cats\",\n          1\n        ],\n        [\n          \"eq\",\n          \"dogs\",\n          1\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"communityId\",\n      \"icj3bimn4dg5v1yeu7i2frzq\"\n    ],\n    [\n      \"eq\",\n      \"cityId\",\n      \"dl7r7ezrt909p6bmct6avl9l\"\n    ],\n    [\n      \"eq\",\n      \"smoking\",\n      0\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4d330156-ba25-4e5f-86d5-e5de49c9e88d",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/property/list - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/property/list - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/property/list - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"listingId\":{\"type\":\"number\"},\"name\":{\"type\":\"string\",\"maxLength\":256},\"address\":{\"type\":\"string\",\"maxLength\":256},\"latitude\":{\"type\":\"string\"},\"longitude\":{\"type\":\"string\"},\"yearBuilt\":{\"type\":[\"number\",\"null\"]},\"descriptionTitle\":{\"type\":[\"string\",\"null\"],\"maxLength\":256},\"descriptionSubtitle\":{\"type\":[\"string\",\"null\"],\"maxLength\":256},\"descriptionText\":{\"type\":[\"string\",\"null\"]},\"typePropId\":{\"type\":\"string\",\"maxLength\":128},\"communityId\":{\"type\":[\"string\",\"null\"],\"maxLength\":128},\"cityId\":{\"type\":\"string\",\"maxLength\":128},\"smoking\":{\"type\":\"boolean\"},\"cats\":{\"type\":\"boolean\"},\"dogs\":{\"type\":\"boolean\"},\"petsNegotiable\":{\"type\":\"boolean\"},\"petsFee\":{\"type\":[\"number\",\"null\"]},\"petsFeeInterval\":{\"type\":[\"string\",\"null\"],\"maxLength\":128},\"published\":{\"type\":\"boolean\"},\"customerRanking\":{\"type\":\"number\"},\"paidSearchRanking\":{\"type\":\"boolean\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"listingId\",\"name\",\"address\",\"latitude\",\"longitude\",\"yearBuilt\",\"descriptionTitle\",\"descriptionSubtitle\",\"descriptionText\",\"typePropId\",\"communityId\",\"cityId\",\"smoking\",\"cats\",\"dogs\",\"petsNegotiable\",\"petsFee\",\"petsFeeInterval\",\"published\",\"customerRanking\",\"paidSearchRanking\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/property/list - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "1b26a72d-f469-4cca-b0b7-ad2c3daf0462",
          "name": "/property/create",
          "request": {
            "name": "/property/create",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "property",
                "create"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Property name\",\n  \"address\": \"123 Main St, Calgary, AB T2P 1J9\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\",\n  \"yearBuilt\": 2019,\n  \"descriptionTitle\": \"Property description title\",\n  \"descriptionSubtitle\": \"Property description subtitle\",\n  \"descriptionText\": \"Property description text\",\n  \"typePropId\": \"zvyuykclatrceuwmxo1bd42p\",\n  \"communityId\": \"icj3bimn4dg5v1yeu7i2frzq\",\n  \"cityId\": \"dl7r7ezrt909p6bmct6avl9l\",\n  \"smoking\": false,\n  \"cats\": true,\n  \"dogs\": false,\n  \"petsNegotiable\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "0a9b7d86-f066-46b3-95be-48243288177e",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "property",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Property name\",\n  \"address\": \"123 Main St, Calgary, AB T2P 1J9\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\",\n  \"yearBuilt\": 2019,\n  \"descriptionTitle\": \"Property description title\",\n  \"descriptionSubtitle\": \"Property description subtitle\",\n  \"descriptionText\": \"Property description text\",\n  \"typePropId\": \"zvyuykclatrceuwmxo1bd42p\",\n  \"communityId\": \"icj3bimn4dg5v1yeu7i2frzq\",\n  \"cityId\": \"dl7r7ezrt909p6bmct6avl9l\",\n  \"smoking\": false,\n  \"cats\": true,\n  \"dogs\": false,\n  \"petsNegotiable\": true\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"quis \"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "fefeb09c-0c14-49aa-854a-f43f30950c19",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "property",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Property name\",\n  \"address\": \"123 Main St, Calgary, AB T2P 1J9\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\",\n  \"yearBuilt\": 2019,\n  \"descriptionTitle\": \"Property description title\",\n  \"descriptionSubtitle\": \"Property description subtitle\",\n  \"descriptionText\": \"Property description text\",\n  \"typePropId\": \"zvyuykclatrceuwmxo1bd42p\",\n  \"communityId\": \"icj3bimn4dg5v1yeu7i2frzq\",\n  \"cityId\": \"dl7r7ezrt909p6bmct6avl9l\",\n  \"smoking\": false,\n  \"cats\": true,\n  \"dogs\": false,\n  \"petsNegotiable\": true\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "09d02c4c-7dfa-43f4-bd46-eb6250bec74d",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/property/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/property/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/property/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/property/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "afaac84d-41b0-4400-a4f3-7e8f49d43b1e",
          "name": "/property/update/:id",
          "request": {
            "name": "/property/update/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "property",
                "update",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "hdsyi7gw3n77jrngcck1x33y",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Property name\",\n  \"address\": \"123 Main St, Calgary, AB T2P 1J9\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\",\n  \"yearBuilt\": 2020,\n  \"descriptionTitle\": \"Property description title\",\n  \"descriptionSubtitle\": \"Property description subtitle\",\n  \"descriptionText\": \"Property description text\",\n  \"smoking\": true,\n  \"cats\": true,\n  \"dogs\": false,\n  \"petsNegotiable\": true,\n  \"petsFee\": 100\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "217507f2-f63c-482c-b808-1013aa9c7deb",
              "name": "Responds with the id of the updated property.",
              "originalRequest": {
                "url": {
                  "path": [
                    "property",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "hdsyi7gw3n77jrngcck1x33y",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Property name\",\n  \"address\": \"123 Main St, Calgary, AB T2P 1J9\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\",\n  \"yearBuilt\": 2020,\n  \"descriptionTitle\": \"Property description title\",\n  \"descriptionSubtitle\": \"Property description subtitle\",\n  \"descriptionText\": \"Property description text\",\n  \"smoking\": true,\n  \"cats\": true,\n  \"dogs\": false,\n  \"petsNegotiable\": true,\n  \"petsFee\": 100\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"quis \"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "75f523bd-0f70-4443-8d67-f4e0129cfb66",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "property",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "hdsyi7gw3n77jrngcck1x33y",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Property name\",\n  \"address\": \"123 Main St, Calgary, AB T2P 1J9\",\n  \"latitude\": \"51.0447\",\n  \"longitude\": \"-114.0719\",\n  \"yearBuilt\": 2020,\n  \"descriptionTitle\": \"Property description title\",\n  \"descriptionSubtitle\": \"Property description subtitle\",\n  \"descriptionText\": \"Property description text\",\n  \"smoking\": true,\n  \"cats\": true,\n  \"dogs\": false,\n  \"petsNegotiable\": true,\n  \"petsFee\": 100\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "db9da9bc-1ad3-4144-bc9d-3ec31fcf74c9",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[PUT]::/property/update/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[PUT]::/property/update/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[PUT]::/property/update/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[PUT]::/property/update/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "413d1d26-8280-4d78-9226-c14d4b0ab283",
          "name": "/property/delete/:id",
          "request": {
            "name": "/property/delete/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "property",
                "delete",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "hdsyi7gw3n77jrngcck1x33y",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "e50e7e8b-2c7b-4dfc-9bec-f263825b1efe",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "property",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "hdsyi7gw3n77jrngcck1x33y",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "87e8cb6d-7b20-4b03-a151-74e5da9c01c3",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "property",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "hdsyi7gw3n77jrngcck1x33y",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "1dc3a8c0-1988-47d3-ae0e-c3ec7b2736eb",
              "name": "Responds with a conflict error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "property",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "hdsyi7gw3n77jrngcck1x33y",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1205470c-7541-44d4-a06f-de636652f025",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[DELETE]::/property/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[DELETE]::/property/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[DELETE]::/property/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/property/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "1b54cbf2-b0c6-4ae4-8b85-902df3e0c083",
      "name": "region",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "823f1685-e7be-4cd9-a8c7-8d6ac78cccd4",
          "name": "/region/:id",
          "request": {
            "name": "/region/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "region",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "kj3nrb5rv094v8ns5ptz1jhc",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "85ba1a57-df5b-445b-a3b9-fb7bfd3a274e",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "region",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "kj3nrb5rv094v8ns5ptz1jhc",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"adipisicing\",\n    \"name\": \"elit dolor\",\n    \"administrativeName\": \"sunt in nisi irure\",\n    \"cities\": [\n      {\n        \"id\": \"ea est\",\n        \"name\": \"aliqua consectetur anim\"\n      },\n      {\n        \"id\": \"aute Duis est do Excepteur\",\n        \"name\": \"ex cillum velit reprehenderit\"\n      }\n    ]\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "d7adda2b-5404-46fa-a0e0-ff6ff521a74a",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "region",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "kj3nrb5rv094v8ns5ptz1jhc",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9cee1d59-247f-422f-ae39-fbf5bc108ac1",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/region/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/region/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/region/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"administrativeName\":{\"type\":\"string\"},\"cities\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\"]}}},\"required\":[\"id\",\"name\",\"administrativeName\",\"cities\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/region/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "79f36ab5-72e6-4aed-80bf-8b0e5f3991ca",
          "name": "/region/list",
          "request": {
            "name": "/region/list",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "region",
                "list"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "limit",
                  "value": "10"
                },
                {
                  "disabled": true,
                  "key": "orderBy",
                  "value": "updatedAt-asc"
                },
                {
                  "disabled": true,
                  "key": "cursor",
                  "value": "abqdj6xe8puto1j83soz3bml"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Alberta\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Manitoba\"\n        ]\n      ]\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-23T00:00:00.000Z\",\n      \"2024-02-12T00:00:00.000Z\"\n    ]\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "2db7823a-44d3-4557-b999-65543d9d4cb8",
              "name": "Responds with an array of region objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
              "originalRequest": {
                "url": {
                  "path": [
                    "region",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "updatedAt-asc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Alberta\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Manitoba\"\n        ]\n      ]\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-23T00:00:00.000Z\",\n      \"2024-02-12T00:00:00.000Z\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"occaecat incididunt in fugiat\",\n      \"name\": \"aliquip voluptate nulla minim\",\n      \"administrativeName\": \"anim enim\",\n      \"createdAt\": \"est ip\",\n      \"updatedAt\": \"dolore magna aliquip adipisicing\"\n    },\n    {\n      \"id\": \"ex mollit do\",\n      \"name\": \"Duis aliqua proident\",\n      \"administrativeName\": \"dolor consequat veniam laborum\",\n      \"createdAt\": \"nostrud dolor et non\",\n      \"updatedAt\": \"in officia quis commodo\"\n    }\n  ]\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "144e14b0-17dd-431d-92d5-1b6188976983",
              "name": "Responds with a bad request error object",
              "originalRequest": {
                "url": {
                  "path": [
                    "region",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "updatedAt-asc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"Alberta\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"Manitoba\"\n        ]\n      ]\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-23T00:00:00.000Z\",\n      \"2024-02-12T00:00:00.000Z\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "716ffe17-ec6e-40ab-b919-5c2d2c9c0681",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/region/list - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/region/list - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/region/list - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"administrativeName\":{\"type\":\"string\",\"maxLength\":256},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"administrativeName\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/region/list - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "c299e501-4d84-4e07-9e5d-5906a4fe3999",
          "name": "/region/create",
          "request": {
            "name": "/region/create",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "region",
                "create"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Ontario\",\n  \"administrativeName\": \"Province\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "64176178-9268-4985-8e85-0424093b753b",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "region",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Ontario\",\n  \"administrativeName\": \"Province\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"quis \"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "f738fd3c-88e3-4863-9c38-bec66ecf3623",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "region",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Ontario\",\n  \"administrativeName\": \"Province\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5277ca31-5f0c-495e-96ca-bb750d111c50",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/region/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/region/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/region/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/region/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "ccfeea7c-920f-44c3-8278-9daa9137e73a",
          "name": "/region/update/:id",
          "request": {
            "name": "/region/update/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "region",
                "update",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "kj3nrb5rv094v8ns5ptz1jhc",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"administrativeName\": \"State\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "e767d95b-a545-4142-be29-5cf67145ec95",
              "name": "Responds with the id of the updated region.",
              "originalRequest": {
                "url": {
                  "path": [
                    "region",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "kj3nrb5rv094v8ns5ptz1jhc",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"administrativeName\": \"State\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"quis \"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "bebd2697-64bf-40a0-952a-a8bc47be9517",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "region",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "kj3nrb5rv094v8ns5ptz1jhc",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"administrativeName\": \"State\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b2849c0d-83d4-4256-b6f6-bef4c231a27e",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[PUT]::/region/update/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[PUT]::/region/update/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[PUT]::/region/update/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[PUT]::/region/update/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "f0c4d0bd-1306-4cda-81ba-81dc1ed0b1c9",
          "name": "/region/delete/:id",
          "request": {
            "name": "/region/delete/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "region",
                "delete",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "kj3nrb5rv094v8ns5ptz1jhc",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "92091347-1cb8-42cc-aab0-80468e437d54",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "region",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "kj3nrb5rv094v8ns5ptz1jhc",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "16b5b848-3839-4fbf-8597-8fb4cdc3e0e9",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "region",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "kj3nrb5rv094v8ns5ptz1jhc",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "8bf5e67e-bf0c-40c4-b341-de13020387ef",
              "name": "Responds with a conflict error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "region",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "kj3nrb5rv094v8ns5ptz1jhc",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "aae6a0f1-eff7-43a0-9b2b-23cae588789b",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[DELETE]::/region/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[DELETE]::/region/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[DELETE]::/region/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/region/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "980c5571-cf76-4e54-b0eb-2eae6970a4fe",
      "name": "typeProp",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "e86eef5c-367d-4c57-92c5-a217a3b4adf9",
          "name": "/type-prop/list",
          "request": {
            "name": "/type-prop/list",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "type-prop",
                "list"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "limit",
                  "value": "10"
                },
                {
                  "disabled": true,
                  "key": "orderBy",
                  "value": "name-asc"
                },
                {
                  "disabled": true,
                  "key": "cursor",
                  "value": "abqdj6xe8puto1j83soz3bml"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "34bde809-bb63-4f83-ad93-7478e16a26c4",
              "name": "Responds with an array of typeProp objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
              "originalRequest": {
                "url": {
                  "path": [
                    "type-prop",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "name-asc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"fugiat voluptate exer\",\n      \"name\": \"enim non sunt\",\n      \"order\": 72605381.4225435,\n      \"createdAt\": \"do tempor ut\",\n      \"updatedAt\": \"quis sint exercitation proident\"\n    },\n    {\n      \"id\": \"minim eu tempor mollit est\",\n      \"name\": \"labore nostrud ipsum\",\n      \"order\": 70491024.52151135,\n      \"createdAt\": \"irure commodo Excepteur dolore\",\n      \"updatedAt\": \"ea ad tempor exercitation\"\n    }\n  ]\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "368c1205-c4a2-4def-a885-f31f47648dac",
              "name": "Responds with a bad request error object",
              "originalRequest": {
                "url": {
                  "path": [
                    "type-prop",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "name-asc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"name\",\n          \"3+\"\n        ],\n        [\n          \"eq\",\n          \"name\",\n          \"2.5\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"order\",\n      1\n    ],\n    [\n      \"lt\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"gt\",\n      \"updatedAt\",\n      \"2024-01-01T00:00:00.000Z\"\n    ],\n    [\n      \"between\",\n      \"createdAt\",\n      \"2024-01-01T00:00:00.000Z\",\n      \"2024-01-02T00:00:00.000Z\"\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e5593910-6e3f-466a-8ae5-7f9ac01b7fb0",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/type-prop/list - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/type-prop/list - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/type-prop/list - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"order\":{\"type\":\"number\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"order\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/type-prop/list - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "6c96c6fe-689f-4662-9b62-2959f8398fd4",
          "name": "/type-prop/create",
          "request": {
            "name": "/type-prop/create",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "type-prop",
                "create"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "ffaa710f-879f-45d0-8132-6b0604a02533",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "type-prop",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"quis \"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "41efc9a7-071e-4c2a-a312-aeeb8f4967b1",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "type-prop",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"1.55\",\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6a7e2665-da45-4da1-aec4-959ae300468b",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/type-prop/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/type-prop/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/type-prop/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/type-prop/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "1155a92e-25a1-4129-8340-0fbf475ca1a3",
          "name": "/type-prop/update/:id",
          "request": {
            "name": "/type-prop/update/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "type-prop",
                "update",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "zvyuykclatrceuwmxo1bd42p",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"order\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "eb7f8650-02bd-4469-9aa2-97af14e2467d",
              "name": "Responds with the id of the updated typeProp.",
              "originalRequest": {
                "url": {
                  "path": [
                    "type-prop",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "zvyuykclatrceuwmxo1bd42p",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"quis \"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "c36fa292-1440-4814-b088-dbac8b641f47",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "type-prop",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "zvyuykclatrceuwmxo1bd42p",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"order\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8a03d06b-36d4-43cb-bd22-4d143d7bb381",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[PUT]::/type-prop/update/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[PUT]::/type-prop/update/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[PUT]::/type-prop/update/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[PUT]::/type-prop/update/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "061c2dff-b3c7-4594-b2a9-720c76e3aadc",
          "name": "/type-prop/delete/:id",
          "request": {
            "name": "/type-prop/delete/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "type-prop",
                "delete",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "zvyuykclatrceuwmxo1bd42p",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "7d011007-c6e7-4184-a0d1-7522117c69d6",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "type-prop",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "zvyuykclatrceuwmxo1bd42p",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "35b3245c-7e1e-4ad6-901b-f0a0af53c25c",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "type-prop",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "zvyuykclatrceuwmxo1bd42p",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "92f310cc-719b-4c96-85a2-a13b685ef3f8",
              "name": "Responds with a conflict error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "type-prop",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "zvyuykclatrceuwmxo1bd42p",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3bc3df1f-98bd-4e5a-8df7-f5b2b889764f",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[DELETE]::/type-prop/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[DELETE]::/type-prop/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[DELETE]::/type-prop/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/type-prop/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "c836370a-e33b-4c92-b8a7-993998eba9cf",
      "name": "unit",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "653d80fd-60b7-4235-8d60-c6af415d745c",
          "name": "/unit/:id",
          "request": {
            "name": "/unit/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "unit",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "amyphpzv9inobdo3x1dfu18p",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "bdb39db4-0431-4e89-88b5-edc8adfb1315",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "unit",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "amyphpzv9inobdo3x1dfu18p",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"amet\",\n    \"propertyId\": \"ad Duis veniam\",\n    \"floorPlanId\": \"sint sunt in\",\n    \"name\": \"enim dolor\",\n    \"rent\": 98291724,\n    \"deposit\": -95481863,\n    \"available\": true,\n    \"immediate\": false,\n    \"availableDate\": \"labore anim exercitation ex\",\n    \"shortterm\": false,\n    \"longterm\": true,\n    \"unitNumber\": \"reprehenderit minim nisi\",\n    \"unitName\": \"tempor ipsum laborum\",\n    \"surface\": -82930101,\n    \"furnished\": false,\n    \"heat\": true,\n    \"water\": true,\n    \"electricity\": true,\n    \"internet\": true,\n    \"television\": true,\n    \"order\": 29675344,\n    \"published\": true,\n    \"bedroom\": {\n      \"name\": \"sint ut sit cupidatat\"\n    },\n    \"bathroom\": {\n      \"name\": \"consectetur qui\"\n    }\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "94e28cda-e8bf-49d8-806e-6002a6ccae75",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "unit",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "amyphpzv9inobdo3x1dfu18p",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "62c3c6f4-6149-47ce-9cc3-a6396c3e2fbc",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/unit/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/unit/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/unit/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"propertyId\":{\"type\":\"string\"},\"floorPlanId\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"rent\":{\"type\":\"integer\"},\"deposit\":{\"type\":[\"integer\",\"null\"]},\"available\":{\"type\":\"boolean\"},\"immediate\":{\"type\":\"boolean\"},\"availableDate\":{\"type\":[\"string\",\"null\"]},\"shortterm\":{\"type\":\"boolean\"},\"longterm\":{\"type\":\"boolean\"},\"unitNumber\":{\"type\":[\"string\",\"null\"]},\"unitName\":{\"type\":[\"string\",\"null\"]},\"surface\":{\"type\":\"integer\"},\"furnished\":{\"type\":\"boolean\"},\"heat\":{\"type\":\"boolean\"},\"water\":{\"type\":\"boolean\"},\"electricity\":{\"type\":\"boolean\"},\"internet\":{\"type\":\"boolean\"},\"television\":{\"type\":\"boolean\"},\"order\":{\"type\":\"integer\"},\"published\":{\"type\":\"boolean\"},\"bedroom\":{\"type\":[\"object\",\"null\"],\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]},\"bathroom\":{\"type\":[\"object\",\"null\"],\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]}},\"required\":[\"id\",\"propertyId\",\"floorPlanId\",\"name\",\"rent\",\"deposit\",\"available\",\"immediate\",\"availableDate\",\"shortterm\",\"longterm\",\"unitNumber\",\"unitName\",\"surface\",\"furnished\",\"heat\",\"water\",\"electricity\",\"internet\",\"television\",\"order\",\"published\",\"bedroom\",\"bathroom\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/unit/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "dd79bbb6-79bf-462f-b5a2-f1a8e8eae402",
          "name": "/unit/list",
          "request": {
            "name": "/unit/list",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "unit",
                "list"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "limit",
                  "value": "10"
                },
                {
                  "disabled": true,
                  "key": "orderBy",
                  "value": "surface-desc"
                },
                {
                  "disabled": true,
                  "key": "cursor",
                  "value": "abqdj6xe8puto1j83soz3bml"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"bedroomId\",\n          \"zjggk1ve17r7jmpq8dtmbjyw\"\n        ],\n        [\n          \"eq\",\n          \"bedroomId\",\n          \"kcfw2qhwnky96aeeov73aaze\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"bathroomId\",\n      \"qae4cp7xnotk3wh26dkpp7y7\"\n    ],\n    [\n      \"eq\",\n      \"longterm\",\n      1\n    ],\n    [\n      \"between\",\n      \"surface\",\n      700,\n      1000\n    ],\n    [\n      \"eq\",\n      \"furnished\",\n      1\n    ],\n    [\n      \"eq\",\n      \"heat\",\n      1\n    ],\n    [\n      \"eq\",\n      \"water\",\n      1\n    ],\n    [\n      \"eq\",\n      \"electricity\",\n      1\n    ]\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "ebb2c580-2968-4754-9b20-b22027d91cb5",
              "name": "Responds with an array of unit objects. If no filters are used, all items are returned. If nothing is found according to filters, an empty array is returned as \"data\".",
              "originalRequest": {
                "url": {
                  "path": [
                    "unit",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "surface-desc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"bedroomId\",\n          \"zjggk1ve17r7jmpq8dtmbjyw\"\n        ],\n        [\n          \"eq\",\n          \"bedroomId\",\n          \"kcfw2qhwnky96aeeov73aaze\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"bathroomId\",\n      \"qae4cp7xnotk3wh26dkpp7y7\"\n    ],\n    [\n      \"eq\",\n      \"longterm\",\n      1\n    ],\n    [\n      \"between\",\n      \"surface\",\n      700,\n      1000\n    ],\n    [\n      \"eq\",\n      \"furnished\",\n      1\n    ],\n    [\n      \"eq\",\n      \"heat\",\n      1\n    ],\n    [\n      \"eq\",\n      \"water\",\n      1\n    ],\n    [\n      \"eq\",\n      \"electricity\",\n      1\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"amet sint id ipsum\",\n      \"name\": \"nulla\",\n      \"propertyId\": \"dolor qui\",\n      \"floorPlanId\": \"irure ad nulla\",\n      \"rent\": -69403229.7560565,\n      \"deposit\": -21473395.823700204,\n      \"available\": true,\n      \"immediate\": false,\n      \"availableDate\": \"dolore et\",\n      \"shortterm\": false,\n      \"longterm\": true,\n      \"unitNumber\": \"Ut esse commodo in\",\n      \"unitName\": \"deserunt sed irure\",\n      \"surface\": -98469037.45809393,\n      \"furnished\": false,\n      \"bedroomId\": \"tempor\",\n      \"bathroomId\": \"cu\",\n      \"heat\": false,\n      \"water\": true,\n      \"electricity\": true,\n      \"internet\": true,\n      \"television\": true,\n      \"order\": -28600475.288473204,\n      \"published\": false,\n      \"createdAt\": \"veniam do\",\n      \"updatedAt\": \"deserunt ex eiusmod\"\n    },\n    {\n      \"id\": \"proident magna \",\n      \"name\": \"est in mollit\",\n      \"propertyId\": \"incididunt sit\",\n      \"floorPlanId\": \"in aliquip ad\",\n      \"rent\": -14770482.772161528,\n      \"deposit\": 98835222.30758506,\n      \"available\": false,\n      \"immediate\": true,\n      \"availableDate\": \"velit aliqua\",\n      \"shortterm\": true,\n      \"longterm\": true,\n      \"unitNumber\": \"culpa Lorem\",\n      \"unitName\": \"id\",\n      \"surface\": 18120973.1694369,\n      \"furnished\": true,\n      \"bedroomId\": \"sed consectetur\",\n      \"bathroomId\": \"velit exercitation proident\",\n      \"heat\": true,\n      \"water\": false,\n      \"electricity\": false,\n      \"internet\": true,\n      \"television\": true,\n      \"order\": -22936352.200759336,\n      \"published\": true,\n      \"createdAt\": \"dolor Duis qui\",\n      \"updatedAt\": \"s\"\n    }\n  ]\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "99c3b334-5406-48c5-9fdf-b4e5fb00dca4",
              "name": "Responds with a bad request error object",
              "originalRequest": {
                "url": {
                  "path": [
                    "unit",
                    "list"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "orderBy",
                      "value": "surface-desc"
                    },
                    {
                      "key": "cursor",
                      "value": "abqdj6xe8puto1j83soz3bml"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"and\": [\n    [\n      \"or\",\n      [\n        [\n          \"eq\",\n          \"bedroomId\",\n          \"zjggk1ve17r7jmpq8dtmbjyw\"\n        ],\n        [\n          \"eq\",\n          \"bedroomId\",\n          \"kcfw2qhwnky96aeeov73aaze\"\n        ]\n      ]\n    ],\n    [\n      \"eq\",\n      \"bathroomId\",\n      \"qae4cp7xnotk3wh26dkpp7y7\"\n    ],\n    [\n      \"eq\",\n      \"longterm\",\n      1\n    ],\n    [\n      \"between\",\n      \"surface\",\n      700,\n      1000\n    ],\n    [\n      \"eq\",\n      \"furnished\",\n      1\n    ],\n    [\n      \"eq\",\n      \"heat\",\n      1\n    ],\n    [\n      \"eq\",\n      \"water\",\n      1\n    ],\n    [\n      \"eq\",\n      \"electricity\",\n      1\n    ]\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "319a49cf-b8ed-4149-a9f9-f56061efb327",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/unit/list - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/unit/list - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/unit/list - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"maxLength\":128},\"name\":{\"type\":\"string\",\"maxLength\":256},\"propertyId\":{\"type\":\"string\",\"maxLength\":128},\"floorPlanId\":{\"type\":\"string\",\"maxLength\":128},\"rent\":{\"type\":\"number\"},\"deposit\":{\"type\":[\"number\",\"null\"]},\"available\":{\"type\":\"boolean\"},\"immediate\":{\"type\":\"boolean\"},\"availableDate\":{\"type\":[\"string\",\"null\"]},\"shortterm\":{\"type\":\"boolean\"},\"longterm\":{\"type\":\"boolean\"},\"unitNumber\":{\"type\":[\"string\",\"null\"],\"maxLength\":128},\"unitName\":{\"type\":[\"string\",\"null\"],\"maxLength\":128},\"surface\":{\"type\":\"number\"},\"furnished\":{\"type\":\"boolean\"},\"bedroomId\":{\"type\":[\"string\",\"null\"],\"maxLength\":128},\"bathroomId\":{\"type\":[\"string\",\"null\"],\"maxLength\":128},\"heat\":{\"type\":\"boolean\"},\"water\":{\"type\":\"boolean\"},\"electricity\":{\"type\":\"boolean\"},\"internet\":{\"type\":\"boolean\"},\"television\":{\"type\":\"boolean\"},\"order\":{\"type\":\"number\"},\"published\":{\"type\":\"boolean\"},\"createdAt\":{\"type\":\"string\"},\"updatedAt\":{\"type\":\"string\"}},\"required\":[\"id\",\"name\",\"propertyId\",\"floorPlanId\",\"rent\",\"deposit\",\"available\",\"immediate\",\"availableDate\",\"shortterm\",\"longterm\",\"unitNumber\",\"unitName\",\"surface\",\"furnished\",\"bedroomId\",\"bathroomId\",\"heat\",\"water\",\"electricity\",\"internet\",\"television\",\"order\",\"published\",\"createdAt\",\"updatedAt\"]}}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/unit/list - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "1711c46c-f5ef-425e-ad85-eaf77e1560fe",
          "name": "/unit/create",
          "request": {
            "name": "/unit/create",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "unit",
                "create"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"propertyId\": \"hdsyi7gw3n77jrngcck1x33y\",\n  \"floorPlanId\": \"fe897wto8ribvu9024zvfvxp\",\n  \"name\": \"Unit name\",\n  \"rent\": 1000,\n  \"deposit\": 1000,\n  \"shortterm\": true,\n  \"longterm\": true,\n  \"unitNumber\": \"101\",\n  \"unitName\": \"101\",\n  \"surface\": 1000,\n  \"furnished\": true,\n  \"heat\": true,\n  \"water\": true,\n  \"electricity\": true,\n  \"internet\": true,\n  \"television\": true,\n  \"order\": 1,\n  \"bedroomId\": \"zjggk1ve17r7jmpq8dtmbjyw\",\n  \"bathroomId\": \"qae4cp7xnotk3wh26dkpp7y7\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "aa173117-4018-427e-a5e1-6e09448c058d",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "unit",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"propertyId\": \"hdsyi7gw3n77jrngcck1x33y\",\n  \"floorPlanId\": \"fe897wto8ribvu9024zvfvxp\",\n  \"name\": \"Unit name\",\n  \"rent\": 1000,\n  \"deposit\": 1000,\n  \"shortterm\": true,\n  \"longterm\": true,\n  \"unitNumber\": \"101\",\n  \"unitName\": \"101\",\n  \"surface\": 1000,\n  \"furnished\": true,\n  \"heat\": true,\n  \"water\": true,\n  \"electricity\": true,\n  \"internet\": true,\n  \"television\": true,\n  \"order\": 1,\n  \"bedroomId\": \"zjggk1ve17r7jmpq8dtmbjyw\",\n  \"bathroomId\": \"qae4cp7xnotk3wh26dkpp7y7\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"quis \"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "a30f0d8b-8169-490e-a515-953015e01736",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "unit",
                    "create"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"propertyId\": \"hdsyi7gw3n77jrngcck1x33y\",\n  \"floorPlanId\": \"fe897wto8ribvu9024zvfvxp\",\n  \"name\": \"Unit name\",\n  \"rent\": 1000,\n  \"deposit\": 1000,\n  \"shortterm\": true,\n  \"longterm\": true,\n  \"unitNumber\": \"101\",\n  \"unitName\": \"101\",\n  \"surface\": 1000,\n  \"furnished\": true,\n  \"heat\": true,\n  \"water\": true,\n  \"electricity\": true,\n  \"internet\": true,\n  \"television\": true,\n  \"order\": 1,\n  \"bedroomId\": \"zjggk1ve17r7jmpq8dtmbjyw\",\n  \"bathroomId\": \"qae4cp7xnotk3wh26dkpp7y7\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3dd0d25b-5401-4469-b005-938f80967433",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/unit/create - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/unit/create - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/unit/create - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/unit/create - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "24ef3347-0117-4378-be58-b7528d639942",
          "name": "/unit/update/:id",
          "request": {
            "name": "/unit/update/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "unit",
                "update",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "amyphpzv9inobdo3x1dfu18p",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"rent\": 1500,\n  \"deposit\": 1500,\n  \"shortterm\": false,\n  \"longterm\": true,\n  \"order\": 0,\n  \"published\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "ddbc48d7-24cd-4316-80f9-2d971a0c2925",
              "name": "Responds with the id of the updated unit.",
              "originalRequest": {
                "url": {
                  "path": [
                    "unit",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "amyphpzv9inobdo3x1dfu18p",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"rent\": 1500,\n  \"deposit\": 1500,\n  \"shortterm\": false,\n  \"longterm\": true,\n  \"order\": 0,\n  \"published\": true\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"quis \"\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "2a1450ec-9547-4531-a851-af90a9d7ff89",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "unit",
                    "update",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "amyphpzv9inobdo3x1dfu18p",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"rent\": 1500,\n  \"deposit\": 1500,\n  \"shortterm\": false,\n  \"longterm\": true,\n  \"order\": 0,\n  \"published\": true\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5235ae1a-d088-471a-9ed5-fc32e9eb3090",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[PUT]::/unit/update/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[PUT]::/unit/update/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[PUT]::/unit/update/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]},\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}},\"required\":[\"success\",\"data\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[PUT]::/unit/update/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "1dc8b0cc-b662-4a18-9802-d9bc24482728",
          "name": "/unit/delete/:id",
          "request": {
            "name": "/unit/delete/:id",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "unit",
                "delete",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "amyphpzv9inobdo3x1dfu18p",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "33f202e9-1610-42e7-acd4-bf98673d78f0",
              "name": "Responds with a success message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "unit",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "amyphpzv9inobdo3x1dfu18p",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": true\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "92fa2ff1-1c0d-454c-9b17-4fde46f16808",
              "name": "Responds with a bad request error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "unit",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "amyphpzv9inobdo3x1dfu18p",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "547f3407-16d1-4e08-838e-cb2da637079d",
              "name": "Responds with a conflict error message.",
              "originalRequest": {
                "url": {
                  "path": [
                    "unit",
                    "delete",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) ",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "amyphpzv9inobdo3x1dfu18p",
                      "key": "id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"success\": false,\n  \"error\": {\n    \"reason\": \"aute ullamco\",\n    \"issues\": [\n      {\n        \"message\": \"amet reprehenderit\",\n        \"path\": [\n          \"Ut tempor eiusmo\",\n          \"Excepteur incididunt aliqua\"\n        ]\n      },\n      {\n        \"message\": \"ullamco proident\",\n        \"path\": [\n          \"veniam dolore\",\n          \"nisi tempor eiusmod irure\"\n        ]\n      }\n    ]\n  }\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0c36146a-af7d-44f3-836f-677d4c0d1a32",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[DELETE]::/unit/delete/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[DELETE]::/unit/delete/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[DELETE]::/unit/delete/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"success\":{\"type\":\"boolean\",\"enum\":[true]}},\"required\":[\"success\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/unit/delete/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "/",
      "key": "baseUrl"
    }
  ],
  "info": {
    "_postman_id": "39ca12c5-98c9-415b-bc96-0844f545832b",
    "name": "Real Estate API Demo",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "",
      "type": "text/plain"
    }
  }
}